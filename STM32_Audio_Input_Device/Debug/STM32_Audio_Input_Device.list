
STM32_Audio_Input_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e8c  08006e8c  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08006e8c  08006e8c  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e8c  08006e8c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08006e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000190  08007024  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  08007024  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f42  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000374b  00000000  00000000  000370fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c8  00000000  00000000  0003a848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  0003ba10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a97  00000000  00000000  0003ca30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001131c  00000000  00000000  000564c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000825fc  00000000  00000000  000677e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f84  00000000  00000000  000e9e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d9c 	.word	0x08006d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	08006d9c 	.word	0x08006d9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fadb 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f82d 	bl	8000288 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  for(int i = 0; i < 100; i++)
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e00d      	b.n	8000250 <main+0x30>
  {
	  a[i] = i*30;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	b29b      	uxth	r3, r3
 8000238:	1c1a      	adds	r2, r3, #0
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	18db      	adds	r3, r3, r3
 8000240:	b299      	uxth	r1, r3
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0x60>)
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	0052      	lsls	r2, r2, #1
 8000248:	52d1      	strh	r1, [r2, r3]
  for(int i = 0; i < 100; i++)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3301      	adds	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b63      	cmp	r3, #99	; 0x63
 8000254:	ddee      	ble.n	8000234 <main+0x14>
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f933 	bl	80004c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800025a:	f000 f913 	bl	8000484 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800025e:	f006 f821 	bl	80062a4 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8000262:	f000 f865 	bl	8000330 <MX_DAC_Init>
  MX_TIM2_Init();
 8000266:	f000 f891 	bl	800038c <MX_TIM2_Init>

    /* USER CODE BEGIN 3 */
	  // Toggle the LEDs for fun
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	019b      	lsls	r3, r3, #6
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	0019      	movs	r1, r3
 8000274:	f000 fefa 	bl	800106c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000278:	2001      	movs	r0, #1
 800027a:	f000 fb15 	bl	80008a8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800027e:	e7f4      	b.n	800026a <main+0x4a>
 8000280:	20000258 	.word	0x20000258
 8000284:	48000800 	.word	0x48000800

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b099      	sub	sp, #100	; 0x64
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	242c      	movs	r4, #44	; 0x2c
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2334      	movs	r3, #52	; 0x34
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f006 fd05 	bl	8006ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	231c      	movs	r3, #28
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	2310      	movs	r3, #16
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f006 fcfd 	bl	8006ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	231c      	movs	r3, #28
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f006 fcf6 	bl	8006ca8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2220      	movs	r2, #32
 80002c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2201      	movs	r2, #1
 80002c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2200      	movs	r2, #0
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fef5 	bl	80020c0 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002da:	f000 f93b 	bl	8000554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	211c      	movs	r1, #28
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2203      	movs	r2, #3
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f002 fa65 	bl	80027cc <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000306:	f000 f925 	bl	8000554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800030a:	003b      	movs	r3, r7
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0292      	lsls	r2, r2, #10
 8000310:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	003b      	movs	r3, r7
 800031a:	0018      	movs	r0, r3
 800031c:	f002 fbae 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000324:	f000 f916 	bl	8000554 <Error_Handler>
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b019      	add	sp, #100	; 0x64
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	2308      	movs	r3, #8
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f006 fcb2 	bl	8006ca8 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_DAC_Init+0x54>)
 8000346:	4a10      	ldr	r2, [pc, #64]	; (8000388 <MX_DAC_Init+0x58>)
 8000348:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_DAC_Init+0x54>)
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fbab 	bl	8000aa8 <HAL_DAC_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000356:	f000 f8fd 	bl	8000554 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800035a:	003b      	movs	r3, r7
 800035c:	2224      	movs	r2, #36	; 0x24
 800035e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000366:	0039      	movs	r1, r7
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_DAC_Init+0x54>)
 800036a:	2200      	movs	r2, #0
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fbbf 	bl	8000af0 <HAL_DAC_ConfigChannel>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 f8ed 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000204 	.word	0x20000204
 8000388:	40007400 	.word	0x40007400

0800038c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b08e      	sub	sp, #56	; 0x38
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	2328      	movs	r3, #40	; 0x28
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	0018      	movs	r0, r3
 8000398:	2310      	movs	r3, #16
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f006 fc83 	bl	8006ca8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a2:	2320      	movs	r3, #32
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	0018      	movs	r0, r3
 80003a8:	2308      	movs	r3, #8
 80003aa:	001a      	movs	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	f006 fc7b 	bl	8006ca8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	0018      	movs	r0, r3
 80003b6:	231c      	movs	r3, #28
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f006 fc74 	bl	8006ca8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c0:	4b2e      	ldr	r3, [pc, #184]	; (800047c <MX_TIM2_Init+0xf0>)
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	05d2      	lsls	r2, r2, #23
 80003c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003c8:	4b2c      	ldr	r3, [pc, #176]	; (800047c <MX_TIM2_Init+0xf0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	4b2b      	ldr	r3, [pc, #172]	; (800047c <MX_TIM2_Init+0xf0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2172;
 80003d4:	4b29      	ldr	r3, [pc, #164]	; (800047c <MX_TIM2_Init+0xf0>)
 80003d6:	4a2a      	ldr	r2, [pc, #168]	; (8000480 <MX_TIM2_Init+0xf4>)
 80003d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003da:	4b28      	ldr	r3, [pc, #160]	; (800047c <MX_TIM2_Init+0xf0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <MX_TIM2_Init+0xf0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <MX_TIM2_Init+0xf0>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f002 fc47 	bl	8002c7c <HAL_TIM_Base_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003f2:	f000 f8af 	bl	8000554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f6:	2128      	movs	r1, #40	; 0x28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2280      	movs	r2, #128	; 0x80
 80003fc:	0152      	lsls	r2, r2, #5
 80003fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000400:	187a      	adds	r2, r7, r1
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_TIM2_Init+0xf0>)
 8000404:	0011      	movs	r1, r2
 8000406:	0018      	movs	r0, r3
 8000408:	f002 fce6 	bl	8002dd8 <HAL_TIM_ConfigClockSource>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000410:	f000 f8a0 	bl	8000554 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <MX_TIM2_Init+0xf0>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 fc5c 	bl	8002cd4 <HAL_TIM_OC_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000420:	f000 f898 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000424:	2120      	movs	r1, #32
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2230      	movs	r2, #48	; 0x30
 800042a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000432:	187a      	adds	r2, r7, r1
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_TIM2_Init+0xf0>)
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f003 f8a1 	bl	8003580 <HAL_TIMEx_MasterConfigSynchronization>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000442:	f000 f887 	bl	8000554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800045e:	1d39      	adds	r1, r7, #4
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_TIM2_Init+0xf0>)
 8000462:	2200      	movs	r2, #0
 8000464:	0018      	movs	r0, r3
 8000466:	f002 fc69 	bl	8002d3c <HAL_TIM_OC_ConfigChannel>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800046e:	f000 f871 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b00e      	add	sp, #56	; 0x38
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000218 	.word	0x20000218
 8000480:	0000087c 	.word	0x0000087c

08000484 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_DMA_Init+0x38>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_DMA_Init+0x38>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	615a      	str	r2, [r3, #20]
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_DMA_Init+0x38>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	200a      	movs	r0, #10
 80004a8:	f000 facc 	bl	8000a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f000 fade 	bl	8000a6e <HAL_NVIC_EnableIRQ>

}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	240c      	movs	r4, #12
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2314      	movs	r3, #20
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f006 fbe9 	bl	8006ca8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <MX_GPIO_Init+0x8c>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <MX_GPIO_Init+0x8c>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0309      	lsls	r1, r1, #12
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <MX_GPIO_Init+0x8c>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	031b      	lsls	r3, r3, #12
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_GPIO_Init+0x8c>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_GPIO_Init+0x8c>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0289      	lsls	r1, r1, #10
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_GPIO_Init+0x8c>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	029b      	lsls	r3, r3, #10
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800050e:	23c0      	movs	r3, #192	; 0xc0
 8000510:	01db      	lsls	r3, r3, #7
 8000512:	480f      	ldr	r0, [pc, #60]	; (8000550 <MX_GPIO_Init+0x90>)
 8000514:	2200      	movs	r2, #0
 8000516:	0019      	movs	r1, r3
 8000518:	f000 fda8 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	22c0      	movs	r2, #192	; 0xc0
 8000520:	01d2      	lsls	r2, r2, #7
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	193b      	adds	r3, r7, r4
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <MX_GPIO_Init+0x90>)
 800053a:	0019      	movs	r1, r3
 800053c:	0010      	movs	r0, r2
 800053e:	f000 fc1d 	bl	8000d7c <HAL_GPIO_Init>

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b009      	add	sp, #36	; 0x24
 8000548:	bd90      	pop	{r4, r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000
 8000550:	48000800 	.word	0x48000800

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <HAL_MspInit+0x44>)
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_MspInit+0x44>)
 800056c:	2101      	movs	r1, #1
 800056e:	430a      	orrs	r2, r1
 8000570:	619a      	str	r2, [r3, #24]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	2201      	movs	r2, #1
 8000578:	4013      	ands	r3, r2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_MspInit+0x44>)
 8000580:	69da      	ldr	r2, [r3, #28]
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_MspInit+0x44>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0549      	lsls	r1, r1, #21
 8000588:	430a      	orrs	r2, r1
 800058a:	61da      	str	r2, [r3, #28]
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_MspInit+0x44>)
 800058e:	69da      	ldr	r2, [r3, #28]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	055b      	lsls	r3, r3, #21
 8000594:	4013      	ands	r3, r2
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	0018      	movs	r0, r3
 80005b6:	2314      	movs	r3, #20
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f006 fb74 	bl	8006ca8 <memset>
  if(hdac->Instance==DAC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2d      	ldr	r2, [pc, #180]	; (800067c <HAL_DAC_MspInit+0xd4>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d154      	bne.n	8000674 <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <HAL_DAC_MspInit+0xd8>)
 80005cc:	69da      	ldr	r2, [r3, #28]
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <HAL_DAC_MspInit+0xd8>)
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0589      	lsls	r1, r1, #22
 80005d4:	430a      	orrs	r2, r1
 80005d6:	61da      	str	r2, [r3, #28]
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <HAL_DAC_MspInit+0xd8>)
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	059b      	lsls	r3, r3, #22
 80005e0:	4013      	ands	r3, r2
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <HAL_DAC_MspInit+0xd8>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <HAL_DAC_MspInit+0xd8>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0289      	lsls	r1, r1, #10
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <HAL_DAC_MspInit+0xd8>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	029b      	lsls	r3, r3, #10
 80005fc:	4013      	ands	r3, r2
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000602:	2114      	movs	r1, #20
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2210      	movs	r2, #16
 8000608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2203      	movs	r2, #3
 800060e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	187a      	adds	r2, r7, r1
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fbac 	bl	8000d7c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <HAL_DAC_MspInit+0xe0>)
 8000628:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 800062c:	2210      	movs	r2, #16
 800062e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	00d2      	lsls	r2, r2, #3
 800064a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fa88 	bl	8000b70 <HAL_DMA_Init>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000664:	f7ff ff76 	bl	8000554 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_DAC_MspInit+0xdc>)
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b00a      	add	sp, #40	; 0x28
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40007400 	.word	0x40007400
 8000680:	40021000 	.word	0x40021000
 8000684:	200001c0 	.word	0x200001c0
 8000688:	40020030 	.word	0x40020030

0800068c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	429a      	cmp	r2, r3
 800069e:	d10b      	bne.n	80006b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_TIM_Base_MspInit+0x34>)
 80006a2:	69da      	ldr	r2, [r3, #28]
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_TIM_Base_MspInit+0x34>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	430a      	orrs	r2, r1
 80006aa:	61da      	str	r2, [r3, #28]
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_TIM_Base_MspInit+0x34>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4013      	ands	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b004      	add	sp, #16
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f8c0 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <DMA1_Channel2_3_IRQHandler+0x14>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 fa7e 	bl	8000c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	200001c0 	.word	0x200001c0

08000710 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <USB_IRQHandler+0x14>)
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fdd0 	bl	80012bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000860 	.word	0x20000860

08000728 <_sbrk>:
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <_sbrk+0x50>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <_sbrk+0x16>
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <_sbrk+0x50>)
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <_sbrk+0x54>)
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <_sbrk+0x50>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <_sbrk+0x50>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	18d3      	adds	r3, r2, r3
 800074c:	466a      	mov	r2, sp
 800074e:	4293      	cmp	r3, r2
 8000750:	d907      	bls.n	8000762 <_sbrk+0x3a>
 8000752:	f006 fa75 	bl	8006c40 <__errno>
 8000756:	0003      	movs	r3, r0
 8000758:	220c      	movs	r2, #12
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	e006      	b.n	8000770 <_sbrk+0x48>
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <_sbrk+0x50>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	18d2      	adds	r2, r2, r3
 800076a:	4b03      	ldr	r3, [pc, #12]	; (8000778 <_sbrk+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200001ac 	.word	0x200001ac
 800077c:	20000ad8 	.word	0x20000ad8

08000780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <Reset_Handler>:
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x2>)
 800078e:	4685      	mov	sp, r0
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <LoopForever+0x6>)
 8000792:	490e      	ldr	r1, [pc, #56]	; (80007cc <LoopForever+0xa>)
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <LoopForever+0xe>)
 8000796:	2300      	movs	r3, #0
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:
 800079a:	58d4      	ldr	r4, [r2, r3]
 800079c:	50c4      	str	r4, [r0, r3]
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:
 80007a0:	18c4      	adds	r4, r0, r3
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <LoopForever+0x12>)
 80007a8:	4c0b      	ldr	r4, [pc, #44]	; (80007d8 <LoopForever+0x16>)
 80007aa:	2300      	movs	r3, #0
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:
 80007b2:	42a2      	cmp	r2, r4
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>
 80007b6:	f7ff ffe3 	bl	8000780 <SystemInit>
 80007ba:	f006 fa47 	bl	8006c4c <__libc_init_array>
 80007be:	f7ff fd2f 	bl	8000220 <main>

080007c2 <LoopForever>:
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
 80007c4:	20004000 	.word	0x20004000
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000190 	.word	0x20000190
 80007d0:	08006e94 	.word	0x08006e94
 80007d4:	20000190 	.word	0x20000190
 80007d8:	20000ad8 	.word	0x20000ad8

080007dc <ADC1_COMP_IRQHandler>:
 80007dc:	e7fe      	b.n	80007dc <ADC1_COMP_IRQHandler>
	...

080007e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_Init+0x24>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_Init+0x24>)
 80007ea:	2110      	movs	r1, #16
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 f809 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f6:	f7ff feb3 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_InitTick+0x5c>)
 8000812:	681c      	ldr	r4, [r3, #0]
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_InitTick+0x60>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	0019      	movs	r1, r3
 800081a:	23fa      	movs	r3, #250	; 0xfa
 800081c:	0098      	lsls	r0, r3, #2
 800081e:	f7ff fc73 	bl	8000108 <__udivsi3>
 8000822:	0003      	movs	r3, r0
 8000824:	0019      	movs	r1, r3
 8000826:	0020      	movs	r0, r4
 8000828:	f7ff fc6e 	bl	8000108 <__udivsi3>
 800082c:	0003      	movs	r3, r0
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f92d 	bl	8000a8e <HAL_SYSTICK_Config>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e00f      	b.n	800085c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d80b      	bhi.n	800085a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	2200      	movs	r2, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f000 f8fa 	bl	8000a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_InitTick+0x64>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b003      	add	sp, #12
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	18d2      	adds	r2, r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000008 	.word	0x20000008
 8000890:	20000320 	.word	0x20000320

08000894 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000320 	.word	0x20000320

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fff0 	bl	8000894 <HAL_GetTick>
 80008b4:	0003      	movs	r3, r0
 80008b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_Delay+0x40>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	001a      	movs	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	189b      	adds	r3, r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	f7ff ffe0 	bl	8000894 <HAL_GetTick>
 80008d4:	0002      	movs	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b7f      	cmp	r3, #127	; 0x7f
 80008fe:	d809      	bhi.n	8000914 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	231f      	movs	r3, #31
 8000908:	401a      	ands	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <__NVIC_EnableIRQ+0x30>)
 800090c:	2101      	movs	r1, #1
 800090e:	4091      	lsls	r1, r2
 8000910:	000a      	movs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
  }
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	d828      	bhi.n	8000988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b25b      	sxtb	r3, r3
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	33c0      	adds	r3, #192	; 0xc0
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	589b      	ldr	r3, [r3, r2]
 8000946:	1dfa      	adds	r2, r7, #7
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	0011      	movs	r1, r2
 800094c:	2203      	movs	r2, #3
 800094e:	400a      	ands	r2, r1
 8000950:	00d2      	lsls	r2, r2, #3
 8000952:	21ff      	movs	r1, #255	; 0xff
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	43d2      	mvns	r2, r2
 800095a:	401a      	ands	r2, r3
 800095c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	401a      	ands	r2, r3
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	2303      	movs	r3, #3
 800096e:	4003      	ands	r3, r0
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <__NVIC_SetPriority+0xd4>)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	430a      	orrs	r2, r1
 8000980:	33c0      	adds	r3, #192	; 0xc0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000986:	e031      	b.n	80009ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0019      	movs	r1, r3
 8000990:	230f      	movs	r3, #15
 8000992:	400b      	ands	r3, r1
 8000994:	3b08      	subs	r3, #8
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3306      	adds	r3, #6
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	3304      	adds	r3, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	001c      	movs	r4, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	4023      	ands	r3, r4
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	430a      	orrs	r2, r1
 80009e2:	3306      	adds	r3, #6
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	18c3      	adds	r3, r0, r3
 80009e8:	3304      	adds	r3, #4
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <SysTick_Config+0x40>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d901      	bls.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e010      	b.n	8000a34 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SysTick_Config+0x44>)
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	3a01      	subs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	2103      	movs	r1, #3
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff ff7d 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SysTick_Config+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x44>)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	00ffffff 	.word	0x00ffffff
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	210f      	movs	r1, #15
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	0002      	movs	r2, r0
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff33 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ffaf 	bl	80009fc <SysTick_Config>
 8000a9e:	0003      	movs	r3, r0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e015      	b.n	8000ae6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	791b      	ldrb	r3, [r3, #4]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d106      	bne.n	8000ad2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fd6b 	bl	80005a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d101      	bne.n	8000b10 <HAL_DAC_ConfigChannel+0x20>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e029      	b.n	8000b64 <HAL_DAC_ConfigChannel+0x74>
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2201      	movs	r2, #1
 8000b14:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <HAL_DAC_ConfigChannel+0x7c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	4013      	ands	r3, r2
 8000b32:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	00000ffe 	.word	0x00000ffe

08000b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e036      	b.n	8000bf4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2221      	movs	r2, #33	; 0x21
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <HAL_DMA_Init+0x8c>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f8b4 	bl	8000d44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2221      	movs	r2, #33	; 0x21
 8000be6:	2101      	movs	r1, #1
 8000be8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2220      	movs	r2, #32
 8000bee:	2100      	movs	r1, #0
 8000bf0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}  
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b004      	add	sp, #16
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	ffffc00f 	.word	0xffffc00f

08000c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	d024      	beq.n	8000c72 <HAL_DMA_IRQHandler+0x72>
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d020      	beq.n	8000c72 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2220      	movs	r2, #32
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d107      	bne.n	8000c4c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2104      	movs	r1, #4
 8000c48:	438a      	bics	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c54:	2104      	movs	r1, #4
 8000c56:	4091      	lsls	r1, r2
 8000c58:	000a      	movs	r2, r1
 8000c5a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d100      	bne.n	8000c66 <HAL_DMA_IRQHandler+0x66>
 8000c64:	e06a      	b.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c70:	e064      	b.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	2202      	movs	r2, #2
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d02b      	beq.n	8000cda <HAL_DMA_IRQHandler+0xda>
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2202      	movs	r2, #2
 8000c86:	4013      	ands	r3, r2
 8000c88:	d027      	beq.n	8000cda <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2220      	movs	r2, #32
 8000c92:	4013      	ands	r3, r2
 8000c94:	d10b      	bne.n	8000cae <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	438a      	bics	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2221      	movs	r2, #33	; 0x21
 8000caa:	2101      	movs	r1, #1
 8000cac:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d036      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	0010      	movs	r0, r2
 8000cd6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cd8:	e030      	b.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	2208      	movs	r2, #8
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	0013      	movs	r3, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d028      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2208      	movs	r2, #8
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d024      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	210e      	movs	r1, #14
 8000cfe:	438a      	bics	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2221      	movs	r2, #33	; 0x21
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2220      	movs	r2, #32
 8000d24:	2100      	movs	r1, #0
 8000d26:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	0010      	movs	r0, r2
 8000d38:	4798      	blx	r3
    }
   }
}  
 8000d3a:	e7ff      	b.n	8000d3c <HAL_DMA_IRQHandler+0x13c>
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <DMA_CalcBaseAndBitshift+0x30>)
 8000d52:	4694      	mov	ip, r2
 8000d54:	4463      	add	r3, ip
 8000d56:	2114      	movs	r1, #20
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff f9d5 	bl	8000108 <__udivsi3>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	009a      	lsls	r2, r3, #2
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <DMA_CalcBaseAndBitshift+0x34>)
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	bffdfff8 	.word	0xbffdfff8
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e155      	b.n	8001038 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x28>
 8000da2:	e146      	b.n	8001032 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x38>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b12      	cmp	r3, #18
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	58d3      	ldr	r3, [r2, r3]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2107      	movs	r1, #7
 8000de0:	400b      	ands	r3, r1
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	6939      	ldr	r1, [r7, #16]
 8000dfa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d00b      	beq.n	8000e50 <HAL_GPIO_Init+0xd4>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d007      	beq.n	8000e50 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e44:	2b11      	cmp	r3, #17
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b12      	cmp	r3, #18
 8000e4e:	d130      	bne.n	8000eb2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e86:	2201      	movs	r2, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	055b      	lsls	r3, r3, #21
 8000eea:	4013      	ands	r3, r2
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x174>
 8000eee:	e0a0      	b.n	8001032 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	4b54      	ldr	r3, [pc, #336]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	589b      	ldr	r3, [r3, r2]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a47      	ldr	r2, [pc, #284]	; (8001058 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x1ea>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a46      	ldr	r2, [pc, #280]	; (800105c <HAL_GPIO_Init+0x2e0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x1e6>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a45      	ldr	r2, [pc, #276]	; (8001060 <HAL_GPIO_Init+0x2e4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x1e2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a44      	ldr	r2, [pc, #272]	; (8001064 <HAL_GPIO_Init+0x2e8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x1de>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	2103      	movs	r1, #3
 8000f70:	400a      	ands	r2, r1
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	035b      	lsls	r3, r3, #13
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	4013      	ands	r3, r2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	40da      	lsrs	r2, r3
 8001040:	1e13      	subs	r3, r2, #0
 8001042:	d000      	beq.n	8001046 <HAL_GPIO_Init+0x2ca>
 8001044:	e6a2      	b.n	8000d8c <HAL_GPIO_Init+0x10>
  } 
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b006      	add	sp, #24
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	48000c00 	.word	0x48000c00
 8001064:	48001000 	.word	0x48001000
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	0008      	movs	r0, r1
 8001076:	0011      	movs	r1, r2
 8001078:	1cbb      	adds	r3, r7, #2
 800107a:	1c02      	adds	r2, r0, #0
 800107c:	801a      	strh	r2, [r3, #0]
 800107e:	1c7b      	adds	r3, r7, #1
 8001080:	1c0a      	adds	r2, r1, #0
 8001082:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	1c7b      	adds	r3, r7, #1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108c:	1cbb      	adds	r3, r7, #2
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e003      	b.n	800109e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	1cbb      	adds	r3, r7, #2
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af06      	add	r7, sp, #24
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e0d4      	b.n	8001264 <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a6b      	ldr	r2, [pc, #428]	; (800126c <HAL_PCD_Init+0x1c4>)
 80010be:	5c9b      	ldrb	r3, [r3, r2]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	238a      	movs	r3, #138	; 0x8a
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	2100      	movs	r1, #0
 80010ce:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	0018      	movs	r0, r3
 80010d4:	f005 fa8e 	bl	80065f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a64      	ldr	r2, [pc, #400]	; (800126c <HAL_PCD_Init+0x1c4>)
 80010dc:	2103      	movs	r1, #3
 80010de:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 fac3 	bl	8003670 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	e043      	b.n	800117c <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010f4:	200f      	movs	r0, #15
 80010f6:	183b      	adds	r3, r7, r0
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	2129      	movs	r1, #41	; 0x29
 80010fe:	015b      	lsls	r3, r3, #5
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	185b      	adds	r3, r3, r1
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001108:	183b      	adds	r3, r7, r0
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	2128      	movs	r1, #40	; 0x28
 8001110:	015b      	lsls	r3, r3, #5
 8001112:	18d3      	adds	r3, r2, r3
 8001114:	185b      	adds	r3, r3, r1
 8001116:	183a      	adds	r2, r7, r0
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800111c:	183b      	adds	r3, r7, r0
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	183a      	adds	r2, r7, r0
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	b291      	uxth	r1, r2
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	015b      	lsls	r3, r3, #5
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	3336      	adds	r3, #54	; 0x36
 800112e:	1c0a      	adds	r2, r1, #0
 8001130:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001132:	183b      	adds	r3, r7, r0
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	212b      	movs	r1, #43	; 0x2b
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	18d3      	adds	r3, r2, r3
 800113e:	185b      	adds	r3, r3, r1
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001144:	183b      	adds	r3, r7, r0
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	015b      	lsls	r3, r3, #5
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	3338      	adds	r3, #56	; 0x38
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001154:	183b      	adds	r3, r7, r0
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	015b      	lsls	r3, r3, #5
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	333c      	adds	r3, #60	; 0x3c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001164:	183b      	adds	r3, r7, r0
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3202      	adds	r2, #2
 800116c:	0152      	lsls	r2, r2, #5
 800116e:	2100      	movs	r1, #0
 8001170:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001172:	183b      	adds	r3, r7, r0
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	183b      	adds	r3, r7, r0
 8001178:	3201      	adds	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d3b4      	bcc.n	80010f4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118a:	230f      	movs	r3, #15
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e03f      	b.n	8001214 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001194:	200f      	movs	r0, #15
 8001196:	183b      	adds	r3, r7, r0
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	232a      	movs	r3, #42	; 0x2a
 800119e:	33ff      	adds	r3, #255	; 0xff
 80011a0:	0152      	lsls	r2, r2, #5
 80011a2:	188a      	adds	r2, r1, r2
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011aa:	183b      	adds	r3, r7, r0
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2394      	movs	r3, #148	; 0x94
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	0152      	lsls	r2, r2, #5
 80011b6:	188a      	adds	r2, r1, r2
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	183a      	adds	r2, r7, r0
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c0:	183b      	adds	r3, r7, r0
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	232c      	movs	r3, #44	; 0x2c
 80011c8:	33ff      	adds	r3, #255	; 0xff
 80011ca:	0152      	lsls	r2, r2, #5
 80011cc:	188a      	adds	r2, r1, r2
 80011ce:	18d3      	adds	r3, r2, r3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	239c      	movs	r3, #156	; 0x9c
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	0152      	lsls	r2, r2, #5
 80011e0:	188a      	adds	r2, r1, r2
 80011e2:	18d3      	adds	r3, r2, r3
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011e8:	183b      	adds	r3, r7, r0
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	239e      	movs	r3, #158	; 0x9e
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	0152      	lsls	r2, r2, #5
 80011f4:	188a      	adds	r2, r1, r2
 80011f6:	18d3      	adds	r3, r2, r3
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	320a      	adds	r2, #10
 8001204:	0152      	lsls	r2, r2, #5
 8001206:	2100      	movs	r1, #0
 8001208:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120a:	183b      	adds	r3, r7, r0
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	183b      	adds	r3, r7, r0
 8001210:	3201      	adds	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	230f      	movs	r3, #15
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3b8      	bcc.n	8001194 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	466a      	mov	r2, sp
 800122a:	0011      	movs	r1, r2
 800122c:	001a      	movs	r2, r3
 800122e:	3210      	adds	r2, #16
 8001230:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001232:	c170      	stmia	r1!, {r4, r5, r6}
 8001234:	ca30      	ldmia	r2!, {r4, r5}
 8001236:	c130      	stmia	r1!, {r4, r5}
 8001238:	6859      	ldr	r1, [r3, #4]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f002 fa37 	bl	80036b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2224      	movs	r2, #36	; 0x24
 8001246:	2100      	movs	r1, #0
 8001248:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_PCD_Init+0x1c4>)
 800124e:	2101      	movs	r1, #1
 8001250:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d103      	bne.n	8001262 <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fef9 	bl	8002054 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b005      	add	sp, #20
 800126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126c:	00000229 	.word	0x00000229

08001270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	238a      	movs	r3, #138	; 0x8a
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_PCD_Start+0x18>
 8001284:	2302      	movs	r3, #2
 8001286:	e014      	b.n	80012b2 <HAL_PCD_Start+0x42>
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	238a      	movs	r3, #138	; 0x8a
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	2101      	movs	r1, #1
 8001290:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0018      	movs	r0, r3
 8001298:	f003 fa62 	bl	8004760 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f002 f9cb 	bl	800363c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	238a      	movs	r3, #138	; 0x8a
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	2100      	movs	r1, #0
 80012ae:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f003 fa5f 	bl	800478c <USB_ReadInterrupts>
 80012ce:	0002      	movs	r2, r0
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	401a      	ands	r2, r3
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	429a      	cmp	r2, r3
 80012dc:	d103      	bne.n	80012e6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 fb9b 	bl	8001a1c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f003 fa4e 	bl	800478c <USB_ReadInterrupts>
 80012f0:	0002      	movs	r2, r0
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	401a      	ands	r2, r3
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d114      	bne.n	800132a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2244      	movs	r2, #68	; 0x44
 8001306:	5a9b      	ldrh	r3, [r3, r2]
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	49a8      	ldr	r1, [pc, #672]	; (80015b0 <HAL_PCD_IRQHandler+0x2f4>)
 8001310:	400a      	ands	r2, r1
 8001312:	b291      	uxth	r1, r2
 8001314:	2244      	movs	r2, #68	; 0x44
 8001316:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f005 f9ee 	bl	80066fc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2100      	movs	r1, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f000 f951 	bl	80015cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f003 fa2c 	bl	800478c <USB_ReadInterrupts>
 8001334:	0002      	movs	r2, r0
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	01db      	lsls	r3, r3, #7
 800133a:	401a      	ands	r2, r3
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	01db      	lsls	r3, r3, #7
 8001340:	429a      	cmp	r2, r3
 8001342:	d10b      	bne.n	800135c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2244      	movs	r2, #68	; 0x44
 800134a:	5a9b      	ldrh	r3, [r3, r2]
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4998      	ldr	r1, [pc, #608]	; (80015b4 <HAL_PCD_IRQHandler+0x2f8>)
 8001354:	400a      	ands	r2, r1
 8001356:	b291      	uxth	r1, r2
 8001358:	2244      	movs	r2, #68	; 0x44
 800135a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0018      	movs	r0, r3
 8001362:	f003 fa13 	bl	800478c <USB_ReadInterrupts>
 8001366:	0002      	movs	r2, r0
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	019b      	lsls	r3, r3, #6
 800136c:	401a      	ands	r2, r3
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	429a      	cmp	r2, r3
 8001374:	d10b      	bne.n	800138e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2244      	movs	r2, #68	; 0x44
 800137c:	5a9b      	ldrh	r3, [r3, r2]
 800137e:	b29a      	uxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	498c      	ldr	r1, [pc, #560]	; (80015b8 <HAL_PCD_IRQHandler+0x2fc>)
 8001386:	400a      	ands	r2, r1
 8001388:	b291      	uxth	r1, r2
 800138a:	2244      	movs	r2, #68	; 0x44
 800138c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f003 f9fa 	bl	800478c <USB_ReadInterrupts>
 8001398:	0002      	movs	r2, r0
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	015b      	lsls	r3, r3, #5
 800139e:	401a      	ands	r2, r3
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d137      	bne.n	8001418 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2240      	movs	r2, #64	; 0x40
 80013ae:	5a9b      	ldrh	r3, [r3, r2]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2104      	movs	r1, #4
 80013b8:	438a      	bics	r2, r1
 80013ba:	b291      	uxth	r1, r2
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2240      	movs	r2, #64	; 0x40
 80013c6:	5a9b      	ldrh	r3, [r3, r2]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2108      	movs	r1, #8
 80013d0:	438a      	bics	r2, r1
 80013d2:	b291      	uxth	r1, r2
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	2398      	movs	r3, #152	; 0x98
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d109      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	2398      	movs	r3, #152	; 0x98
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	2100      	movs	r1, #0
 80013ec:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2100      	movs	r1, #0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fe58 	bl	80020a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f005 f9be 	bl	800677c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2244      	movs	r2, #68	; 0x44
 8001406:	5a9b      	ldrh	r3, [r3, r2]
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	496b      	ldr	r1, [pc, #428]	; (80015bc <HAL_PCD_IRQHandler+0x300>)
 8001410:	400a      	ands	r2, r1
 8001412:	b291      	uxth	r1, r2
 8001414:	2244      	movs	r2, #68	; 0x44
 8001416:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f003 f9b5 	bl	800478c <USB_ReadInterrupts>
 8001422:	0002      	movs	r2, r0
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	401a      	ands	r2, r3
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	429a      	cmp	r2, r3
 8001430:	d134      	bne.n	800149c <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	5a9b      	ldrh	r3, [r3, r2]
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2108      	movs	r1, #8
 8001442:	430a      	orrs	r2, r1
 8001444:	b291      	uxth	r1, r2
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2244      	movs	r2, #68	; 0x44
 8001450:	5a9b      	ldrh	r3, [r3, r2]
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4959      	ldr	r1, [pc, #356]	; (80015c0 <HAL_PCD_IRQHandler+0x304>)
 800145a:	400a      	ands	r2, r1
 800145c:	b291      	uxth	r1, r2
 800145e:	2244      	movs	r2, #68	; 0x44
 8001460:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	5a9b      	ldrh	r3, [r3, r2]
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2104      	movs	r1, #4
 8001472:	430a      	orrs	r2, r1
 8001474:	b291      	uxth	r1, r2
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	f003 f984 	bl	800478c <USB_ReadInterrupts>
 8001484:	0002      	movs	r2, r0
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	401a      	ands	r2, r3
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	429a      	cmp	r2, r3
 8001492:	d003      	beq.n	800149c <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	0018      	movs	r0, r3
 8001498:	f005 f954 	bl	8006744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f003 f973 	bl	800478c <USB_ReadInterrupts>
 80014a6:	0002      	movs	r2, r0
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	d145      	bne.n	800153c <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2244      	movs	r2, #68	; 0x44
 80014b6:	5a9b      	ldrh	r3, [r3, r2]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	438a      	bics	r2, r1
 80014c2:	b291      	uxth	r1, r2
 80014c4:	2244      	movs	r2, #68	; 0x44
 80014c6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	2398      	movs	r3, #152	; 0x98
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d12f      	bne.n	8001534 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	5a9b      	ldrh	r3, [r3, r2]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2104      	movs	r1, #4
 80014e4:	430a      	orrs	r2, r1
 80014e6:	b291      	uxth	r1, r2
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	5a9b      	ldrh	r3, [r3, r2]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2108      	movs	r1, #8
 80014fc:	430a      	orrs	r2, r1
 80014fe:	b291      	uxth	r1, r2
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	2398      	movs	r3, #152	; 0x98
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	2101      	movs	r1, #1
 800150c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2254      	movs	r2, #84	; 0x54
 8001514:	5a9b      	ldrh	r3, [r3, r2]
 8001516:	b29b      	uxth	r3, r3
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	223c      	movs	r2, #60	; 0x3c
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	2399      	movs	r3, #153	; 0x99
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2101      	movs	r1, #1
 800152c:	0018      	movs	r0, r3
 800152e:	f000 fdbb 	bl	80020a8 <HAL_PCDEx_LPM_Callback>
 8001532:	e003      	b.n	800153c <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f005 f904 	bl	8006744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f003 f923 	bl	800478c <USB_ReadInterrupts>
 8001546:	0002      	movs	r2, r0
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	401a      	ands	r2, r3
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	429a      	cmp	r2, r3
 8001554:	d10f      	bne.n	8001576 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2244      	movs	r2, #68	; 0x44
 800155c:	5a9b      	ldrh	r3, [r3, r2]
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4917      	ldr	r1, [pc, #92]	; (80015c4 <HAL_PCD_IRQHandler+0x308>)
 8001566:	400a      	ands	r2, r1
 8001568:	b291      	uxth	r1, r2
 800156a:	2244      	movs	r2, #68	; 0x44
 800156c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	0018      	movs	r0, r3
 8001572:	f005 f8b4 	bl	80066de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f003 f906 	bl	800478c <USB_ReadInterrupts>
 8001580:	0002      	movs	r2, r0
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	401a      	ands	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	429a      	cmp	r2, r3
 800158e:	d10b      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2244      	movs	r2, #68	; 0x44
 8001596:	5a9b      	ldrh	r3, [r3, r2]
 8001598:	b29a      	uxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_PCD_IRQHandler+0x30c>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	b291      	uxth	r1, r2
 80015a4:	2244      	movs	r2, #68	; 0x44
 80015a6:	5299      	strh	r1, [r3, r2]
  }
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	fffffbff 	.word	0xfffffbff
 80015b4:	ffffbfff 	.word	0xffffbfff
 80015b8:	ffffdfff 	.word	0xffffdfff
 80015bc:	ffffefff 	.word	0xffffefff
 80015c0:	fffff7ff 	.word	0xfffff7ff
 80015c4:	fffffdff 	.word	0xfffffdff
 80015c8:	fffffeff 	.word	0xfffffeff

080015cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	000a      	movs	r2, r1
 80015d6:	1cfb      	adds	r3, r7, #3
 80015d8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	238a      	movs	r3, #138	; 0x8a
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_PCD_SetAddress+0x1e>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e017      	b.n	800161a <HAL_PCD_SetAddress+0x4e>
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	238a      	movs	r3, #138	; 0x8a
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	2101      	movs	r1, #1
 80015f2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	1cfa      	adds	r2, r7, #3
 80015f8:	2124      	movs	r1, #36	; 0x24
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	1cfb      	adds	r3, r7, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0019      	movs	r1, r3
 8001608:	0010      	movs	r0, r2
 800160a:	f003 f895 	bl	8004738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	238a      	movs	r3, #138	; 0x8a
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	2100      	movs	r1, #0
 8001616:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001622:	b590      	push	{r4, r7, lr}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	000c      	movs	r4, r1
 800162c:	0010      	movs	r0, r2
 800162e:	0019      	movs	r1, r3
 8001630:	1cfb      	adds	r3, r7, #3
 8001632:	1c22      	adds	r2, r4, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	003b      	movs	r3, r7
 8001638:	1c02      	adds	r2, r0, #0
 800163a:	801a      	strh	r2, [r3, #0]
 800163c:	1cbb      	adds	r3, r7, #2
 800163e:	1c0a      	adds	r2, r1, #0
 8001640:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001642:	230b      	movs	r3, #11
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800164a:	1cfb      	adds	r3, r7, #3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	da0c      	bge.n	800166e <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001654:	1cfb      	adds	r3, r7, #3
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2207      	movs	r2, #7
 800165a:	4013      	ands	r3, r2
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	3328      	adds	r3, #40	; 0x28
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	705a      	strb	r2, [r3, #1]
 800166c:	e00c      	b.n	8001688 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166e:	1cfb      	adds	r3, r7, #3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2207      	movs	r2, #7
 8001674:	4013      	ands	r3, r2
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	3329      	adds	r3, #41	; 0x29
 800167a:	33ff      	adds	r3, #255	; 0xff
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	18d3      	adds	r3, r2, r3
 8001680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2207      	movs	r2, #7
 800168e:	4013      	ands	r3, r2
 8001690:	b2da      	uxtb	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001696:	003b      	movs	r3, r7
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1cba      	adds	r2, r7, #2
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d102      	bne.n	80016c6 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	238a      	movs	r3, #138	; 0x8a
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_PCD_EP_Open+0xb4>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e013      	b.n	80016fe <HAL_PCD_EP_Open+0xdc>
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	238a      	movs	r3, #138	; 0x8a
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	2101      	movs	r1, #1
 80016de:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f002 f811 	bl	8003710 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	238a      	movs	r3, #138	; 0x8a
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	2100      	movs	r1, #0
 80016f6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80016f8:	230b      	movs	r3, #11
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	781b      	ldrb	r3, [r3, #0]
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b005      	add	sp, #20
 8001704:	bd90      	pop	{r4, r7, pc}

08001706 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	000a      	movs	r2, r1
 8001710:	1cfb      	adds	r3, r7, #3
 8001712:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001714:	1cfb      	adds	r3, r7, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	da0c      	bge.n	8001738 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800171e:	1cfb      	adds	r3, r7, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2207      	movs	r2, #7
 8001724:	4013      	ands	r3, r2
 8001726:	015b      	lsls	r3, r3, #5
 8001728:	3328      	adds	r3, #40	; 0x28
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	705a      	strb	r2, [r3, #1]
 8001736:	e00c      	b.n	8001752 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001738:	1cfb      	adds	r3, r7, #3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2207      	movs	r2, #7
 800173e:	4013      	ands	r3, r2
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	3329      	adds	r3, #41	; 0x29
 8001744:	33ff      	adds	r3, #255	; 0xff
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	18d3      	adds	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001752:	1cfb      	adds	r3, r7, #3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2207      	movs	r2, #7
 8001758:	4013      	ands	r3, r2
 800175a:	b2da      	uxtb	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	238a      	movs	r3, #138	; 0x8a
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_PCD_EP_Close+0x6a>
 800176c:	2302      	movs	r3, #2
 800176e:	e011      	b.n	8001794 <HAL_PCD_EP_Close+0x8e>
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	238a      	movs	r3, #138	; 0x8a
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	2101      	movs	r1, #1
 8001778:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f002 fabc 	bl	8003d00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	238a      	movs	r3, #138	; 0x8a
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	2100      	movs	r1, #0
 8001790:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	200b      	movs	r0, #11
 80017aa:	183b      	adds	r3, r7, r0
 80017ac:	1c0a      	adds	r2, r1, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b0:	0001      	movs	r1, r0
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2207      	movs	r2, #7
 80017b8:	4013      	ands	r3, r2
 80017ba:	015b      	lsls	r3, r3, #5
 80017bc:	3329      	adds	r3, #41	; 0x29
 80017be:	33ff      	adds	r3, #255	; 0xff
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	18d3      	adds	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2200      	movs	r2, #0
 80017dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2207      	movs	r2, #7
 80017e4:	4013      	ands	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2207      	movs	r2, #7
 80017f2:	4013      	ands	r3, r2
 80017f4:	d107      	bne.n	8001806 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	0011      	movs	r1, r2
 80017fe:	0018      	movs	r0, r3
 8001800:	f002 fbf4 	bl	8003fec <USB_EPStartXfer>
 8001804:	e006      	b.n	8001814 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	0011      	movs	r1, r2
 800180e:	0018      	movs	r0, r3
 8001810:	f002 fbec 	bl	8003fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b006      	add	sp, #24
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	200b      	movs	r0, #11
 800182c:	183b      	adds	r3, r7, r0
 800182e:	1c0a      	adds	r2, r1, #0
 8001830:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001832:	0001      	movs	r1, r0
 8001834:	187b      	adds	r3, r7, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2207      	movs	r2, #7
 800183a:	4013      	ands	r3, r2
 800183c:	015b      	lsls	r3, r3, #5
 800183e:	3328      	adds	r3, #40	; 0x28
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	18d3      	adds	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2201      	movs	r2, #1
 800185c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2207      	movs	r2, #7
 8001864:	4013      	ands	r3, r2
 8001866:	b2da      	uxtb	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800186c:	187b      	adds	r3, r7, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2207      	movs	r2, #7
 8001872:	4013      	ands	r3, r2
 8001874:	d107      	bne.n	8001886 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f002 fbb4 	bl	8003fec <USB_EPStartXfer>
 8001884:	e006      	b.n	8001894 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f002 fbac 	bl	8003fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b006      	add	sp, #24
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	000a      	movs	r2, r1
 80018a8:	1cfb      	adds	r3, r7, #3
 80018aa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018ac:	1cfb      	adds	r3, r7, #3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2207      	movs	r2, #7
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d901      	bls.n	80018c0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e050      	b.n	8001962 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018c0:	1cfb      	adds	r3, r7, #3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da0c      	bge.n	80018e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ca:	1cfb      	adds	r3, r7, #3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2207      	movs	r2, #7
 80018d0:	4013      	ands	r3, r2
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	3328      	adds	r3, #40	; 0x28
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	705a      	strb	r2, [r3, #1]
 80018e2:	e00a      	b.n	80018fa <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018e4:	1cfb      	adds	r3, r7, #3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	3329      	adds	r3, #41	; 0x29
 80018ec:	33ff      	adds	r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	18d3      	adds	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001900:	1cfb      	adds	r3, r7, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2207      	movs	r2, #7
 8001906:	4013      	ands	r3, r2
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	238a      	movs	r3, #138	; 0x8a
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_PCD_EP_SetStall+0x80>
 800191a:	2302      	movs	r3, #2
 800191c:	e021      	b.n	8001962 <HAL_PCD_EP_SetStall+0xc4>
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	238a      	movs	r3, #138	; 0x8a
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	2101      	movs	r1, #1
 8001926:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f002 fe2d 	bl	8004590 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001936:	1cfb      	adds	r3, r7, #3
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2207      	movs	r2, #7
 800193c:	4013      	ands	r3, r2
 800193e:	d10a      	bne.n	8001956 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	218c      	movs	r1, #140	; 0x8c
 8001948:	0089      	lsls	r1, r1, #2
 800194a:	468c      	mov	ip, r1
 800194c:	4463      	add	r3, ip
 800194e:	0019      	movs	r1, r3
 8001950:	0010      	movs	r0, r2
 8001952:	f002 ff29 	bl	80047a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	238a      	movs	r3, #138	; 0x8a
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	2100      	movs	r1, #0
 800195e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	000a      	movs	r2, r1
 8001974:	1cfb      	adds	r3, r7, #3
 8001976:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001978:	1cfb      	adds	r3, r7, #3
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	220f      	movs	r2, #15
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d901      	bls.n	800198c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e042      	b.n	8001a12 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800198c:	1cfb      	adds	r3, r7, #3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	da0c      	bge.n	80019b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001996:	1cfb      	adds	r3, r7, #3
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2207      	movs	r2, #7
 800199c:	4013      	ands	r3, r2
 800199e:	015b      	lsls	r3, r3, #5
 80019a0:	3328      	adds	r3, #40	; 0x28
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	705a      	strb	r2, [r3, #1]
 80019ae:	e00c      	b.n	80019ca <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b0:	1cfb      	adds	r3, r7, #3
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2207      	movs	r2, #7
 80019b6:	4013      	ands	r3, r2
 80019b8:	015b      	lsls	r3, r3, #5
 80019ba:	3329      	adds	r3, #41	; 0x29
 80019bc:	33ff      	adds	r3, #255	; 0xff
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d0:	1cfb      	adds	r3, r7, #3
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2207      	movs	r2, #7
 80019d6:	4013      	ands	r3, r2
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	238a      	movs	r3, #138	; 0x8a
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_PCD_EP_ClrStall+0x84>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e011      	b.n	8001a12 <HAL_PCD_EP_ClrStall+0xa8>
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	238a      	movs	r3, #138	; 0x8a
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	2101      	movs	r1, #1
 80019f6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f002 fe07 	bl	8004614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	238a      	movs	r3, #138	; 0x8a
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a24:	e2b3      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2016      	movs	r0, #22
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	2144      	movs	r1, #68	; 0x44
 8001a30:	5a52      	ldrh	r2, [r2, r1]
 8001a32:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	2015      	movs	r0, #21
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	210f      	movs	r1, #15
 8001a40:	400a      	ands	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d000      	beq.n	8001a4e <PCD_EP_ISR_Handler+0x32>
 8001a4c:	e141      	b.n	8001cd2 <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a4e:	2316      	movs	r3, #22
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	2210      	movs	r2, #16
 8001a56:	4013      	ands	r3, r2
 8001a58:	d14e      	bne.n	8001af8 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4aca      	ldr	r2, [pc, #808]	; (8001d8c <PCD_EP_ISR_Handler+0x370>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	b29c      	uxth	r4, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4ac8      	ldr	r2, [pc, #800]	; (8001d90 <PCD_EP_ISR_Handler+0x374>)
 8001a6e:	4322      	orrs	r2, r4
 8001a70:	b292      	uxth	r2, r2
 8001a72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3328      	adds	r3, #40	; 0x28
 8001a78:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2250      	movs	r2, #80	; 0x50
 8001a80:	5a9b      	ldrh	r3, [r3, r2]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	001a      	movs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	18d2      	adds	r2, r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	4abf      	ldr	r2, [pc, #764]	; (8001d94 <PCD_EP_ISR_Handler+0x378>)
 8001a96:	4694      	mov	ip, r2
 8001a98:	4463      	add	r3, ip
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	059b      	lsls	r3, r3, #22
 8001a9e:	0d9a      	lsrs	r2, r3, #22
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	18d2      	adds	r2, r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f004 fdf6 	bl	80066a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d100      	bne.n	8001aca <PCD_EP_ISR_Handler+0xae>
 8001ac8:	e261      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d000      	beq.n	8001ad4 <PCD_EP_ISR_Handler+0xb8>
 8001ad2:	e25c      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2224      	movs	r2, #36	; 0x24
 8001ad8:	5c9b      	ldrb	r3, [r3, r2]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	4252      	negs	r2, r2
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b291      	uxth	r1, r2
 8001aea:	224c      	movs	r2, #76	; 0x4c
 8001aec:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2224      	movs	r2, #36	; 0x24
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]
 8001af6:	e24a      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3329      	adds	r3, #41	; 0x29
 8001afc:	33ff      	adds	r3, #255	; 0xff
 8001afe:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2112      	movs	r1, #18
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4013      	ands	r3, r2
 8001b16:	d033      	beq.n	8001b80 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2250      	movs	r2, #80	; 0x50
 8001b1e:	5a9b      	ldrh	r3, [r3, r2]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	001a      	movs	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	18d2      	adds	r2, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	4a99      	ldr	r2, [pc, #612]	; (8001d98 <PCD_EP_ISR_Handler+0x37c>)
 8001b34:	4694      	mov	ip, r2
 8001b36:	4463      	add	r3, ip
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	059b      	lsls	r3, r3, #22
 8001b3c:	0d9a      	lsrs	r2, r3, #22
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	228c      	movs	r2, #140	; 0x8c
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	1899      	adds	r1, r3, r2
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f002 fe73 	bl	8004842 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4a8d      	ldr	r2, [pc, #564]	; (8001d9c <PCD_EP_ISR_Handler+0x380>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	b29c      	uxth	r4, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	4322      	orrs	r2, r4
 8001b72:	b292      	uxth	r2, r2
 8001b74:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f004 fd63 	bl	8006644 <HAL_PCD_SetupStageCallback>
 8001b7e:	e206      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b80:	2312      	movs	r3, #18
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	5e9b      	ldrsh	r3, [r3, r2]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db00      	blt.n	8001b8e <PCD_EP_ISR_Handler+0x172>
 8001b8c:	e1ff      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4a81      	ldr	r2, [pc, #516]	; (8001d9c <PCD_EP_ISR_Handler+0x380>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b29c      	uxth	r4, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	4322      	orrs	r2, r4
 8001ba4:	b292      	uxth	r2, r2
 8001ba6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2250      	movs	r2, #80	; 0x50
 8001bae:	5a9b      	ldrh	r3, [r3, r2]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	18d2      	adds	r2, r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	4a75      	ldr	r2, [pc, #468]	; (8001d98 <PCD_EP_ISR_Handler+0x37c>)
 8001bc4:	4694      	mov	ip, r2
 8001bc6:	4463      	add	r3, ip
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	059b      	lsls	r3, r3, #22
 8001bcc:	0d9a      	lsrs	r2, r3, #22
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <PCD_EP_ISR_Handler+0x1f4>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d016      	beq.n	8001c10 <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6959      	ldr	r1, [r3, #20]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f002 fe25 	bl	8004842 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	18d2      	adds	r2, r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2100      	movs	r1, #0
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f004 fd2f 	bl	800666e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	001c      	movs	r4, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2250      	movs	r2, #80	; 0x50
 8001c1c:	5a9b      	ldrh	r3, [r3, r2]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	18e4      	adds	r4, r4, r3
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <PCD_EP_ISR_Handler+0x37c>)
 8001c24:	18e3      	adds	r3, r4, r3
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <PCD_EP_ISR_Handler+0x232>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <PCD_EP_ISR_Handler+0x384>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <PCD_EP_ISR_Handler+0x374>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	801a      	strh	r2, [r3, #0]
 8001c4c:	e02b      	b.n	8001ca6 <PCD_EP_ISR_Handler+0x28a>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b3e      	cmp	r3, #62	; 0x3e
 8001c54:	d812      	bhi.n	8001c7c <PCD_EP_ISR_Handler+0x260>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d002      	beq.n	8001c6e <PCD_EP_ISR_Handler+0x252>
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e014      	b.n	8001ca6 <PCD_EP_ISR_Handler+0x28a>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	221f      	movs	r2, #31
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d102      	bne.n	8001c94 <PCD_EP_ISR_Handler+0x278>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	029b      	lsls	r3, r3, #10
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4a3c      	ldr	r2, [pc, #240]	; (8001d90 <PCD_EP_ISR_Handler+0x374>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <PCD_EP_ISR_Handler+0x388>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29c      	uxth	r4, r3
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	015b      	lsls	r3, r3, #5
 8001cb8:	4063      	eors	r3, r4
 8001cba:	b29c      	uxth	r4, r3
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	4063      	eors	r3, r4
 8001cc2:	b29c      	uxth	r4, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a37      	ldr	r2, [pc, #220]	; (8001da8 <PCD_EP_ISR_Handler+0x38c>)
 8001cca:	4322      	orrs	r2, r4
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e15d      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	2315      	movs	r3, #21
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	18d2      	adds	r2, r2, r3
 8001ce2:	2112      	movs	r1, #18
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	8812      	ldrh	r2, [r2, #0]
 8001ce8:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	5e9b      	ldrsh	r3, [r3, r2]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db00      	blt.n	8001cf6 <PCD_EP_ISR_Handler+0x2da>
 8001cf4:	e0f5      	b.n	8001ee2 <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	2115      	movs	r1, #21
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	18d3      	adds	r3, r2, r3
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <PCD_EP_ISR_Handler+0x380>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	b29c      	uxth	r4, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	001a      	movs	r2, r3
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	18d3      	adds	r3, r2, r3
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	4322      	orrs	r2, r4
 8001d22:	b292      	uxth	r2, r2
 8001d24:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	3329      	adds	r3, #41	; 0x29
 8001d2e:	33ff      	adds	r3, #255	; 0xff
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	18d3      	adds	r3, r2, r3
 8001d34:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	7b1b      	ldrb	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d136      	bne.n	8001dac <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2250      	movs	r2, #80	; 0x50
 8001d44:	5a9b      	ldrh	r3, [r3, r2]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	001a      	movs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	18d2      	adds	r2, r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	18d3      	adds	r3, r2, r3
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <PCD_EP_ISR_Handler+0x37c>)
 8001d5a:	4694      	mov	ip, r2
 8001d5c:	4463      	add	r3, ip
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	211e      	movs	r1, #30
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	0592      	lsls	r2, r2, #22
 8001d66:	0d92      	lsrs	r2, r2, #22
 8001d68:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d100      	bne.n	8001d74 <PCD_EP_ISR_Handler+0x358>
 8001d72:	e08b      	b.n	8001e8c <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6959      	ldr	r1, [r3, #20]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	88da      	ldrh	r2, [r3, #6]
 8001d80:	231e      	movs	r3, #30
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f002 fd5c 	bl	8004842 <USB_ReadPMA>
 8001d8a:	e07f      	b.n	8001e8c <PCD_EP_ISR_Handler+0x470>
 8001d8c:	ffff8f0f 	.word	0xffff8f0f
 8001d90:	ffff8000 	.word	0xffff8000
 8001d94:	00000402 	.word	0x00000402
 8001d98:	00000406 	.word	0x00000406
 8001d9c:	00000f8f 	.word	0x00000f8f
 8001da0:	ffff83ff 	.word	0xffff83ff
 8001da4:	ffffbf8f 	.word	0xffffbf8f
 8001da8:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	001a      	movs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	18d3      	adds	r3, r2, r3
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d025      	beq.n	8001e14 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2250      	movs	r2, #80	; 0x50
 8001dce:	5a9b      	ldrh	r3, [r3, r2]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	18d2      	adds	r2, r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	4a72      	ldr	r2, [pc, #456]	; (8001fac <PCD_EP_ISR_Handler+0x590>)
 8001de4:	4694      	mov	ip, r2
 8001de6:	4463      	add	r3, ip
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	211e      	movs	r1, #30
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	0592      	lsls	r2, r2, #22
 8001df0:	0d92      	lsrs	r2, r2, #22
 8001df2:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d030      	beq.n	8001e5e <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6959      	ldr	r1, [r3, #20]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	891a      	ldrh	r2, [r3, #8]
 8001e08:	231e      	movs	r3, #30
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f002 fd18 	bl	8004842 <USB_ReadPMA>
 8001e12:	e024      	b.n	8001e5e <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2250      	movs	r2, #80	; 0x50
 8001e1a:	5a9b      	ldrh	r3, [r3, r2]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	001a      	movs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	18d2      	adds	r2, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	4a60      	ldr	r2, [pc, #384]	; (8001fb0 <PCD_EP_ISR_Handler+0x594>)
 8001e30:	4694      	mov	ip, r2
 8001e32:	4463      	add	r3, ip
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	211e      	movs	r1, #30
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	0592      	lsls	r2, r2, #22
 8001e3c:	0d92      	lsrs	r2, r2, #22
 8001e3e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6959      	ldr	r1, [r3, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	895a      	ldrh	r2, [r3, #10]
 8001e54:	231e      	movs	r3, #30
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f002 fcf2 	bl	8004842 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	001a      	movs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	18d3      	adds	r3, r2, r3
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4a50      	ldr	r2, [pc, #320]	; (8001fb4 <PCD_EP_ISR_Handler+0x598>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	b29c      	uxth	r4, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	18d3      	adds	r3, r2, r3
 8001e84:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <PCD_EP_ISR_Handler+0x59c>)
 8001e86:	4322      	orrs	r2, r4
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	211e      	movs	r1, #30
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	18d2      	adds	r2, r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	18d2      	adds	r2, r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <PCD_EP_ISR_Handler+0x4a4>
 8001eb2:	231e      	movs	r3, #30
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f004 fbd0 	bl	800666e <HAL_PCD_DataOutStageCallback>
 8001ece:	e008      	b.n	8001ee2 <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7819      	ldrb	r1, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fc5d 	bl	800179c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	4013      	ands	r3, r2
 8001eec:	d04f      	beq.n	8001f8e <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 8001eee:	2115      	movs	r1, #21
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	015b      	lsls	r3, r3, #5
 8001ef6:	3328      	adds	r3, #40	; 0x28
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	001a      	movs	r2, r3
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <PCD_EP_ISR_Handler+0x5a0>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	b29c      	uxth	r4, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	18d3      	adds	r3, r2, r3
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <PCD_EP_ISR_Handler+0x5a4>)
 8001f26:	4322      	orrs	r2, r4
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2250      	movs	r2, #80	; 0x50
 8001f32:	5a9b      	ldrh	r3, [r3, r2]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	001a      	movs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	18d2      	adds	r2, r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	4a19      	ldr	r2, [pc, #100]	; (8001fac <PCD_EP_ISR_Handler+0x590>)
 8001f48:	4694      	mov	ip, r2
 8001f4a:	4463      	add	r3, ip
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	059b      	lsls	r3, r3, #22
 8001f50:	0d9a      	lsrs	r2, r3, #22
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	18d2      	adds	r2, r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f004 fb97 	bl	80066a8 <HAL_PCD_DataInStageCallback>
 8001f7a:	e008      	b.n	8001f8e <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	7819      	ldrb	r1, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fc48 	bl	800181e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2244      	movs	r2, #68	; 0x44
 8001f94:	5a9b      	ldrh	r3, [r3, r2]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da00      	bge.n	8001fa0 <PCD_EP_ISR_Handler+0x584>
 8001f9e:	e542      	b.n	8001a26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b009      	add	sp, #36	; 0x24
 8001fa8:	bd90      	pop	{r4, r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	00000402 	.word	0x00000402
 8001fb0:	00000406 	.word	0x00000406
 8001fb4:	ffff8f8f 	.word	0xffff8f8f
 8001fb8:	ffff80c0 	.word	0xffff80c0
 8001fbc:	ffff8f0f 	.word	0xffff8f0f
 8001fc0:	ffff8000 	.word	0xffff8000

08001fc4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	0008      	movs	r0, r1
 8001fce:	0011      	movs	r1, r2
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	240a      	movs	r4, #10
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	1c02      	adds	r2, r0, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	2308      	movs	r3, #8
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	1c0a      	adds	r2, r1, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	015b      	lsls	r3, r3, #5
 8001ffc:	3328      	adds	r3, #40	; 0x28
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e008      	b.n	8002018 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002006:	230a      	movs	r3, #10
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	015b      	lsls	r3, r3, #5
 800200e:	3329      	adds	r3, #41	; 0x29
 8002010:	33ff      	adds	r3, #255	; 0xff
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	18d3      	adds	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002018:	2308      	movs	r3, #8
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	b29a      	uxth	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	80da      	strh	r2, [r3, #6]
 8002030:	e00b      	b.n	800204a <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2201      	movs	r2, #1
 8002036:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	b29a      	uxth	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	b29a      	uxth	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b007      	add	sp, #28
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	239a      	movs	r3, #154	; 0x9a
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	2101      	movs	r1, #1
 800206a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	2398      	movs	r3, #152	; 0x98
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	2100      	movs	r1, #0
 8002074:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2254      	movs	r2, #84	; 0x54
 800207a:	5a9b      	ldrh	r3, [r3, r2]
 800207c:	b29b      	uxth	r3, r3
 800207e:	2201      	movs	r2, #1
 8002080:	4313      	orrs	r3, r2
 8002082:	b299      	uxth	r1, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2254      	movs	r2, #84	; 0x54
 8002088:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2254      	movs	r2, #84	; 0x54
 800208e:	5a9b      	ldrh	r3, [r3, r2]
 8002090:	b29b      	uxth	r3, r3
 8002092:	2202      	movs	r2, #2
 8002094:	4313      	orrs	r3, r2
 8002096:	b299      	uxth	r1, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2254      	movs	r2, #84	; 0x54
 800209c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	000a      	movs	r2, r1
 80020b2:	1cfb      	adds	r3, r7, #3
 80020b4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f000 fb76 	bl	80027c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d100      	bne.n	80020e0 <HAL_RCC_OscConfig+0x20>
 80020de:	e08e      	b.n	80021fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020e0:	4bc5      	ldr	r3, [pc, #788]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	220c      	movs	r2, #12
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00e      	beq.n	800210a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ec:	4bc2      	ldr	r3, [pc, #776]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	220c      	movs	r2, #12
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d117      	bne.n	8002128 <HAL_RCC_OscConfig+0x68>
 80020f8:	4bbf      	ldr	r3, [pc, #764]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	23c0      	movs	r3, #192	; 0xc0
 80020fe:	025b      	lsls	r3, r3, #9
 8002100:	401a      	ands	r2, r3
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	429a      	cmp	r2, r3
 8002108:	d10e      	bne.n	8002128 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210a:	4bbb      	ldr	r3, [pc, #748]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	4013      	ands	r3, r2
 8002114:	d100      	bne.n	8002118 <HAL_RCC_OscConfig+0x58>
 8002116:	e071      	b.n	80021fc <HAL_RCC_OscConfig+0x13c>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d000      	beq.n	8002122 <HAL_RCC_OscConfig+0x62>
 8002120:	e06c      	b.n	80021fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	f000 fb4c 	bl	80027c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x80>
 8002130:	4bb1      	ldr	r3, [pc, #708]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4bb0      	ldr	r3, [pc, #704]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	0249      	lsls	r1, r1, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e02f      	b.n	80021a0 <HAL_RCC_OscConfig+0xe0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0xa2>
 8002148:	4bab      	ldr	r3, [pc, #684]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4baa      	ldr	r3, [pc, #680]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800214e:	49ab      	ldr	r1, [pc, #684]	; (80023fc <HAL_RCC_OscConfig+0x33c>)
 8002150:	400a      	ands	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4ba8      	ldr	r3, [pc, #672]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4ba7      	ldr	r3, [pc, #668]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800215a:	49a9      	ldr	r1, [pc, #676]	; (8002400 <HAL_RCC_OscConfig+0x340>)
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e01e      	b.n	80021a0 <HAL_RCC_OscConfig+0xe0>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10e      	bne.n	8002188 <HAL_RCC_OscConfig+0xc8>
 800216a:	4ba3      	ldr	r3, [pc, #652]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4ba2      	ldr	r3, [pc, #648]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	02c9      	lsls	r1, r1, #11
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	4b9f      	ldr	r3, [pc, #636]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b9e      	ldr	r3, [pc, #632]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	0249      	lsls	r1, r1, #9
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xe0>
 8002188:	4b9b      	ldr	r3, [pc, #620]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b9a      	ldr	r3, [pc, #616]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800218e:	499b      	ldr	r1, [pc, #620]	; (80023fc <HAL_RCC_OscConfig+0x33c>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b98      	ldr	r3, [pc, #608]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b97      	ldr	r3, [pc, #604]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800219a:	4999      	ldr	r1, [pc, #612]	; (8002400 <HAL_RCC_OscConfig+0x340>)
 800219c:	400a      	ands	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d014      	beq.n	80021d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fb74 	bl	8000894 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b2:	f7fe fb6f 	bl	8000894 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e2fd      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0xf2>
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fb5f 	bl	8000894 <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fb5a 	bl	8000894 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e2e8      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b82      	ldr	r3, [pc, #520]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	029b      	lsls	r3, r3, #10
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x11c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d100      	bne.n	800220a <HAL_RCC_OscConfig+0x14a>
 8002208:	e06c      	b.n	80022e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800220a:	4b7b      	ldr	r3, [pc, #492]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	220c      	movs	r2, #12
 8002210:	4013      	ands	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002214:	4b78      	ldr	r3, [pc, #480]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	220c      	movs	r2, #12
 800221a:	4013      	ands	r3, r2
 800221c:	2b08      	cmp	r3, #8
 800221e:	d11f      	bne.n	8002260 <HAL_RCC_OscConfig+0x1a0>
 8002220:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	025b      	lsls	r3, r3, #9
 8002228:	401a      	ands	r2, r3
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	429a      	cmp	r2, r3
 8002230:	d116      	bne.n	8002260 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	4b71      	ldr	r3, [pc, #452]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d005      	beq.n	8002248 <HAL_RCC_OscConfig+0x188>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e2bb      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b6b      	ldr	r3, [pc, #428]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	22f8      	movs	r2, #248	; 0xf8
 800224e:	4393      	bics	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00da      	lsls	r2, r3, #3
 8002258:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	e041      	b.n	80022e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d024      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002268:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b62      	ldr	r3, [pc, #392]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800226e:	2101      	movs	r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe fb0e 	bl	8000894 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fb09 	bl	8000894 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e297      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d0f1      	beq.n	800227e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	22f8      	movs	r2, #248	; 0xf8
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00da      	lsls	r2, r3, #3
 80022aa:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e018      	b.n	80022e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	438a      	bics	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fae9 	bl	8000894 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe fae4 	bl	8000894 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e272      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d1f1      	bne.n	80022c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2208      	movs	r2, #8
 80022ea:	4013      	ands	r3, r2
 80022ec:	d036      	beq.n	800235c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80022f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe fac7 	bl	8000894 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230c:	f7fe fac2 	bl	8000894 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e250      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d0f1      	beq.n	800230c <HAL_RCC_OscConfig+0x24c>
 8002328:	e018      	b.n	800235c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002330:	2101      	movs	r1, #1
 8002332:	438a      	bics	r2, r1
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe faad 	bl	8000894 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7fe faa8 	bl	8000894 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e236      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	d1f1      	bne.n	8002340 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2204      	movs	r2, #4
 8002362:	4013      	ands	r3, r2
 8002364:	d100      	bne.n	8002368 <HAL_RCC_OscConfig+0x2a8>
 8002366:	e0b5      	b.n	80024d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002368:	231f      	movs	r3, #31
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	055b      	lsls	r3, r3, #21
 8002378:	4013      	ands	r3, r2
 800237a:	d111      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0549      	lsls	r1, r1, #21
 8002386:	430a      	orrs	r2, r1
 8002388:	61da      	str	r2, [r3, #28]
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	055b      	lsls	r3, r3, #21
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002398:	231f      	movs	r3, #31
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_RCC_OscConfig+0x344>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d11a      	bne.n	80023e2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCC_OscConfig+0x344>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_RCC_OscConfig+0x344>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	0049      	lsls	r1, r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fa6b 	bl	8000894 <HAL_GetTick>
 80023be:	0003      	movs	r3, r0
 80023c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7fe fa66 	bl	8000894 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e1f4      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_OscConfig+0x344>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4013      	ands	r3, r2
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_RCC_OscConfig+0x348>
 80023ea:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <HAL_RCC_OscConfig+0x338>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	621a      	str	r2, [r3, #32]
 80023f6:	e035      	b.n	8002464 <HAL_RCC_OscConfig+0x3a4>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	fffeffff 	.word	0xfffeffff
 8002400:	fffbffff 	.word	0xfffbffff
 8002404:	40007000 	.word	0x40007000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x36a>
 8002410:	4bca      	ldr	r3, [pc, #808]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	4bc9      	ldr	r3, [pc, #804]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	621a      	str	r2, [r3, #32]
 800241c:	4bc7      	ldr	r3, [pc, #796]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	4bc6      	ldr	r3, [pc, #792]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002422:	2104      	movs	r1, #4
 8002424:	438a      	bics	r2, r1
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x3a4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x38c>
 8002432:	4bc2      	ldr	r3, [pc, #776]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	4bc1      	ldr	r3, [pc, #772]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002438:	2104      	movs	r1, #4
 800243a:	430a      	orrs	r2, r1
 800243c:	621a      	str	r2, [r3, #32]
 800243e:	4bbf      	ldr	r3, [pc, #764]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	4bbe      	ldr	r3, [pc, #760]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002444:	2101      	movs	r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	621a      	str	r2, [r3, #32]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x3a4>
 800244c:	4bbb      	ldr	r3, [pc, #748]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	4bba      	ldr	r3, [pc, #744]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002452:	2101      	movs	r1, #1
 8002454:	438a      	bics	r2, r1
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	4bb8      	ldr	r3, [pc, #736]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4bb7      	ldr	r3, [pc, #732]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800245e:	2104      	movs	r1, #4
 8002460:	438a      	bics	r2, r1
 8002462:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d014      	beq.n	8002496 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7fe fa12 	bl	8000894 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e009      	b.n	800248a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fa0d 	bl	8000894 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4aaf      	ldr	r2, [pc, #700]	; (8002740 <HAL_RCC_OscConfig+0x680>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e19a      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	4bac      	ldr	r3, [pc, #688]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x3b6>
 8002494:	e013      	b.n	80024be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe f9fd 	bl	8000894 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe f9f8 	bl	8000894 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	4aa5      	ldr	r2, [pc, #660]	; (8002740 <HAL_RCC_OscConfig+0x680>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e185      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	4ba1      	ldr	r3, [pc, #644]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b9c      	ldr	r3, [pc, #624]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	4b9b      	ldr	r3, [pc, #620]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024ce:	499d      	ldr	r1, [pc, #628]	; (8002744 <HAL_RCC_OscConfig+0x684>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2210      	movs	r2, #16
 80024da:	4013      	ands	r3, r2
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d12a      	bne.n	800253c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024e6:	4b95      	ldr	r3, [pc, #596]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ea:	4b94      	ldr	r3, [pc, #592]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024ec:	2104      	movs	r1, #4
 80024ee:	430a      	orrs	r2, r1
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024f2:	4b92      	ldr	r3, [pc, #584]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	430a      	orrs	r2, r1
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe f9c9 	bl	8000894 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002508:	f7fe f9c4 	bl	8000894 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e152      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d0f1      	beq.n	8002508 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002524:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	22f8      	movs	r2, #248	; 0xf8
 800252a:	4393      	bics	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	00da      	lsls	r2, r3, #3
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002536:	430a      	orrs	r2, r1
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
 800253a:	e034      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	3305      	adds	r3, #5
 8002542:	d111      	bne.n	8002568 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002544:	4b7d      	ldr	r3, [pc, #500]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002548:	4b7c      	ldr	r3, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800254a:	2104      	movs	r1, #4
 800254c:	438a      	bics	r2, r1
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002550:	4b7a      	ldr	r3, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	22f8      	movs	r2, #248	; 0xf8
 8002556:	4393      	bics	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	00da      	lsls	r2, r3, #3
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
 8002566:	e01e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002568:	4b74      	ldr	r3, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800256a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256c:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800256e:	2104      	movs	r1, #4
 8002570:	430a      	orrs	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002574:	4b71      	ldr	r3, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002578:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe f988 	bl	8000894 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800258a:	f7fe f983 	bl	8000894 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e111      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800259c:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2220      	movs	r2, #32
 80025ac:	4013      	ands	r3, r2
 80025ae:	d05c      	beq.n	800266a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	220c      	movs	r2, #12
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d00e      	beq.n	80025da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	220c      	movs	r2, #12
 80025c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d114      	bne.n	80025f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	025b      	lsls	r3, r3, #9
 80025d0:	401a      	ands	r2, r3
 80025d2:	23c0      	movs	r3, #192	; 0xc0
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025da:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80025dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	025b      	lsls	r3, r3, #9
 80025e2:	4013      	ands	r3, r2
 80025e4:	d040      	beq.n	8002668 <HAL_RCC_OscConfig+0x5a8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d03c      	beq.n	8002668 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0e6      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01b      	beq.n	8002632 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80025fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0249      	lsls	r1, r1, #9
 8002604:	430a      	orrs	r2, r1
 8002606:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe f944 	bl	8000894 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002612:	f7fe f93f 	bl	8000894 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0cd      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	025b      	lsls	r3, r3, #9
 800262c:	4013      	ands	r3, r2
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x552>
 8002630:	e01b      	b.n	800266a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002638:	4943      	ldr	r1, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x688>)
 800263a:	400a      	ands	r2, r1
 800263c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe f929 	bl	8000894 <HAL_GetTick>
 8002642:	0003      	movs	r3, r0
 8002644:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002648:	f7fe f924 	bl	8000894 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0b2      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800265c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	025b      	lsls	r3, r3, #9
 8002662:	4013      	ands	r3, r2
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x588>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002668:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d100      	bne.n	8002674 <HAL_RCC_OscConfig+0x5b4>
 8002672:	e0a4      	b.n	80027be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	220c      	movs	r2, #12
 800267a:	4013      	ands	r3, r2
 800267c:	2b08      	cmp	r3, #8
 800267e:	d100      	bne.n	8002682 <HAL_RCC_OscConfig+0x5c2>
 8002680:	e078      	b.n	8002774 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b02      	cmp	r3, #2
 8002688:	d14c      	bne.n	8002724 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002690:	492e      	ldr	r1, [pc, #184]	; (800274c <HAL_RCC_OscConfig+0x68c>)
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe f8fd 	bl	8000894 <HAL_GetTick>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe f8f8 	bl	8000894 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e086      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	049b      	lsls	r3, r3, #18
 80026ba:	4013      	ands	r3, r2
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	220f      	movs	r2, #15
 80026c4:	4393      	bics	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_RCC_OscConfig+0x690>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	431a      	orrs	r2, r3
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0449      	lsls	r1, r1, #17
 80026f6:	430a      	orrs	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe f8cb 	bl	8000894 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe f8c6 	bl	8000894 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e054      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	049b      	lsls	r3, r3, #18
 800271e:	4013      	ands	r3, r2
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x644>
 8002722:	e04c      	b.n	80027be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_OscConfig+0x67c>)
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x68c>)
 800272c:	400a      	ands	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe f8b0 	bl	8000894 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0x6a6>
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40021000 	.word	0x40021000
 8002740:	00001388 	.word	0x00001388
 8002744:	efffffff 	.word	0xefffffff
 8002748:	fffeffff 	.word	0xfffeffff
 800274c:	feffffff 	.word	0xfeffffff
 8002750:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f89e 	bl	8000894 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e02c      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_RCC_OscConfig+0x708>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	049b      	lsls	r3, r3, #18
 800276e:	4013      	ands	r3, r2
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x694>
 8002772:	e024      	b.n	80027be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e01f      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x708>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_OscConfig+0x708>)
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	23c0      	movs	r3, #192	; 0xc0
 8002790:	025b      	lsls	r3, r3, #9
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	429a      	cmp	r2, r3
 800279a:	d10e      	bne.n	80027ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	220f      	movs	r2, #15
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	23f0      	movs	r3, #240	; 0xf0
 80027ae:	039b      	lsls	r3, r3, #14
 80027b0:	401a      	ands	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b008      	add	sp, #32
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0bf      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d911      	bls.n	8002812 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4393      	bics	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0a6      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d015      	beq.n	8002848 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2204      	movs	r2, #4
 8002822:	4013      	ands	r3, r2
 8002824:	d006      	beq.n	8002834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002826:	4b51      	ldr	r3, [pc, #324]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 800282c:	21e0      	movs	r1, #224	; 0xe0
 800282e:	00c9      	lsls	r1, r1, #3
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4d      	ldr	r3, [pc, #308]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	22f0      	movs	r2, #240	; 0xf0
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d04c      	beq.n	80028ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	029b      	lsls	r3, r3, #10
 8002862:	4013      	ands	r3, r2
 8002864:	d120      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07a      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4b3e      	ldr	r3, [pc, #248]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	049b      	lsls	r3, r3, #18
 800287a:	4013      	ands	r3, r2
 800287c:	d114      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06e      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 800288c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	4013      	ands	r3, r2
 8002894:	d108      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e062      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2202      	movs	r2, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e05b      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028bc:	f7fd ffea 	bl	8000894 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c4:	e009      	b.n	80028da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f7fd ffe5 	bl	8000894 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1a4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e042      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	220c      	movs	r2, #12
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1ec      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d211      	bcs.n	800291e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2201      	movs	r2, #1
 8002900:	4393      	bics	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x19c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	4013      	ands	r3, r2
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e020      	b.n	8002960 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2204      	movs	r2, #4
 8002924:	4013      	ands	r3, r2
 8002926:	d009      	beq.n	800293c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1a8>)
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800293c:	f000 f820 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002940:	0001      	movs	r1, r0
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1a0>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	220f      	movs	r2, #15
 800294a:	4013      	ands	r3, r2
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1ac>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	000a      	movs	r2, r1
 8002952:	40da      	lsrs	r2, r3
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1b0>)
 8002956:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fd ff55 	bl	8000808 <HAL_InitTick>
  
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b004      	add	sp, #16
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40022000 	.word	0x40022000
 800296c:	40021000 	.word	0x40021000
 8002970:	00001388 	.word	0x00001388
 8002974:	fffff8ff 	.word	0xfffff8ff
 8002978:	08006e1c 	.word	0x08006e1c
 800297c:	20000000 	.word	0x20000000

08002980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b08f      	sub	sp, #60	; 0x3c
 8002984:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002986:	2314      	movs	r3, #20
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	4a37      	ldr	r2, [pc, #220]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xe8>)
 800298c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800298e:	c313      	stmia	r3!, {r0, r1, r4}
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	4a35      	ldr	r2, [pc, #212]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xec>)
 8002998:	ca13      	ldmia	r2!, {r0, r1, r4}
 800299a:	c313      	stmia	r3!, {r0, r1, r4}
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a4:	2300      	movs	r3, #0
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a8:	2300      	movs	r3, #0
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xf0>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	220c      	movs	r2, #12
 80029be:	4013      	ands	r3, r2
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d006      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x52>
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d043      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xd0>
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d144      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029d0:	e044      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	220f      	movs	r2, #15
 80029d8:	4013      	ands	r3, r2
 80029da:	2214      	movs	r2, #20
 80029dc:	18ba      	adds	r2, r7, r2
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xf0>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	220f      	movs	r2, #15
 80029e8:	4013      	ands	r3, r2
 80029ea:	1d3a      	adds	r2, r7, #4
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f2:	23c0      	movs	r3, #192	; 0xc0
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	401a      	ands	r2, r3
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d109      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a02:	481c      	ldr	r0, [pc, #112]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a04:	f7fd fb80 	bl	8000108 <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	4353      	muls	r3, r2
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
 8002a12:	e01a      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	23c0      	movs	r3, #192	; 0xc0
 8002a1e:	025b      	lsls	r3, r3, #9
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a28:	f7fd fb6e 	bl	8000108 <__udivsi3>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	4353      	muls	r3, r2
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a3a:	480e      	ldr	r0, [pc, #56]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a3c:	f7fd fb64 	bl	8000108 <__udivsi3>
 8002a40:	0003      	movs	r3, r0
 8002a42:	001a      	movs	r2, r3
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	4353      	muls	r3, r2
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a5a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b00f      	add	sp, #60	; 0x3c
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	08006db4 	.word	0x08006db4
 8002a6c:	08006dc4 	.word	0x08006dc4
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	02dc6c00 	.word	0x02dc6c00

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	025b      	lsls	r3, r3, #9
 8002a94:	4013      	ands	r3, r2
 8002a96:	d100      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a98:	e08f      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2317      	movs	r3, #23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	055b      	lsls	r3, r3, #21
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d111      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0549      	lsls	r1, r1, #21
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	61da      	str	r2, [r3, #28]
 8002abc:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	055b      	lsls	r3, r3, #21
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aca:	2317      	movs	r3, #23
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	d11a      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	0049      	lsls	r1, r1, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aec:	f7fd fed2 	bl	8000894 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fd fecd 	bl	8000894 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0a6      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4013      	ands	r3, r2
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b14:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	23c0      	movs	r3, #192	; 0xc0
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d034      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d02c      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a4b      	ldr	r2, [pc, #300]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b54:	4945      	ldr	r1, [pc, #276]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	d013      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fd fe94 	bl	8000894 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	e009      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fd fe8f 	bl	8000894 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e067      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba4:	2317      	movs	r3, #23
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bb4:	492f      	ldr	r1, [pc, #188]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4393      	bics	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	2210      	movs	r2, #16
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	029b      	lsls	r3, r3, #10
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	4393      	bics	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	4393      	bics	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffffcff 	.word	0xfffffcff
 8002c6c:	fffeffff 	.word	0xfffeffff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	efffffff 	.word	0xefffffff
 8002c78:	fffcffff 	.word	0xfffcffff

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01e      	b.n	8002ccc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223d      	movs	r2, #61	; 0x3d
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	223c      	movs	r2, #60	; 0x3c
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7fd fcf1 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	223d      	movs	r2, #61	; 0x3d
 8002cae:	2102      	movs	r1, #2
 8002cb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	0019      	movs	r1, r3
 8002cbc:	0010      	movs	r0, r2
 8002cbe:	f000 f949 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	223d      	movs	r2, #61	; 0x3d
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e01e      	b.n	8002d24 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	223d      	movs	r2, #61	; 0x3d
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223c      	movs	r2, #60	; 0x3c
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f815 	bl	8002d2c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	223d      	movs	r2, #61	; 0x3d
 8002d06:	2102      	movs	r1, #2
 8002d08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	0019      	movs	r1, r3
 8002d14:	0010      	movs	r0, r2
 8002d16:	f000 f91d 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	223d      	movs	r2, #61	; 0x3d
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	223c      	movs	r2, #60	; 0x3c
 8002d4c:	5c9b      	ldrb	r3, [r3, r2]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e03c      	b.n	8002dd0 <HAL_TIM_OC_ConfigChannel+0x94>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	223c      	movs	r2, #60	; 0x3c
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	223d      	movs	r2, #61	; 0x3d
 8002d62:	2102      	movs	r1, #2
 8002d64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d010      	beq.n	8002d8e <HAL_TIM_OC_ConfigChannel+0x52>
 8002d6c:	d802      	bhi.n	8002d74 <HAL_TIM_OC_ConfigChannel+0x38>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8002d72:	e024      	b.n	8002dbe <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d012      	beq.n	8002d9e <HAL_TIM_OC_ConfigChannel+0x62>
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d018      	beq.n	8002dae <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8002d7c:	e01f      	b.n	8002dbe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	0011      	movs	r1, r2
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f964 	bl	8003054 <TIM_OC1_SetConfig>
      break;
 8002d8c:	e017      	b.n	8002dbe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f9e4 	bl	8003164 <TIM_OC2_SetConfig>
      break;
 8002d9c:	e00f      	b.n	8002dbe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fa60 	bl	800326c <TIM_OC3_SetConfig>
      break;
 8002dac:	e007      	b.n	8002dbe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	0011      	movs	r1, r2
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fade 	bl	8003378 <TIM_OC4_SetConfig>
      break;
 8002dbc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	223d      	movs	r2, #61	; 0x3d
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	223c      	movs	r2, #60	; 0x3c
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223c      	movs	r2, #60	; 0x3c
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIM_ConfigClockSource+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0ab      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x170>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223c      	movs	r2, #60	; 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	223d      	movs	r2, #61	; 0x3d
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2277      	movs	r2, #119	; 0x77
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a4f      	ldr	r2, [pc, #316]	; (8002f50 <HAL_TIM_ConfigClockSource+0x178>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d100      	bne.n	8002e2a <HAL_TIM_ConfigClockSource+0x52>
 8002e28:	e06b      	b.n	8002f02 <HAL_TIM_ConfigClockSource+0x12a>
 8002e2a:	d80e      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x72>
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d100      	bne.n	8002e32 <HAL_TIM_ConfigClockSource+0x5a>
 8002e30:	e077      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x14a>
 8002e32:	d803      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x64>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <HAL_TIM_ConfigClockSource+0x62>
 8002e38:	e073      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e3a:	e07c      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d100      	bne.n	8002e42 <HAL_TIM_ConfigClockSource+0x6a>
 8002e40:	e06f      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x14a>
 8002e42:	2b30      	cmp	r3, #48	; 0x30
 8002e44:	d100      	bne.n	8002e48 <HAL_TIM_ConfigClockSource+0x70>
 8002e46:	e06c      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002e48:	e075      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e4a:	2b70      	cmp	r3, #112	; 0x70
 8002e4c:	d00e      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0x94>
 8002e4e:	d804      	bhi.n	8002e5a <HAL_TIM_ConfigClockSource+0x82>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d036      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xea>
 8002e54:	2b60      	cmp	r3, #96	; 0x60
 8002e56:	d044      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002e58:	e06d      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	0152      	lsls	r2, r2, #5
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d068      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x15c>
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	0192      	lsls	r2, r2, #6
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d017      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002e6a:	e064      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f000 fb60 	bl	8003540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2277      	movs	r2, #119	; 0x77
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
      break;
 8002e98:	e04d      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f000 fb49 	bl	8003540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	01c9      	lsls	r1, r1, #7
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]
      break;
 8002ec0:	e039      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	001a      	movs	r2, r3
 8002ed0:	f000 fabc 	bl	800344c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2150      	movs	r1, #80	; 0x50
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 fb16 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e029      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	f000 fada 	bl	80034a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2160      	movs	r1, #96	; 0x60
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 fb06 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002f00:	e019      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	f000 fa9c 	bl	800344c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2140      	movs	r1, #64	; 0x40
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 faf6 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002f20:	e009      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	f000 faed 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002f32:	e000      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002f34:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	223d      	movs	r2, #61	; 0x3d
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	223c      	movs	r2, #60	; 0x3c
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	ffff00ff 	.word	0xffff00ff

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a34      	ldr	r2, [pc, #208]	; (8003038 <TIM_Base_SetConfig+0xe4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d008      	beq.n	8002f7e <TIM_Base_SetConfig+0x2a>
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	05db      	lsls	r3, r3, #23
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d003      	beq.n	8002f7e <TIM_Base_SetConfig+0x2a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a30      	ldr	r2, [pc, #192]	; (800303c <TIM_Base_SetConfig+0xe8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2270      	movs	r2, #112	; 0x70
 8002f82:	4393      	bics	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a29      	ldr	r2, [pc, #164]	; (8003038 <TIM_Base_SetConfig+0xe4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <TIM_Base_SetConfig+0x76>
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	05db      	lsls	r3, r3, #23
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d013      	beq.n	8002fca <TIM_Base_SetConfig+0x76>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	; (800303c <TIM_Base_SetConfig+0xe8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00f      	beq.n	8002fca <TIM_Base_SetConfig+0x76>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a24      	ldr	r2, [pc, #144]	; (8003040 <TIM_Base_SetConfig+0xec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <TIM_Base_SetConfig+0x76>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <TIM_Base_SetConfig+0xf0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <TIM_Base_SetConfig+0x76>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	; (8003048 <TIM_Base_SetConfig+0xf4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <TIM_Base_SetConfig+0x76>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a21      	ldr	r2, [pc, #132]	; (800304c <TIM_Base_SetConfig+0xf8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	; (8003050 <TIM_Base_SetConfig+0xfc>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <TIM_Base_SetConfig+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00b      	beq.n	8003022 <TIM_Base_SetConfig+0xce>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <TIM_Base_SetConfig+0xf0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_Base_SetConfig+0xce>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <TIM_Base_SetConfig+0xf4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_Base_SetConfig+0xce>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <TIM_Base_SetConfig+0xf8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d103      	bne.n	800302a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	615a      	str	r2, [r3, #20]
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40002000 	.word	0x40002000
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	fffffcff 	.word	0xfffffcff

08003054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	2201      	movs	r2, #1
 8003064:	4393      	bics	r3, r2
 8003066:	001a      	movs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2270      	movs	r2, #112	; 0x70
 8003082:	4393      	bics	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2203      	movs	r2, #3
 800308a:	4393      	bics	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2202      	movs	r2, #2
 800309c:	4393      	bics	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a27      	ldr	r2, [pc, #156]	; (800314c <TIM_OC1_SetConfig+0xf8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00b      	beq.n	80030ca <TIM_OC1_SetConfig+0x76>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <TIM_OC1_SetConfig+0xfc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <TIM_OC1_SetConfig+0x76>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <TIM_OC1_SetConfig+0x100>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_OC1_SetConfig+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <TIM_OC1_SetConfig+0x104>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10c      	bne.n	80030e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2208      	movs	r2, #8
 80030ce:	4393      	bics	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2204      	movs	r2, #4
 80030e0:	4393      	bics	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a19      	ldr	r2, [pc, #100]	; (800314c <TIM_OC1_SetConfig+0xf8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00b      	beq.n	8003104 <TIM_OC1_SetConfig+0xb0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a18      	ldr	r2, [pc, #96]	; (8003150 <TIM_OC1_SetConfig+0xfc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <TIM_OC1_SetConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a17      	ldr	r2, [pc, #92]	; (8003154 <TIM_OC1_SetConfig+0x100>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_OC1_SetConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a16      	ldr	r2, [pc, #88]	; (8003158 <TIM_OC1_SetConfig+0x104>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <TIM_OC1_SetConfig+0x108>)
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4a14      	ldr	r2, [pc, #80]	; (8003160 <TIM_OC1_SetConfig+0x10c>)
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b006      	add	sp, #24
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800
 800315c:	fffffeff 	.word	0xfffffeff
 8003160:	fffffdff 	.word	0xfffffdff

08003164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	2210      	movs	r2, #16
 8003174:	4393      	bics	r3, r2
 8003176:	001a      	movs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a2e      	ldr	r2, [pc, #184]	; (800324c <TIM_OC2_SetConfig+0xe8>)
 8003192:	4013      	ands	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <TIM_OC2_SetConfig+0xec>)
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2220      	movs	r2, #32
 80031ae:	4393      	bics	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <TIM_OC2_SetConfig+0xf0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10d      	bne.n	80031e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	4393      	bics	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	4393      	bics	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <TIM_OC2_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00b      	beq.n	8003202 <TIM_OC2_SetConfig+0x9e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <TIM_OC2_SetConfig+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_OC2_SetConfig+0x9e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <TIM_OC2_SetConfig+0xf8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_OC2_SetConfig+0x9e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a18      	ldr	r2, [pc, #96]	; (8003260 <TIM_OC2_SetConfig+0xfc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <TIM_OC2_SetConfig+0x100>)
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <TIM_OC2_SetConfig+0x104>)
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b006      	add	sp, #24
 800324a:	bd80      	pop	{r7, pc}
 800324c:	ffff8fff 	.word	0xffff8fff
 8003250:	fffffcff 	.word	0xfffffcff
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40014000 	.word	0x40014000
 800325c:	40014400 	.word	0x40014400
 8003260:	40014800 	.word	0x40014800
 8003264:	fffffbff 	.word	0xfffffbff
 8003268:	fffff7ff 	.word	0xfffff7ff

0800326c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a35      	ldr	r2, [pc, #212]	; (8003350 <TIM_OC3_SetConfig+0xe4>)
 800327c:	401a      	ands	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2270      	movs	r2, #112	; 0x70
 8003298:	4393      	bics	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2203      	movs	r2, #3
 80032a0:	4393      	bics	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	4a28      	ldr	r2, [pc, #160]	; (8003354 <TIM_OC3_SetConfig+0xe8>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a24      	ldr	r2, [pc, #144]	; (8003358 <TIM_OC3_SetConfig+0xec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10d      	bne.n	80032e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	4a23      	ldr	r2, [pc, #140]	; (800335c <TIM_OC3_SetConfig+0xf0>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <TIM_OC3_SetConfig+0xf4>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <TIM_OC3_SetConfig+0xec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_OC3_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <TIM_OC3_SetConfig+0xf8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_OC3_SetConfig+0x9a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <TIM_OC3_SetConfig+0xfc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_OC3_SetConfig+0x9a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <TIM_OC3_SetConfig+0x100>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <TIM_OC3_SetConfig+0x104>)
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_OC3_SetConfig+0x108>)
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}
 8003350:	fffffeff 	.word	0xfffffeff
 8003354:	fffffdff 	.word	0xfffffdff
 8003358:	40012c00 	.word	0x40012c00
 800335c:	fffff7ff 	.word	0xfffff7ff
 8003360:	fffffbff 	.word	0xfffffbff
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800
 8003370:	ffffefff 	.word	0xffffefff
 8003374:	ffffdfff 	.word	0xffffdfff

08003378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a28      	ldr	r2, [pc, #160]	; (8003428 <TIM_OC4_SetConfig+0xb0>)
 8003388:	401a      	ands	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <TIM_OC4_SetConfig+0xb4>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <TIM_OC4_SetConfig+0xb8>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <TIM_OC4_SetConfig+0xbc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a19      	ldr	r2, [pc, #100]	; (8003438 <TIM_OC4_SetConfig+0xc0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_OC4_SetConfig+0x78>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <TIM_OC4_SetConfig+0xc4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_OC4_SetConfig+0x78>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a17      	ldr	r2, [pc, #92]	; (8003440 <TIM_OC4_SetConfig+0xc8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_OC4_SetConfig+0x78>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a16      	ldr	r2, [pc, #88]	; (8003444 <TIM_OC4_SetConfig+0xcc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d109      	bne.n	8003404 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <TIM_OC4_SetConfig+0xd0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b006      	add	sp, #24
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	ffffefff 	.word	0xffffefff
 800342c:	ffff8fff 	.word	0xffff8fff
 8003430:	fffffcff 	.word	0xfffffcff
 8003434:	ffffdfff 	.word	0xffffdfff
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400
 8003444:	40014800 	.word	0x40014800
 8003448:	ffffbfff 	.word	0xffffbfff

0800344c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	2201      	movs	r2, #1
 8003464:	4393      	bics	r3, r2
 8003466:	001a      	movs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	22f0      	movs	r2, #240	; 0xf0
 8003476:	4393      	bics	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	220a      	movs	r2, #10
 8003488:	4393      	bics	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	2210      	movs	r2, #16
 80034ba:	4393      	bics	r3, r2
 80034bc:	001a      	movs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <TIM_TI2_ConfigInputStage+0x60>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	031b      	lsls	r3, r3, #12
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	22a0      	movs	r2, #160	; 0xa0
 80034e4:	4393      	bics	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b006      	add	sp, #24
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	ffff0fff 	.word	0xffff0fff

0800350c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2270      	movs	r2, #112	; 0x70
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	2207      	movs	r2, #7
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <TIM_ETR_SetConfig+0x3c>)
 8003558:	4013      	ands	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	021a      	lsls	r2, r3, #8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	431a      	orrs	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b006      	add	sp, #24
 800357a:	bd80      	pop	{r7, pc}
 800357c:	ffff00ff 	.word	0xffff00ff

08003580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223c      	movs	r2, #60	; 0x3c
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003594:	2302      	movs	r3, #2
 8003596:	e047      	b.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223c      	movs	r2, #60	; 0x3c
 800359c:	2101      	movs	r1, #1
 800359e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	223d      	movs	r2, #61	; 0x3d
 80035a4:	2102      	movs	r1, #2
 80035a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2270      	movs	r2, #112	; 0x70
 80035bc:	4393      	bics	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00f      	beq.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	05db      	lsls	r3, r3, #23
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d009      	beq.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10c      	bne.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	4393      	bics	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223d      	movs	r2, #61	; 0x3d
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	223c      	movs	r2, #60	; 0x3c
 8003622:	2100      	movs	r1, #0
 8003624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b004      	add	sp, #16
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40014000 	.word	0x40014000

0800363c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003644:	210e      	movs	r1, #14
 8003646:	187b      	adds	r3, r7, r1
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <USB_EnableGlobalInt+0x30>)
 800364a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	5a9b      	ldrh	r3, [r3, r2]
 8003652:	b29a      	uxth	r2, r3
 8003654:	187b      	adds	r3, r7, r1
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	b299      	uxth	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2240      	movs	r2, #64	; 0x40
 8003660:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b004      	add	sp, #16
 800366a:	bd80      	pop	{r7, pc}
 800366c:	ffffbf80 	.word	0xffffbf80

08003670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003678:	210e      	movs	r1, #14
 800367a:	187b      	adds	r3, r7, r1
 800367c:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <USB_DisableGlobalInt+0x3c>)
 800367e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	5a9b      	ldrh	r3, [r3, r2]
 8003686:	b29b      	uxth	r3, r3
 8003688:	b21b      	sxth	r3, r3
 800368a:	187a      	adds	r2, r7, r1
 800368c:	2100      	movs	r1, #0
 800368e:	5e52      	ldrsh	r2, [r2, r1]
 8003690:	43d2      	mvns	r2, r2
 8003692:	b212      	sxth	r2, r2
 8003694:	4013      	ands	r3, r2
 8003696:	b21b      	sxth	r3, r3
 8003698:	b299      	uxth	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b004      	add	sp, #16
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	ffffbf80 	.word	0xffffbf80

080036b0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036b0:	b084      	sub	sp, #16
 80036b2:	b590      	push	{r4, r7, lr}
 80036b4:	46c6      	mov	lr, r8
 80036b6:	b500      	push	{lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	2004      	movs	r0, #4
 80036c0:	2410      	movs	r4, #16
 80036c2:	46a4      	mov	ip, r4
 80036c4:	2408      	movs	r4, #8
 80036c6:	46a0      	mov	r8, r4
 80036c8:	44b8      	add	r8, r7
 80036ca:	44c4      	add	ip, r8
 80036cc:	4460      	add	r0, ip
 80036ce:	6001      	str	r1, [r0, #0]
 80036d0:	6042      	str	r2, [r0, #4]
 80036d2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	2101      	movs	r1, #1
 80036da:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	2100      	movs	r1, #0
 80036e2:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2244      	movs	r2, #68	; 0x44
 80036e8:	2100      	movs	r1, #0
 80036ea:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2250      	movs	r2, #80	; 0x50
 80036f0:	2100      	movs	r1, #0
 80036f2:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7ff ffa0 	bl	800363c <USB_EnableGlobalInt>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b002      	add	sp, #8
 8003704:	bc04      	pop	{r2}
 8003706:	4690      	mov	r8, r2
 8003708:	bc90      	pop	{r4, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	b004      	add	sp, #16
 800370e:	4718      	bx	r3

08003710 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800371a:	2317      	movs	r3, #23
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	18d3      	adds	r3, r2, r3
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	2314      	movs	r3, #20
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	49b2      	ldr	r1, [pc, #712]	; (8003a00 <USB_ActivateEndpoint+0x2f0>)
 8003736:	400a      	ands	r2, r1
 8003738:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	78db      	ldrb	r3, [r3, #3]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d020      	beq.n	8003784 <USB_ActivateEndpoint+0x74>
 8003742:	dc02      	bgt.n	800374a <USB_ActivateEndpoint+0x3a>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <USB_ActivateEndpoint+0x44>
 8003748:	e025      	b.n	8003796 <USB_ActivateEndpoint+0x86>
 800374a:	2b02      	cmp	r3, #2
 800374c:	d00b      	beq.n	8003766 <USB_ActivateEndpoint+0x56>
 800374e:	2b03      	cmp	r3, #3
 8003750:	d00f      	beq.n	8003772 <USB_ActivateEndpoint+0x62>
 8003752:	e020      	b.n	8003796 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003754:	2214      	movs	r2, #20
 8003756:	18bb      	adds	r3, r7, r2
 8003758:	18ba      	adds	r2, r7, r2
 800375a:	8812      	ldrh	r2, [r2, #0]
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	0089      	lsls	r1, r1, #2
 8003760:	430a      	orrs	r2, r1
 8003762:	801a      	strh	r2, [r3, #0]
      break;
 8003764:	e01c      	b.n	80037a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003766:	2214      	movs	r2, #20
 8003768:	18bb      	adds	r3, r7, r2
 800376a:	18ba      	adds	r2, r7, r2
 800376c:	8812      	ldrh	r2, [r2, #0]
 800376e:	801a      	strh	r2, [r3, #0]
      break;
 8003770:	e016      	b.n	80037a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003772:	2214      	movs	r2, #20
 8003774:	18bb      	adds	r3, r7, r2
 8003776:	18ba      	adds	r2, r7, r2
 8003778:	8812      	ldrh	r2, [r2, #0]
 800377a:	21c0      	movs	r1, #192	; 0xc0
 800377c:	00c9      	lsls	r1, r1, #3
 800377e:	430a      	orrs	r2, r1
 8003780:	801a      	strh	r2, [r3, #0]
      break;
 8003782:	e00d      	b.n	80037a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003784:	2214      	movs	r2, #20
 8003786:	18bb      	adds	r3, r7, r2
 8003788:	18ba      	adds	r2, r7, r2
 800378a:	8812      	ldrh	r2, [r2, #0]
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	00c9      	lsls	r1, r1, #3
 8003790:	430a      	orrs	r2, r1
 8003792:	801a      	strh	r2, [r3, #0]
      break;
 8003794:	e004      	b.n	80037a0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003796:	2317      	movs	r3, #23
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
      break;
 800379e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	2214      	movs	r2, #20
 80037ac:	18ba      	adds	r2, r7, r2
 80037ae:	8812      	ldrh	r2, [r2, #0]
 80037b0:	4994      	ldr	r1, [pc, #592]	; (8003a04 <USB_ActivateEndpoint+0x2f4>)
 80037b2:	430a      	orrs	r2, r1
 80037b4:	b292      	uxth	r2, r2
 80037b6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	4a8f      	ldr	r2, [pc, #572]	; (8003a08 <USB_ActivateEndpoint+0x2f8>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	b29c      	uxth	r4, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	18d3      	adds	r3, r2, r3
 80037e4:	4a87      	ldr	r2, [pc, #540]	; (8003a04 <USB_ActivateEndpoint+0x2f4>)
 80037e6:	4322      	orrs	r2, r4
 80037e8:	b292      	uxth	r2, r2
 80037ea:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	7b1b      	ldrb	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d000      	beq.n	80037f6 <USB_ActivateEndpoint+0xe6>
 80037f4:	e11a      	b.n	8003a2c <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d062      	beq.n	80038c4 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037fe:	687c      	ldr	r4, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2250      	movs	r2, #80	; 0x50
 8003804:	5a9b      	ldrh	r3, [r3, r2]
 8003806:	b29b      	uxth	r3, r3
 8003808:	18e4      	adds	r4, r4, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	18e3      	adds	r3, r4, r3
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	00d2      	lsls	r2, r2, #3
 8003816:	4694      	mov	ip, r2
 8003818:	4463      	add	r3, ip
 800381a:	001c      	movs	r4, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	88db      	ldrh	r3, [r3, #6]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	b29b      	uxth	r3, r3
 8003824:	18db      	adds	r3, r3, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29c      	uxth	r4, r3
 8003838:	0022      	movs	r2, r4
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	4013      	ands	r3, r2
 800383e:	d012      	beq.n	8003866 <USB_ActivateEndpoint+0x156>
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	18d3      	adds	r3, r2, r3
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	4a6e      	ldr	r2, [pc, #440]	; (8003a08 <USB_ActivateEndpoint+0x2f8>)
 8003850:	4013      	ands	r3, r2
 8003852:	b29c      	uxth	r4, r3
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	18d3      	adds	r3, r2, r3
 800385e:	4a6b      	ldr	r2, [pc, #428]	; (8003a0c <USB_ActivateEndpoint+0x2fc>)
 8003860:	4322      	orrs	r2, r4
 8003862:	b292      	uxth	r2, r2
 8003864:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	78db      	ldrb	r3, [r3, #3]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d016      	beq.n	800389c <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	18d3      	adds	r3, r2, r3
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4a64      	ldr	r2, [pc, #400]	; (8003a10 <USB_ActivateEndpoint+0x300>)
 800387e:	4013      	ands	r3, r2
 8003880:	b29c      	uxth	r4, r3
 8003882:	2320      	movs	r3, #32
 8003884:	4063      	eors	r3, r4
 8003886:	b29c      	uxth	r4, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <USB_ActivateEndpoint+0x2f4>)
 8003894:	4322      	orrs	r2, r4
 8003896:	b292      	uxth	r2, r2
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	e21a      	b.n	8003cd2 <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	18d3      	adds	r3, r2, r3
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <USB_ActivateEndpoint+0x300>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29c      	uxth	r4, r3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	4a52      	ldr	r2, [pc, #328]	; (8003a04 <USB_ActivateEndpoint+0x2f4>)
 80038bc:	4322      	orrs	r2, r4
 80038be:	b292      	uxth	r2, r2
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	e206      	b.n	8003cd2 <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038c4:	687c      	ldr	r4, [r7, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2250      	movs	r2, #80	; 0x50
 80038ca:	5a9b      	ldrh	r3, [r3, r2]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	18e4      	adds	r4, r4, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	18e3      	adds	r3, r4, r3
 80038d8:	4a4e      	ldr	r2, [pc, #312]	; (8003a14 <USB_ActivateEndpoint+0x304>)
 80038da:	4694      	mov	ip, r2
 80038dc:	4463      	add	r3, ip
 80038de:	001c      	movs	r4, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	88db      	ldrh	r3, [r3, #6]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	18db      	adds	r3, r3, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038ee:	687c      	ldr	r4, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2250      	movs	r2, #80	; 0x50
 80038f4:	5a9b      	ldrh	r3, [r3, r2]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	18e4      	adds	r4, r4, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	18e3      	adds	r3, r4, r3
 8003902:	4a45      	ldr	r2, [pc, #276]	; (8003a18 <USB_ActivateEndpoint+0x308>)
 8003904:	4694      	mov	ip, r2
 8003906:	4463      	add	r3, ip
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <USB_ActivateEndpoint+0x220>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <USB_ActivateEndpoint+0x30c>)
 8003918:	4013      	ands	r3, r2
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	801a      	strh	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	4a3e      	ldr	r2, [pc, #248]	; (8003a20 <USB_ActivateEndpoint+0x310>)
 8003926:	4313      	orrs	r3, r2
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e02b      	b.n	8003988 <USB_ActivateEndpoint+0x278>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b3e      	cmp	r3, #62	; 0x3e
 8003936:	d812      	bhi.n	800395e <USB_ActivateEndpoint+0x24e>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2201      	movs	r2, #1
 8003946:	4013      	ands	r3, r2
 8003948:	d002      	beq.n	8003950 <USB_ActivateEndpoint+0x240>
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3301      	adds	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	b29b      	uxth	r3, r3
 8003954:	029b      	lsls	r3, r3, #10
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	e014      	b.n	8003988 <USB_ActivateEndpoint+0x278>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	221f      	movs	r2, #31
 800396c:	4013      	ands	r3, r2
 800396e:	d102      	bne.n	8003976 <USB_ActivateEndpoint+0x266>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3b01      	subs	r3, #1
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	b29b      	uxth	r3, r3
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	b29b      	uxth	r3, r3
 800397e:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <USB_ActivateEndpoint+0x310>)
 8003980:	4313      	orrs	r3, r2
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	18d3      	adds	r3, r2, r3
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29c      	uxth	r4, r3
 8003996:	0022      	movs	r2, r4
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	01db      	lsls	r3, r3, #7
 800399c:	4013      	ands	r3, r2
 800399e:	d012      	beq.n	80039c6 <USB_ActivateEndpoint+0x2b6>
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <USB_ActivateEndpoint+0x2f8>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29c      	uxth	r4, r3
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <USB_ActivateEndpoint+0x314>)
 80039c0:	4322      	orrs	r2, r4
 80039c2:	b292      	uxth	r2, r2
 80039c4:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18d3      	adds	r3, r2, r3
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <USB_ActivateEndpoint+0x318>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	b29c      	uxth	r4, r3
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	015b      	lsls	r3, r3, #5
 80039de:	4063      	eors	r3, r4
 80039e0:	b29c      	uxth	r4, r3
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	4063      	eors	r3, r4
 80039e8:	b29c      	uxth	r4, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	18d3      	adds	r3, r2, r3
 80039f4:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <USB_ActivateEndpoint+0x2f4>)
 80039f6:	4322      	orrs	r2, r4
 80039f8:	b292      	uxth	r2, r2
 80039fa:	801a      	strh	r2, [r3, #0]
 80039fc:	e169      	b.n	8003cd2 <USB_ActivateEndpoint+0x5c2>
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	ffff898f 	.word	0xffff898f
 8003a04:	ffff8080 	.word	0xffff8080
 8003a08:	ffff8f8f 	.word	0xffff8f8f
 8003a0c:	ffff80c0 	.word	0xffff80c0
 8003a10:	ffff8fbf 	.word	0xffff8fbf
 8003a14:	00000404 	.word	0x00000404
 8003a18:	00000406 	.word	0x00000406
 8003a1c:	ffff83ff 	.word	0xffff83ff
 8003a20:	ffff8000 	.word	0xffff8000
 8003a24:	ffffc080 	.word	0xffffc080
 8003a28:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	18d3      	adds	r3, r2, r3
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4aa9      	ldr	r2, [pc, #676]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	b29c      	uxth	r4, r3
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	4aa6      	ldr	r2, [pc, #664]	; (8003ce4 <USB_ActivateEndpoint+0x5d4>)
 8003a4c:	4322      	orrs	r2, r4
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a52:	687c      	ldr	r4, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2250      	movs	r2, #80	; 0x50
 8003a58:	5a9b      	ldrh	r3, [r3, r2]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	18e4      	adds	r4, r4, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	18e3      	adds	r3, r4, r3
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	00d2      	lsls	r2, r2, #3
 8003a6a:	4694      	mov	ip, r2
 8003a6c:	4463      	add	r3, ip
 8003a6e:	001c      	movs	r4, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	891b      	ldrh	r3, [r3, #8]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	18db      	adds	r3, r3, r3
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8023      	strh	r3, [r4, #0]
 8003a7e:	687c      	ldr	r4, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2250      	movs	r2, #80	; 0x50
 8003a84:	5a9b      	ldrh	r3, [r3, r2]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	18e4      	adds	r4, r4, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	18e3      	adds	r3, r4, r3
 8003a92:	4a95      	ldr	r2, [pc, #596]	; (8003ce8 <USB_ActivateEndpoint+0x5d8>)
 8003a94:	4694      	mov	ip, r2
 8003a96:	4463      	add	r3, ip
 8003a98:	001c      	movs	r4, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	895b      	ldrh	r3, [r3, #10]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	18db      	adds	r3, r3, r3
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d000      	beq.n	8003ab2 <USB_ActivateEndpoint+0x3a2>
 8003ab0:	e07e      	b.n	8003bb0 <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	18d3      	adds	r3, r2, r3
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29c      	uxth	r4, r3
 8003ac0:	0022      	movs	r2, r4
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	01db      	lsls	r3, r3, #7
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d012      	beq.n	8003af0 <USB_ActivateEndpoint+0x3e0>
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	4a81      	ldr	r2, [pc, #516]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	b29c      	uxth	r4, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	18d3      	adds	r3, r2, r3
 8003ae8:	4a80      	ldr	r2, [pc, #512]	; (8003cec <USB_ActivateEndpoint+0x5dc>)
 8003aea:	4322      	orrs	r2, r4
 8003aec:	b292      	uxth	r2, r2
 8003aee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29c      	uxth	r4, r3
 8003afe:	0022      	movs	r2, r4
 8003b00:	2340      	movs	r3, #64	; 0x40
 8003b02:	4013      	ands	r3, r2
 8003b04:	d012      	beq.n	8003b2c <USB_ActivateEndpoint+0x41c>
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4a72      	ldr	r2, [pc, #456]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	b29c      	uxth	r4, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	18d3      	adds	r3, r2, r3
 8003b24:	4a72      	ldr	r2, [pc, #456]	; (8003cf0 <USB_ActivateEndpoint+0x5e0>)
 8003b26:	4322      	orrs	r2, r4
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	4a69      	ldr	r2, [pc, #420]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	b29c      	uxth	r4, r3
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	4a69      	ldr	r2, [pc, #420]	; (8003cf0 <USB_ActivateEndpoint+0x5e0>)
 8003b4c:	4322      	orrs	r2, r4
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	4a64      	ldr	r2, [pc, #400]	; (8003cf4 <USB_ActivateEndpoint+0x5e4>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	b29c      	uxth	r4, r3
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	4063      	eors	r3, r4
 8003b6c:	b29c      	uxth	r4, r3
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	4063      	eors	r3, r4
 8003b74:	b29c      	uxth	r4, r3
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	18d3      	adds	r3, r2, r3
 8003b80:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <USB_ActivateEndpoint+0x5e8>)
 8003b82:	4322      	orrs	r2, r4
 8003b84:	b292      	uxth	r2, r2
 8003b86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	18d3      	adds	r3, r2, r3
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	4a59      	ldr	r2, [pc, #356]	; (8003cfc <USB_ActivateEndpoint+0x5ec>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29c      	uxth	r4, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	4a54      	ldr	r2, [pc, #336]	; (8003cf8 <USB_ActivateEndpoint+0x5e8>)
 8003ba8:	4322      	orrs	r2, r4
 8003baa:	b292      	uxth	r2, r2
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	e090      	b.n	8003cd2 <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	18d3      	adds	r3, r2, r3
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29c      	uxth	r4, r3
 8003bbe:	0022      	movs	r2, r4
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	01db      	lsls	r3, r3, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d012      	beq.n	8003bee <USB_ActivateEndpoint+0x4de>
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	18d3      	adds	r3, r2, r3
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4a42      	ldr	r2, [pc, #264]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29c      	uxth	r4, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	18d3      	adds	r3, r2, r3
 8003be6:	4a41      	ldr	r2, [pc, #260]	; (8003cec <USB_ActivateEndpoint+0x5dc>)
 8003be8:	4322      	orrs	r2, r4
 8003bea:	b292      	uxth	r2, r2
 8003bec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	18d3      	adds	r3, r2, r3
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29c      	uxth	r4, r3
 8003bfc:	0022      	movs	r2, r4
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	4013      	ands	r3, r2
 8003c02:	d012      	beq.n	8003c2a <USB_ActivateEndpoint+0x51a>
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	18d3      	adds	r3, r2, r3
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4a33      	ldr	r2, [pc, #204]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29c      	uxth	r4, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	18d3      	adds	r3, r2, r3
 8003c22:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <USB_ActivateEndpoint+0x5e0>)
 8003c24:	4322      	orrs	r2, r4
 8003c26:	b292      	uxth	r2, r2
 8003c28:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <USB_ActivateEndpoint+0x5d0>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29c      	uxth	r4, r3
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	4a28      	ldr	r2, [pc, #160]	; (8003cec <USB_ActivateEndpoint+0x5dc>)
 8003c4a:	4322      	orrs	r2, r4
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d016      	beq.n	8003c86 <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <USB_ActivateEndpoint+0x5ec>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29c      	uxth	r4, r3
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	4063      	eors	r3, r4
 8003c70:	b29c      	uxth	r4, r3
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	18d3      	adds	r3, r2, r3
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <USB_ActivateEndpoint+0x5e8>)
 8003c7e:	4322      	orrs	r2, r4
 8003c80:	b292      	uxth	r2, r2
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	e012      	b.n	8003cac <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	18d3      	adds	r3, r2, r3
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <USB_ActivateEndpoint+0x5ec>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	b29c      	uxth	r4, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	18d3      	adds	r3, r2, r3
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <USB_ActivateEndpoint+0x5e8>)
 8003ca6:	4322      	orrs	r2, r4
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <USB_ActivateEndpoint+0x5e4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29c      	uxth	r4, r3
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	18d3      	adds	r3, r2, r3
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <USB_ActivateEndpoint+0x5e8>)
 8003ccc:	4322      	orrs	r2, r4
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8003cd2:	2317      	movs	r3, #23
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	781b      	ldrb	r3, [r3, #0]
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b007      	add	sp, #28
 8003cde:	bd90      	pop	{r4, r7, pc}
 8003ce0:	ffff8f8f 	.word	0xffff8f8f
 8003ce4:	ffff8180 	.word	0xffff8180
 8003ce8:	00000404 	.word	0x00000404
 8003cec:	ffffc080 	.word	0xffffc080
 8003cf0:	ffff80c0 	.word	0xffff80c0
 8003cf4:	ffffbf8f 	.word	0xffffbf8f
 8003cf8:	ffff8080 	.word	0xffff8080
 8003cfc:	ffff8fbf 	.word	0xffff8fbf

08003d00 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7b1b      	ldrb	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d168      	bne.n	8003de4 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d031      	beq.n	8003d7e <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29c      	uxth	r4, r3
 8003d28:	0022      	movs	r2, r4
 8003d2a:	2340      	movs	r3, #64	; 0x40
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d012      	beq.n	8003d56 <USB_DeactivateEndpoint+0x56>
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	18d3      	adds	r3, r2, r3
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	4aa5      	ldr	r2, [pc, #660]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	b29c      	uxth	r4, r3
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	4aa2      	ldr	r2, [pc, #648]	; (8003fd8 <USB_DeactivateEndpoint+0x2d8>)
 8003d50:	4322      	orrs	r2, r4
 8003d52:	b292      	uxth	r2, r2
 8003d54:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	18d3      	adds	r3, r2, r3
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	4a9d      	ldr	r2, [pc, #628]	; (8003fdc <USB_DeactivateEndpoint+0x2dc>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	b29c      	uxth	r4, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	4a9a      	ldr	r2, [pc, #616]	; (8003fe0 <USB_DeactivateEndpoint+0x2e0>)
 8003d76:	4322      	orrs	r2, r4
 8003d78:	b292      	uxth	r2, r2
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e124      	b.n	8003fc8 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	18d3      	adds	r3, r2, r3
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29c      	uxth	r4, r3
 8003d8c:	0022      	movs	r2, r4
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	01db      	lsls	r3, r3, #7
 8003d92:	4013      	ands	r3, r2
 8003d94:	d012      	beq.n	8003dbc <USB_DeactivateEndpoint+0xbc>
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	18d3      	adds	r3, r2, r3
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4a8b      	ldr	r2, [pc, #556]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29c      	uxth	r4, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	18d3      	adds	r3, r2, r3
 8003db4:	4a8b      	ldr	r2, [pc, #556]	; (8003fe4 <USB_DeactivateEndpoint+0x2e4>)
 8003db6:	4322      	orrs	r2, r4
 8003db8:	b292      	uxth	r2, r2
 8003dba:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4a87      	ldr	r2, [pc, #540]	; (8003fe8 <USB_DeactivateEndpoint+0x2e8>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29c      	uxth	r4, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	18d3      	adds	r3, r2, r3
 8003dda:	4a81      	ldr	r2, [pc, #516]	; (8003fe0 <USB_DeactivateEndpoint+0x2e0>)
 8003ddc:	4322      	orrs	r2, r4
 8003dde:	b292      	uxth	r2, r2
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e0f1      	b.n	8003fc8 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d000      	beq.n	8003dee <USB_DeactivateEndpoint+0xee>
 8003dec:	e076      	b.n	8003edc <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29c      	uxth	r4, r3
 8003dfc:	0022      	movs	r2, r4
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	01db      	lsls	r3, r3, #7
 8003e02:	4013      	ands	r3, r2
 8003e04:	d012      	beq.n	8003e2c <USB_DeactivateEndpoint+0x12c>
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	18d3      	adds	r3, r2, r3
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	4a6f      	ldr	r2, [pc, #444]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29c      	uxth	r4, r3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	4a6f      	ldr	r2, [pc, #444]	; (8003fe4 <USB_DeactivateEndpoint+0x2e4>)
 8003e26:	4322      	orrs	r2, r4
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	18d3      	adds	r3, r2, r3
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29c      	uxth	r4, r3
 8003e3a:	0022      	movs	r2, r4
 8003e3c:	2340      	movs	r3, #64	; 0x40
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d012      	beq.n	8003e68 <USB_DeactivateEndpoint+0x168>
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	18d3      	adds	r3, r2, r3
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4a60      	ldr	r2, [pc, #384]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	b29c      	uxth	r4, r3
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	4a5d      	ldr	r2, [pc, #372]	; (8003fd8 <USB_DeactivateEndpoint+0x2d8>)
 8003e62:	4322      	orrs	r2, r4
 8003e64:	b292      	uxth	r2, r2
 8003e66:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	18d3      	adds	r3, r2, r3
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4a57      	ldr	r2, [pc, #348]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b29c      	uxth	r4, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	18d3      	adds	r3, r2, r3
 8003e86:	4a54      	ldr	r2, [pc, #336]	; (8003fd8 <USB_DeactivateEndpoint+0x2d8>)
 8003e88:	4322      	orrs	r2, r4
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <USB_DeactivateEndpoint+0x2e8>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	b29c      	uxth	r4, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	18d3      	adds	r3, r2, r3
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <USB_DeactivateEndpoint+0x2e0>)
 8003eae:	4322      	orrs	r2, r4
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4a46      	ldr	r2, [pc, #280]	; (8003fdc <USB_DeactivateEndpoint+0x2dc>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	18d3      	adds	r3, r2, r3
 8003ed2:	4a43      	ldr	r2, [pc, #268]	; (8003fe0 <USB_DeactivateEndpoint+0x2e0>)
 8003ed4:	4322      	orrs	r2, r4
 8003ed6:	b292      	uxth	r2, r2
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	e075      	b.n	8003fc8 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	18d3      	adds	r3, r2, r3
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29c      	uxth	r4, r3
 8003eea:	0022      	movs	r2, r4
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	01db      	lsls	r3, r3, #7
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d012      	beq.n	8003f1a <USB_DeactivateEndpoint+0x21a>
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	18d3      	adds	r3, r2, r3
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	b29c      	uxth	r4, r3
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	18d3      	adds	r3, r2, r3
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <USB_DeactivateEndpoint+0x2e4>)
 8003f14:	4322      	orrs	r2, r4
 8003f16:	b292      	uxth	r2, r2
 8003f18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	18d3      	adds	r3, r2, r3
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29c      	uxth	r4, r3
 8003f28:	0022      	movs	r2, r4
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d012      	beq.n	8003f56 <USB_DeactivateEndpoint+0x256>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	18d3      	adds	r3, r2, r3
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	b29c      	uxth	r4, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <USB_DeactivateEndpoint+0x2d8>)
 8003f50:	4322      	orrs	r2, r4
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <USB_DeactivateEndpoint+0x2d4>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	b29c      	uxth	r4, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	18d3      	adds	r3, r2, r3
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <USB_DeactivateEndpoint+0x2e4>)
 8003f76:	4322      	orrs	r2, r4
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	18d3      	adds	r3, r2, r3
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <USB_DeactivateEndpoint+0x2dc>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29c      	uxth	r4, r3
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <USB_DeactivateEndpoint+0x2e0>)
 8003f9c:	4322      	orrs	r2, r4
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	18d3      	adds	r3, r2, r3
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <USB_DeactivateEndpoint+0x2e8>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b29c      	uxth	r4, r3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <USB_DeactivateEndpoint+0x2e0>)
 8003fc2:	4322      	orrs	r2, r4
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b003      	add	sp, #12
 8003fd0:	bd90      	pop	{r4, r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	ffff8f8f 	.word	0xffff8f8f
 8003fd8:	ffff80c0 	.word	0xffff80c0
 8003fdc:	ffff8fbf 	.word	0xffff8fbf
 8003fe0:	ffff8080 	.word	0xffff8080
 8003fe4:	ffffc080 	.word	0xffffc080
 8003fe8:	ffffbf8f 	.word	0xffffbf8f

08003fec <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b095      	sub	sp, #84	; 0x54
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d000      	beq.n	8004000 <USB_EPStartXfer+0x14>
 8003ffe:	e163      	b.n	80042c8 <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d909      	bls.n	8004020 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004018:	1ad2      	subs	r2, r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	e005      	b.n	800402c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	7b1b      	ldrb	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11b      	bne.n	800406c <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6959      	ldr	r1, [r3, #20]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	88da      	ldrh	r2, [r3, #6]
 800403c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403e:	b29b      	uxth	r3, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fbbb 	bl	80047bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004046:	687c      	ldr	r4, [r7, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2250      	movs	r2, #80	; 0x50
 800404c:	5a9b      	ldrh	r3, [r3, r2]
 800404e:	b29b      	uxth	r3, r3
 8004050:	18e4      	adds	r4, r4, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	18e3      	adds	r3, r4, r3
 800405a:	4acc      	ldr	r2, [pc, #816]	; (800438c <USB_EPStartXfer+0x3a0>)
 800405c:	4694      	mov	ip, r2
 800405e:	4463      	add	r3, ip
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	e113      	b.n	8004294 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	001a      	movs	r2, r3
 800407c:	2340      	movs	r3, #64	; 0x40
 800407e:	4013      	ands	r3, r2
 8004080:	d067      	beq.n	8004152 <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004082:	687c      	ldr	r4, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d147      	bne.n	800411c <USB_EPStartXfer+0x130>
 800408c:	687c      	ldr	r4, [r7, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2250      	movs	r2, #80	; 0x50
 8004092:	5a9b      	ldrh	r3, [r3, r2]
 8004094:	b29b      	uxth	r3, r3
 8004096:	18e4      	adds	r4, r4, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	18e3      	adds	r3, r4, r3
 80040a0:	4abb      	ldr	r2, [pc, #748]	; (8004390 <USB_EPStartXfer+0x3a4>)
 80040a2:	4694      	mov	ip, r2
 80040a4:	4463      	add	r3, ip
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10e      	bne.n	80040cc <USB_EPStartXfer+0xe0>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	4ab8      	ldr	r2, [pc, #736]	; (8004394 <USB_EPStartXfer+0x3a8>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	4ab5      	ldr	r2, [pc, #724]	; (8004398 <USB_EPStartXfer+0x3ac>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e03c      	b.n	8004146 <USB_EPStartXfer+0x15a>
 80040cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ce:	2b3e      	cmp	r3, #62	; 0x3e
 80040d0:	d810      	bhi.n	80040f4 <USB_EPStartXfer+0x108>
 80040d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	2201      	movs	r2, #1
 80040dc:	4013      	ands	r3, r2
 80040de:	d002      	beq.n	80040e6 <USB_EPStartXfer+0xfa>
 80040e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e2:	3301      	adds	r3, #1
 80040e4:	647b      	str	r3, [r7, #68]	; 0x44
 80040e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	e028      	b.n	8004146 <USB_EPStartXfer+0x15a>
 80040f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	647b      	str	r3, [r7, #68]	; 0x44
 80040fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fc:	221f      	movs	r2, #31
 80040fe:	4013      	ands	r3, r2
 8004100:	d102      	bne.n	8004108 <USB_EPStartXfer+0x11c>
 8004102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004104:	3b01      	subs	r3, #1
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
 8004108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410a:	b29b      	uxth	r3, r3
 800410c:	029b      	lsls	r3, r3, #10
 800410e:	b29b      	uxth	r3, r3
 8004110:	4aa1      	ldr	r2, [pc, #644]	; (8004398 <USB_EPStartXfer+0x3ac>)
 8004112:	4313      	orrs	r3, r2
 8004114:	b29a      	uxth	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	e014      	b.n	8004146 <USB_EPStartXfer+0x15a>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d110      	bne.n	8004146 <USB_EPStartXfer+0x15a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2250      	movs	r2, #80	; 0x50
 8004128:	5a9b      	ldrh	r3, [r3, r2]
 800412a:	b29b      	uxth	r3, r3
 800412c:	18e4      	adds	r4, r4, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	18e3      	adds	r3, r4, r3
 8004136:	4a96      	ldr	r2, [pc, #600]	; (8004390 <USB_EPStartXfer+0x3a4>)
 8004138:	4694      	mov	ip, r2
 800413a:	4463      	add	r3, ip
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004140:	b29a      	uxth	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004146:	234e      	movs	r3, #78	; 0x4e
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	8952      	ldrh	r2, [r2, #10]
 800414e:	801a      	strh	r2, [r3, #0]
 8004150:	e066      	b.n	8004220 <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d147      	bne.n	80041ea <USB_EPStartXfer+0x1fe>
 800415a:	687c      	ldr	r4, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2250      	movs	r2, #80	; 0x50
 8004160:	5a9b      	ldrh	r3, [r3, r2]
 8004162:	b29b      	uxth	r3, r3
 8004164:	18e4      	adds	r4, r4, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	18e3      	adds	r3, r4, r3
 800416e:	4a87      	ldr	r2, [pc, #540]	; (800438c <USB_EPStartXfer+0x3a0>)
 8004170:	4694      	mov	ip, r2
 8004172:	4463      	add	r3, ip
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10e      	bne.n	800419a <USB_EPStartXfer+0x1ae>
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	4a84      	ldr	r2, [pc, #528]	; (8004394 <USB_EPStartXfer+0x3a8>)
 8004182:	4013      	ands	r3, r2
 8004184:	b29a      	uxth	r2, r3
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	4a82      	ldr	r2, [pc, #520]	; (8004398 <USB_EPStartXfer+0x3ac>)
 8004190:	4313      	orrs	r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	e03d      	b.n	8004216 <USB_EPStartXfer+0x22a>
 800419a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419c:	2b3e      	cmp	r3, #62	; 0x3e
 800419e:	d810      	bhi.n	80041c2 <USB_EPStartXfer+0x1d6>
 80041a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	643b      	str	r3, [r7, #64]	; 0x40
 80041a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d002      	beq.n	80041b4 <USB_EPStartXfer+0x1c8>
 80041ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b0:	3301      	adds	r3, #1
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
 80041b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	e029      	b.n	8004216 <USB_EPStartXfer+0x22a>
 80041c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
 80041c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ca:	221f      	movs	r2, #31
 80041cc:	4013      	ands	r3, r2
 80041ce:	d102      	bne.n	80041d6 <USB_EPStartXfer+0x1ea>
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	3b01      	subs	r3, #1
 80041d4:	643b      	str	r3, [r7, #64]	; 0x40
 80041d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d8:	b29b      	uxth	r3, r3
 80041da:	029b      	lsls	r3, r3, #10
 80041dc:	b29b      	uxth	r3, r3
 80041de:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <USB_EPStartXfer+0x3ac>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	e015      	b.n	8004216 <USB_EPStartXfer+0x22a>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d111      	bne.n	8004216 <USB_EPStartXfer+0x22a>
 80041f2:	687c      	ldr	r4, [r7, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2250      	movs	r2, #80	; 0x50
 80041f8:	5a9b      	ldrh	r3, [r3, r2]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	18e4      	adds	r4, r4, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	18e3      	adds	r3, r4, r3
 8004206:	4a61      	ldr	r2, [pc, #388]	; (800438c <USB_EPStartXfer+0x3a0>)
 8004208:	4694      	mov	ip, r2
 800420a:	4463      	add	r3, ip
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004210:	b29a      	uxth	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004216:	234e      	movs	r3, #78	; 0x4e
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	8912      	ldrh	r2, [r2, #8]
 800421e:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6959      	ldr	r1, [r3, #20]
 8004224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004226:	b29c      	uxth	r4, r3
 8004228:	234e      	movs	r3, #78	; 0x4e
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	0023      	movs	r3, r4
 8004232:	f000 fac3 	bl	80047bc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <USB_EPStartXfer+0x27a>
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	4a53      	ldr	r2, [pc, #332]	; (800439c <USB_EPStartXfer+0x3b0>)
 800424e:	4013      	ands	r3, r2
 8004250:	b29c      	uxth	r4, r3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	18d3      	adds	r3, r2, r3
 800425c:	4a50      	ldr	r2, [pc, #320]	; (80043a0 <USB_EPStartXfer+0x3b4>)
 800425e:	4322      	orrs	r2, r4
 8004260:	b292      	uxth	r2, r2
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	e016      	b.n	8004294 <USB_EPStartXfer+0x2a8>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d112      	bne.n	8004294 <USB_EPStartXfer+0x2a8>
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	18d3      	adds	r3, r2, r3
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	4a47      	ldr	r2, [pc, #284]	; (800439c <USB_EPStartXfer+0x3b0>)
 800427e:	4013      	ands	r3, r2
 8004280:	b29c      	uxth	r4, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	18d3      	adds	r3, r2, r3
 800428c:	4a45      	ldr	r2, [pc, #276]	; (80043a4 <USB_EPStartXfer+0x3b8>)
 800428e:	4322      	orrs	r2, r4
 8004290:	b292      	uxth	r2, r2
 8004292:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <USB_EPStartXfer+0x3bc>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29c      	uxth	r4, r3
 80042a8:	2310      	movs	r3, #16
 80042aa:	4063      	eors	r3, r4
 80042ac:	b29c      	uxth	r4, r3
 80042ae:	2320      	movs	r3, #32
 80042b0:	4063      	eors	r3, r4
 80042b2:	b29c      	uxth	r4, r3
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	18d3      	adds	r3, r2, r3
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <USB_EPStartXfer+0x3c0>)
 80042c0:	4322      	orrs	r2, r4
 80042c2:	b292      	uxth	r2, r2
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	e152      	b.n	800456e <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699a      	ldr	r2, [r3, #24]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d909      	bls.n	80042e8 <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	1ad2      	subs	r2, r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	619a      	str	r2, [r3, #24]
 80042e6:	e005      	b.n	80042f4 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	7b1b      	ldrb	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d159      	bne.n	80043b0 <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042fc:	687c      	ldr	r4, [r7, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2250      	movs	r2, #80	; 0x50
 8004302:	5a9b      	ldrh	r3, [r3, r2]
 8004304:	b29b      	uxth	r3, r3
 8004306:	18e4      	adds	r4, r4, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	18e3      	adds	r3, r4, r3
 8004310:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <USB_EPStartXfer+0x3a4>)
 8004312:	4694      	mov	ip, r2
 8004314:	4463      	add	r3, ip
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10e      	bne.n	800433c <USB_EPStartXfer+0x350>
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <USB_EPStartXfer+0x3a8>)
 8004324:	4013      	ands	r3, r2
 8004326:	b29a      	uxth	r2, r3
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <USB_EPStartXfer+0x3ac>)
 8004332:	4313      	orrs	r3, r2
 8004334:	b29a      	uxth	r2, r3
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	e0fd      	b.n	8004538 <USB_EPStartXfer+0x54c>
 800433c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433e:	2b3e      	cmp	r3, #62	; 0x3e
 8004340:	d810      	bhi.n	8004364 <USB_EPStartXfer+0x378>
 8004342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434a:	2201      	movs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	d002      	beq.n	8004356 <USB_EPStartXfer+0x36a>
 8004350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004352:	3301      	adds	r3, #1
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	b29b      	uxth	r3, r3
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	b29a      	uxth	r2, r3
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	e0e9      	b.n	8004538 <USB_EPStartXfer+0x54c>
 8004364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436c:	221f      	movs	r2, #31
 800436e:	4013      	ands	r3, r2
 8004370:	d102      	bne.n	8004378 <USB_EPStartXfer+0x38c>
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	3b01      	subs	r3, #1
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	b29b      	uxth	r3, r3
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	b29b      	uxth	r3, r3
 8004380:	4a05      	ldr	r2, [pc, #20]	; (8004398 <USB_EPStartXfer+0x3ac>)
 8004382:	4313      	orrs	r3, r2
 8004384:	b29a      	uxth	r2, r3
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e0d5      	b.n	8004538 <USB_EPStartXfer+0x54c>
 800438c:	00000402 	.word	0x00000402
 8004390:	00000406 	.word	0x00000406
 8004394:	ffff83ff 	.word	0xffff83ff
 8004398:	ffff8000 	.word	0xffff8000
 800439c:	ffff8f8f 	.word	0xffff8f8f
 80043a0:	ffff80c0 	.word	0xffff80c0
 80043a4:	ffffc080 	.word	0xffffc080
 80043a8:	ffff8fbf 	.word	0xffff8fbf
 80043ac:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	785b      	ldrb	r3, [r3, #1]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d147      	bne.n	8004448 <USB_EPStartXfer+0x45c>
 80043b8:	687c      	ldr	r4, [r7, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2250      	movs	r2, #80	; 0x50
 80043be:	5a9b      	ldrh	r3, [r3, r2]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	18e4      	adds	r4, r4, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	18e3      	adds	r3, r4, r3
 80043cc:	4a6a      	ldr	r2, [pc, #424]	; (8004578 <USB_EPStartXfer+0x58c>)
 80043ce:	4694      	mov	ip, r2
 80043d0:	4463      	add	r3, ip
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10e      	bne.n	80043f8 <USB_EPStartXfer+0x40c>
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	4a67      	ldr	r2, [pc, #412]	; (800457c <USB_EPStartXfer+0x590>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	4a64      	ldr	r2, [pc, #400]	; (8004580 <USB_EPStartXfer+0x594>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e03d      	b.n	8004474 <USB_EPStartXfer+0x488>
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	2b3e      	cmp	r3, #62	; 0x3e
 80043fc:	d810      	bhi.n	8004420 <USB_EPStartXfer+0x434>
 80043fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
 8004404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004406:	2201      	movs	r2, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d002      	beq.n	8004412 <USB_EPStartXfer+0x426>
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	3301      	adds	r3, #1
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	b29b      	uxth	r3, r3
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	b29a      	uxth	r2, r3
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	e029      	b.n	8004474 <USB_EPStartXfer+0x488>
 8004420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	63bb      	str	r3, [r7, #56]	; 0x38
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	221f      	movs	r2, #31
 800442a:	4013      	ands	r3, r2
 800442c:	d102      	bne.n	8004434 <USB_EPStartXfer+0x448>
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	3b01      	subs	r3, #1
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	b29b      	uxth	r3, r3
 8004438:	029b      	lsls	r3, r3, #10
 800443a:	b29b      	uxth	r3, r3
 800443c:	4a50      	ldr	r2, [pc, #320]	; (8004580 <USB_EPStartXfer+0x594>)
 800443e:	4313      	orrs	r3, r2
 8004440:	b29a      	uxth	r2, r3
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e015      	b.n	8004474 <USB_EPStartXfer+0x488>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d111      	bne.n	8004474 <USB_EPStartXfer+0x488>
 8004450:	687c      	ldr	r4, [r7, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2250      	movs	r2, #80	; 0x50
 8004456:	5a9b      	ldrh	r3, [r3, r2]
 8004458:	b29b      	uxth	r3, r3
 800445a:	18e4      	adds	r4, r4, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	18e3      	adds	r3, r4, r3
 8004464:	4a44      	ldr	r2, [pc, #272]	; (8004578 <USB_EPStartXfer+0x58c>)
 8004466:	4694      	mov	ip, r2
 8004468:	4463      	add	r3, ip
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
 800446c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446e:	b29a      	uxth	r2, r3
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	687c      	ldr	r4, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	785b      	ldrb	r3, [r3, #1]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d147      	bne.n	800450e <USB_EPStartXfer+0x522>
 800447e:	687c      	ldr	r4, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2250      	movs	r2, #80	; 0x50
 8004484:	5a9b      	ldrh	r3, [r3, r2]
 8004486:	b29b      	uxth	r3, r3
 8004488:	18e4      	adds	r4, r4, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	18e3      	adds	r3, r4, r3
 8004492:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <USB_EPStartXfer+0x598>)
 8004494:	4694      	mov	ip, r2
 8004496:	4463      	add	r3, ip
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
 800449a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10e      	bne.n	80044be <USB_EPStartXfer+0x4d2>
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	4a35      	ldr	r2, [pc, #212]	; (800457c <USB_EPStartXfer+0x590>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	4a33      	ldr	r2, [pc, #204]	; (8004580 <USB_EPStartXfer+0x594>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e03c      	b.n	8004538 <USB_EPStartXfer+0x54c>
 80044be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c0:	2b3e      	cmp	r3, #62	; 0x3e
 80044c2:	d810      	bhi.n	80044e6 <USB_EPStartXfer+0x4fa>
 80044c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044cc:	2201      	movs	r2, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	d002      	beq.n	80044d8 <USB_EPStartXfer+0x4ec>
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	3301      	adds	r3, #1
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e028      	b.n	8004538 <USB_EPStartXfer+0x54c>
 80044e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ee:	221f      	movs	r2, #31
 80044f0:	4013      	ands	r3, r2
 80044f2:	d102      	bne.n	80044fa <USB_EPStartXfer+0x50e>
 80044f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f6:	3b01      	subs	r3, #1
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	b29b      	uxth	r3, r3
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <USB_EPStartXfer+0x594>)
 8004504:	4313      	orrs	r3, r2
 8004506:	b29a      	uxth	r2, r3
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e014      	b.n	8004538 <USB_EPStartXfer+0x54c>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d110      	bne.n	8004538 <USB_EPStartXfer+0x54c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2250      	movs	r2, #80	; 0x50
 800451a:	5a9b      	ldrh	r3, [r3, r2]
 800451c:	b29b      	uxth	r3, r3
 800451e:	18e4      	adds	r4, r4, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	4a16      	ldr	r2, [pc, #88]	; (8004584 <USB_EPStartXfer+0x598>)
 800452a:	4694      	mov	ip, r2
 800452c:	4463      	add	r3, ip
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004532:	b29a      	uxth	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	18d3      	adds	r3, r2, r3
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <USB_EPStartXfer+0x59c>)
 8004548:	4013      	ands	r3, r2
 800454a:	b29c      	uxth	r4, r3
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	015b      	lsls	r3, r3, #5
 8004550:	4063      	eors	r3, r4
 8004552:	b29c      	uxth	r4, r3
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	019b      	lsls	r3, r3, #6
 8004558:	4063      	eors	r3, r4
 800455a:	b29c      	uxth	r4, r3
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <USB_EPStartXfer+0x5a0>)
 8004568:	4322      	orrs	r2, r4
 800456a:	b292      	uxth	r2, r2
 800456c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b015      	add	sp, #84	; 0x54
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	00000402 	.word	0x00000402
 800457c:	ffff83ff 	.word	0xffff83ff
 8004580:	ffff8000 	.word	0xffff8000
 8004584:	00000406 	.word	0x00000406
 8004588:	ffffbf8f 	.word	0xffffbf8f
 800458c:	ffff8080 	.word	0xffff8080

08004590 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	18d3      	adds	r3, r2, r3
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <USB_EPSetStall+0x78>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29c      	uxth	r4, r3
 80045b6:	2310      	movs	r3, #16
 80045b8:	4063      	eors	r3, r4
 80045ba:	b29c      	uxth	r4, r3
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	18d3      	adds	r3, r2, r3
 80045c6:	4a11      	ldr	r2, [pc, #68]	; (800460c <USB_EPSetStall+0x7c>)
 80045c8:	4322      	orrs	r2, r4
 80045ca:	b292      	uxth	r2, r2
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	e016      	b.n	80045fe <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	18d3      	adds	r3, r2, r3
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <USB_EPSetStall+0x80>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	b29c      	uxth	r4, r3
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	015b      	lsls	r3, r3, #5
 80045e8:	4063      	eors	r3, r4
 80045ea:	b29c      	uxth	r4, r3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <USB_EPSetStall+0x7c>)
 80045f8:	4322      	orrs	r2, r4
 80045fa:	b292      	uxth	r2, r2
 80045fc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b003      	add	sp, #12
 8004606:	bd90      	pop	{r4, r7, pc}
 8004608:	ffff8fbf 	.word	0xffff8fbf
 800460c:	ffff8080 	.word	0xffff8080
 8004610:	ffffbf8f 	.word	0xffffbf8f

08004614 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	7b1b      	ldrb	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d000      	beq.n	8004628 <USB_EPClearStall+0x14>
 8004626:	e076      	b.n	8004716 <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d038      	beq.n	80046a2 <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	18d3      	adds	r3, r2, r3
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29c      	uxth	r4, r3
 800463e:	0022      	movs	r2, r4
 8004640:	2340      	movs	r3, #64	; 0x40
 8004642:	4013      	ands	r3, r2
 8004644:	d012      	beq.n	800466c <USB_EPClearStall+0x58>
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	18d3      	adds	r3, r2, r3
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	4a32      	ldr	r2, [pc, #200]	; (8004720 <USB_EPClearStall+0x10c>)
 8004656:	4013      	ands	r3, r2
 8004658:	b29c      	uxth	r4, r3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <USB_EPClearStall+0x110>)
 8004666:	4322      	orrs	r2, r4
 8004668:	b292      	uxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d050      	beq.n	8004716 <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	18d3      	adds	r3, r2, r3
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	4a29      	ldr	r2, [pc, #164]	; (8004728 <USB_EPClearStall+0x114>)
 8004684:	4013      	ands	r3, r2
 8004686:	b29c      	uxth	r4, r3
 8004688:	2320      	movs	r3, #32
 800468a:	4063      	eors	r3, r4
 800468c:	b29c      	uxth	r4, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	18d3      	adds	r3, r2, r3
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <USB_EPClearStall+0x118>)
 800469a:	4322      	orrs	r2, r4
 800469c:	b292      	uxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e039      	b.n	8004716 <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29c      	uxth	r4, r3
 80046b0:	0022      	movs	r2, r4
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	01db      	lsls	r3, r3, #7
 80046b6:	4013      	ands	r3, r2
 80046b8:	d012      	beq.n	80046e0 <USB_EPClearStall+0xcc>
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	18d3      	adds	r3, r2, r3
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4a15      	ldr	r2, [pc, #84]	; (8004720 <USB_EPClearStall+0x10c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	b29c      	uxth	r4, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	18d3      	adds	r3, r2, r3
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <USB_EPClearStall+0x11c>)
 80046da:	4322      	orrs	r2, r4
 80046dc:	b292      	uxth	r2, r2
 80046de:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4a11      	ldr	r2, [pc, #68]	; (8004734 <USB_EPClearStall+0x120>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29c      	uxth	r4, r3
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	015b      	lsls	r3, r3, #5
 80046f8:	4063      	eors	r3, r4
 80046fa:	b29c      	uxth	r4, r3
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	019b      	lsls	r3, r3, #6
 8004700:	4063      	eors	r3, r4
 8004702:	b29c      	uxth	r4, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	18d3      	adds	r3, r2, r3
 800470e:	4a07      	ldr	r2, [pc, #28]	; (800472c <USB_EPClearStall+0x118>)
 8004710:	4322      	orrs	r2, r4
 8004712:	b292      	uxth	r2, r2
 8004714:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b003      	add	sp, #12
 800471e:	bd90      	pop	{r4, r7, pc}
 8004720:	ffff8f8f 	.word	0xffff8f8f
 8004724:	ffff80c0 	.word	0xffff80c0
 8004728:	ffff8fbf 	.word	0xffff8fbf
 800472c:	ffff8080 	.word	0xffff8080
 8004730:	ffffc080 	.word	0xffffc080
 8004734:	ffffbf8f 	.word	0xffffbf8f

08004738 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	000a      	movs	r2, r1
 8004742:	1cfb      	adds	r3, r7, #3
 8004744:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8004746:	1cfb      	adds	r3, r7, #3
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	224c      	movs	r2, #76	; 0x4c
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b002      	add	sp, #8
 800475e:	bd80      	pop	{r7, pc}

08004760 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2258      	movs	r2, #88	; 0x58
 800476c:	5a9b      	ldrh	r3, [r3, r2]
 800476e:	b29b      	uxth	r3, r3
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <USB_DevConnect+0x28>)
 8004772:	4313      	orrs	r3, r2
 8004774:	b299      	uxth	r1, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2258      	movs	r2, #88	; 0x58
 800477a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	ffff8000 	.word	0xffff8000

0800478c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2244      	movs	r2, #68	; 0x44
 8004798:	5a9b      	ldrh	r3, [r3, r2]
 800479a:	b29b      	uxth	r3, r3
 800479c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b004      	add	sp, #16
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b002      	add	sp, #8
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	; 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	0019      	movs	r1, r3
 80047c8:	1dbb      	adds	r3, r7, #6
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	1d3b      	adds	r3, r7, #4
 80047ce:	1c0a      	adds	r2, r1, #0
 80047d0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047e4:	1dbb      	adds	r3, r7, #6
 80047e6:	881a      	ldrh	r2, [r3, #0]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	18d3      	adds	r3, r2, r3
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	00d2      	lsls	r2, r2, #3
 80047f0:	4694      	mov	ip, r2
 80047f2:	4463      	add	r3, ip
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fa:	e01b      	b.n	8004834 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	3301      	adds	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	b29b      	uxth	r3, r3
 8004812:	001a      	movs	r2, r3
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	b29a      	uxth	r2, r3
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	3302      	adds	r3, #2
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	3301      	adds	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	3b01      	subs	r3, #1
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e0      	bne.n	80047fc <USB_WritePMA+0x40>
  }
}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	b00c      	add	sp, #48	; 0x30
 8004840:	bd80      	pop	{r7, pc}

08004842 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b08a      	sub	sp, #40	; 0x28
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	0019      	movs	r1, r3
 800484e:	1dbb      	adds	r3, r7, #6
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	1c0a      	adds	r2, r1, #0
 8004856:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	b29b      	uxth	r3, r3
 8004860:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800486a:	1dbb      	adds	r3, r7, #6
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	18d3      	adds	r3, r2, r3
 8004872:	2280      	movs	r2, #128	; 0x80
 8004874:	00d2      	lsls	r2, r2, #3
 8004876:	4694      	mov	ip, r2
 8004878:	4463      	add	r3, ip
 800487a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
 8004880:	e018      	b.n	80048b4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	3302      	adds	r3, #2
 800488e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3301      	adds	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	3b01      	subs	r3, #1
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e3      	bne.n	8004882 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	701a      	strb	r2, [r3, #0]
  }
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b00a      	add	sp, #40	; 0x28
 80048de:	bd80      	pop	{r7, pc}

080048e0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	000a      	movs	r2, r1
 80048ea:	1cfb      	adds	r3, r7, #3
 80048ec:	701a      	strb	r2, [r3, #0]

  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP in */
  USBD_LL_OpenEP(pdev, 0x83, USBD_EP_TYPE_ISOC, 4*AUDIO_OUT_PACKET);
 80048ee:	23f0      	movs	r3, #240	; 0xf0
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	2183      	movs	r1, #131	; 0x83
 80048f8:	f001 ffca 	bl	8006890 <USBD_LL_OpenEP>
  pdev->ep_in[0x83U & 0xFU].is_used = 1U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	655a      	str	r2, [r3, #84]	; 0x54


  /* Allocate Audio structure */
    pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <USBD_AUDIO_Init+0x70>)
 8004904:	0018      	movs	r0, r3
 8004906:	f002 f945 	bl	8006b94 <USBD_static_malloc>
 800490a:	0001      	movs	r1, r0
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	23ae      	movs	r3, #174	; 0xae
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	50d1      	str	r1, [r2, r3]
    haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	23ae      	movs	r3, #174	; 0xae
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	58d3      	ldr	r3, [r2, r3]
 800491c:	60fb      	str	r3, [r7, #12]
	haudio->alt_setting = 0U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
	haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a0b      	ldr	r2, [pc, #44]	; (8004954 <USBD_AUDIO_Init+0x74>)
 8004928:	2103      	movs	r1, #3
 800492a:	5499      	strb	r1, [r3, r2]
	haudio->wr_ptr = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <USBD_AUDIO_Init+0x78>)
 8004930:	2100      	movs	r1, #0
 8004932:	5299      	strh	r1, [r3, r2]
	haudio->rd_ptr = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <USBD_AUDIO_Init+0x7c>)
 8004938:	2100      	movs	r1, #0
 800493a:	5299      	strh	r1, [r3, r2]
	haudio->rd_enable = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a08      	ldr	r2, [pc, #32]	; (8004960 <USBD_AUDIO_Init+0x80>)
 8004940:	2100      	movs	r1, #0
 8004942:	5499      	strb	r1, [r3, r2]
//	USBD_LL_PrepareReceive(pdev, 0x83U, NULL, 0U);
return USBD_OK;
 8004944:	2300      	movs	r3, #0
//    USBD_LL_PrepareReceive(pdev, 0x03, haudio->buffer,
//                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b004      	add	sp, #16
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	000025d0 	.word	0x000025d0
 8004954:	00002584 	.word	0x00002584
 8004958:	00002588 	.word	0x00002588
 800495c:	00002586 	.word	0x00002586
 8004960:	00002585 	.word	0x00002585

08004964 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	000a      	movs	r2, r1
 800496e:	1cfb      	adds	r3, r7, #3
 8004970:	701a      	strb	r2, [r3, #0]
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, 0x83);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2183      	movs	r1, #131	; 0x83
 8004976:	0018      	movs	r0, r3
 8004978:	f001 ffc1 	bl	80068fe <USBD_LL_CloseEP>
  pdev->ep_in[0x83 & 0xFU].is_used = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	655a      	str	r2, [r3, #84]	; 0x54

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	23ae      	movs	r3, #174	; 0xae
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	58d3      	ldr	r3, [r2, r3]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d012      	beq.n	80049b4 <USBD_AUDIO_DeInit+0x50>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	23af      	movs	r3, #175	; 0xaf
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	58d3      	ldr	r3, [r2, r3]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2000      	movs	r0, #0
 800499a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	23ae      	movs	r3, #174	; 0xae
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	58d3      	ldr	r3, [r2, r3]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f002 f904 	bl	8006bb2 <USBD_static_free>
    pdev->pClassData = NULL;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	23ae      	movs	r3, #174	; 0xae
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	2100      	movs	r1, #0
 80049b2:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80049ca:	2308      	movs	r3, #8
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	2200      	movs	r2, #0
 80049d0:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80049d2:	2317      	movs	r3, #23
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	23ae      	movs	r3, #174	; 0xae
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	58d3      	ldr	r3, [r2, r3]
 80049e2:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	001a      	movs	r2, r3
 80049ea:	2360      	movs	r3, #96	; 0x60
 80049ec:	4013      	ands	r3, r2
 80049ee:	d022      	beq.n	8004a36 <USBD_AUDIO_Setup+0x76>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d000      	beq.n	80049f6 <USBD_AUDIO_Setup+0x36>
 80049f4:	e0ac      	b.n	8004b50 <USBD_AUDIO_Setup+0x190>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d008      	beq.n	8004a10 <USBD_AUDIO_Setup+0x50>
 80049fe:	2b81      	cmp	r3, #129	; 0x81
 8004a00:	d10d      	bne.n	8004a1e <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	0011      	movs	r1, r2
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f9bb 	bl	8004d84 <AUDIO_REQ_GetCurrent>
          break;
 8004a0e:	e011      	b.n	8004a34 <USBD_AUDIO_Setup+0x74>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0011      	movs	r1, r2
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 f9d6 	bl	8004dc8 <AUDIO_REQ_SetCurrent>
          break;
 8004a1c:	e00a      	b.n	8004a34 <USBD_AUDIO_Setup+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	0011      	movs	r1, r2
 8004a24:	0018      	movs	r0, r3
 8004a26:	f001 fb2c 	bl	8006082 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a2a:	2317      	movs	r3, #23
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	2202      	movs	r2, #2
 8004a30:	701a      	strb	r2, [r3, #0]
          break;
 8004a32:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004a34:	e097      	b.n	8004b66 <USBD_AUDIO_Setup+0x1a6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d021      	beq.n	8004a82 <USBD_AUDIO_Setup+0xc2>
 8004a3e:	dc02      	bgt.n	8004a46 <USBD_AUDIO_Setup+0x86>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <USBD_AUDIO_Setup+0x90>
 8004a44:	e077      	b.n	8004b36 <USBD_AUDIO_Setup+0x176>
 8004a46:	2b0a      	cmp	r3, #10
 8004a48:	d035      	beq.n	8004ab6 <USBD_AUDIO_Setup+0xf6>
 8004a4a:	2b0b      	cmp	r3, #11
 8004a4c:	d04b      	beq.n	8004ae6 <USBD_AUDIO_Setup+0x126>
 8004a4e:	e072      	b.n	8004b36 <USBD_AUDIO_Setup+0x176>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	23a7      	movs	r3, #167	; 0xa7
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d107      	bne.n	8004a6c <USBD_AUDIO_Setup+0xac>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	18f9      	adds	r1, r7, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f001 fb8b 	bl	8006180 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a6a:	e070      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>
            USBD_CtlError(pdev, req);
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0011      	movs	r1, r2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f001 fb05 	bl	8006082 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a78:	2317      	movs	r3, #23
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	701a      	strb	r2, [r3, #0]
          break;
 8004a80:	e065      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	885b      	ldrh	r3, [r3, #2]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b21      	cmp	r3, #33	; 0x21
 8004a8c:	d15e      	bne.n	8004b4c <USBD_AUDIO_Setup+0x18c>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8004a8e:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <USBD_AUDIO_Setup+0x1b4>)
 8004a90:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	88db      	ldrh	r3, [r3, #6]
 8004a96:	220a      	movs	r2, #10
 8004a98:	18ba      	adds	r2, r7, r2
 8004a9a:	b299      	uxth	r1, r3
 8004a9c:	2909      	cmp	r1, #9
 8004a9e:	d900      	bls.n	8004aa2 <USBD_AUDIO_Setup+0xe2>
 8004aa0:	2309      	movs	r3, #9
 8004aa2:	8013      	strh	r3, [r2, #0]

            USBD_CtlSendData(pdev, pbuf, len);
 8004aa4:	230a      	movs	r3, #10
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f001 fb66 	bl	8006180 <USBD_CtlSendData>
          }
          break;
 8004ab4:	e04a      	b.n	8004b4c <USBD_AUDIO_Setup+0x18c>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	23a7      	movs	r3, #167	; 0xa7
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d106      	bne.n	8004ad0 <USBD_AUDIO_Setup+0x110>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f001 fb59 	bl	8006180 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ace:	e03e      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>
            USBD_CtlError(pdev, req);
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f001 fad3 	bl	8006082 <USBD_CtlError>
            ret = USBD_FAIL;
 8004adc:	2317      	movs	r3, #23
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	701a      	strb	r2, [r3, #0]
          break;
 8004ae4:	e033      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	23a7      	movs	r3, #167	; 0xa7
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d116      	bne.n	8004b20 <USBD_AUDIO_Setup+0x160>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	885b      	ldrh	r3, [r3, #2]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d806      	bhi.n	8004b0a <USBD_AUDIO_Setup+0x14a>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	885b      	ldrh	r3, [r3, #2]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	001a      	movs	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b08:	e021      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>
              USBD_CtlError(pdev, req);
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	0011      	movs	r1, r2
 8004b10:	0018      	movs	r0, r3
 8004b12:	f001 fab6 	bl	8006082 <USBD_CtlError>
              ret = USBD_FAIL;
 8004b16:	2317      	movs	r3, #23
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	701a      	strb	r2, [r3, #0]
          break;
 8004b1e:	e016      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>
            USBD_CtlError(pdev, req);
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0011      	movs	r1, r2
 8004b26:	0018      	movs	r0, r3
 8004b28:	f001 faab 	bl	8006082 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b2c:	2317      	movs	r3, #23
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2202      	movs	r2, #2
 8004b32:	701a      	strb	r2, [r3, #0]
          break;
 8004b34:	e00b      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>

        default:
          USBD_CtlError(pdev, req);
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f001 faa0 	bl	8006082 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b42:	2317      	movs	r3, #23
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2202      	movs	r2, #2
 8004b48:	701a      	strb	r2, [r3, #0]
          break;
 8004b4a:	e000      	b.n	8004b4e <USBD_AUDIO_Setup+0x18e>
          break;
 8004b4c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004b4e:	e00a      	b.n	8004b66 <USBD_AUDIO_Setup+0x1a6>
    default:
      USBD_CtlError(pdev, req);
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0011      	movs	r1, r2
 8004b56:	0018      	movs	r0, r3
 8004b58:	f001 fa93 	bl	8006082 <USBD_CtlError>
      ret = USBD_FAIL;
 8004b5c:	2317      	movs	r3, #23
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2202      	movs	r2, #2
 8004b62:	701a      	strb	r2, [r3, #0]
      break;
 8004b64:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004b66:	2317      	movs	r3, #23
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b006      	add	sp, #24
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000056 	.word	0x20000056

08004b78 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_CfgDesc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	226d      	movs	r2, #109	; 0x6d
 8004b84:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8004b86:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <USBD_AUDIO_GetCfgDesc+0x18>)
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000044 	.word	0x20000044

08004b94 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	000a      	movs	r2, r1
 8004b9e:	1cfb      	adds	r3, r7, #3
 8004ba0:	701a      	strb	r2, [r3, #0]
	USBD_AUDIO_HandleTypeDef   *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	23ae      	movs	r3, #174	; 0xae
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	58d3      	ldr	r3, [r2, r3]
 8004baa:	60bb      	str	r3, [r7, #8]
	if(1)
	{
		for(uint8_t i = 0; i < 120; i=i+2)
 8004bac:	230f      	movs	r3, #15
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e014      	b.n	8004be0 <USBD_AUDIO_DataIn+0x4c>
		{
			fakedata[i+1] = 120-i;
 8004bb6:	200f      	movs	r0, #15
 8004bb8:	183b      	adds	r3, r7, r0
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	183a      	adds	r2, r7, r0
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	2178      	movs	r1, #120	; 0x78
 8004bc4:	1a8a      	subs	r2, r1, r2
 8004bc6:	b2d1      	uxtb	r1, r2
 8004bc8:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <USBD_AUDIO_DataIn+0x6c>)
 8004bca:	54d1      	strb	r1, [r2, r3]
			fakedata[i] = 0x01;
 8004bcc:	183b      	adds	r3, r7, r0
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <USBD_AUDIO_DataIn+0x6c>)
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 120; i=i+2)
 8004bd6:	183b      	adds	r3, r7, r0
 8004bd8:	183a      	adds	r2, r7, r0
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	3202      	adds	r2, #2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	230f      	movs	r3, #15
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b77      	cmp	r3, #119	; 0x77
 8004be8:	d9e5      	bls.n	8004bb6 <USBD_AUDIO_DataIn+0x22>
		}
		USBD_LL_Transmit(pdev, 0x03, fakedata, 120);
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <USBD_AUDIO_DataIn+0x6c>)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	2378      	movs	r3, #120	; 0x78
 8004bf0:	2103      	movs	r1, #3
 8004bf2:	f001 ff5f 	bl	8006ab4 <USBD_LL_Transmit>
	}
  /* Only OUT data are processed */
  return USBD_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b004      	add	sp, #16
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000324 	.word	0x20000324

08004c04 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	23ae      	movs	r3, #174	; 0xae
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	58d3      	ldr	r3, [r2, r3]
 8004c14:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <USBD_AUDIO_EP0_RxReady+0x54>)
 8004c1a:	5c9b      	ldrb	r3, [r3, r2]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d116      	bne.n	8004c4e <USBD_AUDIO_EP0_RxReady+0x4a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <USBD_AUDIO_EP0_RxReady+0x58>)
 8004c24:	5c9b      	ldrb	r3, [r3, r2]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d111      	bne.n	8004c4e <USBD_AUDIO_EP0_RxReady+0x4a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	23af      	movs	r3, #175	; 0xaf
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	58d3      	ldr	r3, [r2, r3]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	490a      	ldr	r1, [pc, #40]	; (8004c60 <USBD_AUDIO_EP0_RxReady+0x5c>)
 8004c38:	5c52      	ldrb	r2, [r2, r1]
 8004c3a:	0010      	movs	r0, r2
 8004c3c:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a05      	ldr	r2, [pc, #20]	; (8004c58 <USBD_AUDIO_EP0_RxReady+0x54>)
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]
      haudio->control.len = 0U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a06      	ldr	r2, [pc, #24]	; (8004c64 <USBD_AUDIO_EP0_RxReady+0x60>)
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]
    }
  }

  return USBD_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b004      	add	sp, #16
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	0000258a 	.word	0x0000258a
 8004c5c:	000025cc 	.word	0x000025cc
 8004c60:	0000258b 	.word	0x0000258b
 8004c64:	000025cb 	.word	0x000025cb

08004c68 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b002      	add	sp, #8
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	USBD_AUDIO_HandleTypeDef   *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	23ae      	movs	r3, #174	; 0xae
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	58d3      	ldr	r3, [r2, r3]
 8004c8c:	60fb      	str	r3, [r7, #12]
	if(haudio->alt_setting == 1)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <USBD_AUDIO_SOF+0x26>
	{
		USBD_LL_Transmit(pdev, 0x03, fakedata, 0);
 8004c96:	4a05      	ldr	r2, [pc, #20]	; (8004cac <USBD_AUDIO_SOF+0x30>)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	f001 ff09 	bl	8006ab4 <USBD_LL_Transmit>
	}
	return USBD_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b004      	add	sp, #16
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000324 	.word	0x20000324

08004cb0 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	000a      	movs	r2, r1
 8004cba:	1cfb      	adds	r3, r7, #3
 8004cbc:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	000a      	movs	r2, r1
 8004cd2:	1cfb      	adds	r3, r7, #3
 8004cd4:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	000a      	movs	r2, r1
 8004cea:	1cfb      	adds	r3, r7, #3
 8004cec:	701a      	strb	r2, [r3, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	23ae      	movs	r3, #174	; 0xae
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	58d3      	ldr	r3, [r2, r3]
 8004cf6:	60fb      	str	r3, [r7, #12]

  if (epnum == 0x01)
 8004cf8:	1cfb      	adds	r3, r7, #3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d136      	bne.n	8004d6e <USBD_AUDIO_DataOut+0x8e>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <USBD_AUDIO_DataOut+0x98>)
 8004d04:	5a9b      	ldrh	r3, [r3, r2]
 8004d06:	3378      	adds	r3, #120	; 0x78
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <USBD_AUDIO_DataOut+0x98>)
 8004d0e:	5299      	strh	r1, [r3, r2]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <USBD_AUDIO_DataOut+0x98>)
 8004d14:	5a9a      	ldrh	r2, [r3, r2]
 8004d16:	2396      	movs	r3, #150	; 0x96
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d117      	bne.n	8004d4e <USBD_AUDIO_DataOut+0x6e>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <USBD_AUDIO_DataOut+0x98>)
 8004d22:	2100      	movs	r1, #0
 8004d24:	5299      	strh	r1, [r3, r2]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <USBD_AUDIO_DataOut+0x9c>)
 8004d2a:	5c9b      	ldrb	r3, [r3, r2]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d10e      	bne.n	8004d4e <USBD_AUDIO_DataOut+0x6e>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	23af      	movs	r3, #175	; 0xaf
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	58d3      	ldr	r3, [r2, r3]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	1d10      	adds	r0, r2, #4
 8004d3e:	2296      	movs	r2, #150	; 0x96
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	2201      	movs	r2, #1
 8004d44:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <USBD_AUDIO_DataOut+0x9c>)
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]
      }
    }

    if (haudio->rd_enable == 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <USBD_AUDIO_DataOut+0xa0>)
 8004d52:	5c9b      	ldrb	r3, [r3, r2]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <USBD_AUDIO_DataOut+0x8e>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <USBD_AUDIO_DataOut+0x98>)
 8004d5c:	5a9a      	ldrh	r2, [r3, r2]
 8004d5e:	2396      	movs	r3, #150	; 0x96
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d103      	bne.n	8004d6e <USBD_AUDIO_DataOut+0x8e>
      {
        haudio->rd_enable = 1U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <USBD_AUDIO_DataOut+0xa0>)
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]
    /* Prepare Out endpoint to receive next audio packet */
//    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
//                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b004      	add	sp, #16
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	00002588 	.word	0x00002588
 8004d7c:	00002584 	.word	0x00002584
 8004d80:	00002585 	.word	0x00002585

08004d84 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	23ae      	movs	r3, #174	; 0xae
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	58d3      	ldr	r3, [r2, r3]
 8004d96:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <AUDIO_REQ_GetCurrent+0x40>)
 8004d9c:	4694      	mov	ip, r2
 8004d9e:	4463      	add	r3, ip
 8004da0:	2240      	movs	r2, #64	; 0x40
 8004da2:	2100      	movs	r1, #0
 8004da4:	0018      	movs	r0, r3
 8004da6:	f001 ff7f 	bl	8006ca8 <memset>

  /* Send the current mute state */
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <AUDIO_REQ_GetCurrent+0x40>)
 8004dae:	1899      	adds	r1, r3, r2
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	88da      	ldrh	r2, [r3, #6]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f001 f9e2 	bl	8006180 <USBD_CtlSendData>
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b004      	add	sp, #16
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	0000258b 	.word	0x0000258b

08004dc8 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	23ae      	movs	r3, #174	; 0xae
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	58d3      	ldr	r3, [r2, r3]
 8004dda:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	88db      	ldrh	r3, [r3, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <AUDIO_REQ_SetCurrent+0x52>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a0f      	ldr	r2, [pc, #60]	; (8004e24 <AUDIO_REQ_SetCurrent+0x5c>)
 8004de8:	1899      	adds	r1, r3, r2
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	88da      	ldrh	r2, [r3, #6]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f001 f9f8 	bl	80061e6 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <AUDIO_REQ_SetCurrent+0x60>)
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	88db      	ldrh	r3, [r3, #6]
 8004e02:	b2d9      	uxtb	r1, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <AUDIO_REQ_SetCurrent+0x64>)
 8004e08:	5499      	strb	r1, [r3, r2]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	889b      	ldrh	r3, [r3, #4]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2d9      	uxtb	r1, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a06      	ldr	r2, [pc, #24]	; (8004e30 <AUDIO_REQ_SetCurrent+0x68>)
 8004e18:	5499      	strb	r1, [r3, r2]
  }
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b004      	add	sp, #16
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	0000258b 	.word	0x0000258b
 8004e28:	0000258a 	.word	0x0000258a
 8004e2c:	000025cb 	.word	0x000025cb
 8004e30:	000025cc 	.word	0x000025cc

08004e34 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	220a      	movs	r2, #10
 8004e40:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8004e42:	4b02      	ldr	r3, [pc, #8]	; (8004e4c <USBD_AUDIO_GetDeviceQualifierDesc+0x18>)
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200000b4 	.word	0x200000b4

08004e50 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <USBD_AUDIO_RegisterInterface+0x1a>
  {
    pdev->pUserData = fops;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	23af      	movs	r3, #175	; 0xaf
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	1dfb      	adds	r3, r7, #7
 8004e80:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e020      	b.n	8004ece <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	23ad      	movs	r3, #173	; 0xad
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	58d3      	ldr	r3, [r2, r3]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	23ad      	movs	r3, #173	; 0xad
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	23ac      	movs	r3, #172	; 0xac
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	23a7      	movs	r3, #167	; 0xa7
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	2101      	movs	r1, #1
 8004eba:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1dfa      	adds	r2, r7, #7
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f001 fc76 	bl	80067b8 <USBD_LL_Init>

  return USBD_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b004      	add	sp, #16
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	18fb      	adds	r3, r7, r3
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	23ad      	movs	r3, #173	; 0xad
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8004ef8:	230f      	movs	r3, #15
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e003      	b.n	8004f0a <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004f02:	230f      	movs	r3, #15
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2202      	movs	r2, #2
 8004f08:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004f0a:	230f      	movs	r3, #15
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	781b      	ldrb	r3, [r3, #0]
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b004      	add	sp, #16
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f001 fc8e 	bl	8006844 <USBD_LL_Start>

  return USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b002      	add	sp, #8
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	000a      	movs	r2, r1
 8004f4e:	1cfb      	adds	r3, r7, #3
 8004f50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f52:	230f      	movs	r3, #15
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	2202      	movs	r2, #2
 8004f58:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	23ad      	movs	r3, #173	; 0xad
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	58d3      	ldr	r3, [r2, r3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00f      	beq.n	8004f86 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	23ad      	movs	r3, #173	; 0xad
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	58d3      	ldr	r3, [r2, r3]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1cfa      	adds	r2, r7, #3
 8004f72:	7811      	ldrb	r1, [r2, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	0010      	movs	r0, r2
 8004f78:	4798      	blx	r3
 8004f7a:	1e03      	subs	r3, r0, #0
 8004f7c:	d103      	bne.n	8004f86 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004f7e:	230f      	movs	r3, #15
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8004f86:	230f      	movs	r3, #15
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	000a      	movs	r2, r1
 8004f9e:	1cfb      	adds	r3, r7, #3
 8004fa0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	23ad      	movs	r3, #173	; 0xad
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	58d3      	ldr	r3, [r2, r3]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	1cfa      	adds	r2, r7, #3
 8004fae:	7811      	ldrb	r1, [r2, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	0010      	movs	r0, r2
 8004fb4:	4798      	blx	r3

  return USBD_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	22aa      	movs	r2, #170	; 0xaa
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	4694      	mov	ip, r2
 8004fd2:	4463      	add	r3, ip
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f001 f817 	bl	800600c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	23a5      	movs	r3, #165	; 0xa5
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a22      	ldr	r2, [pc, #136]	; (8005074 <USBD_LL_SetupStage+0xb4>)
 8004fec:	5a9b      	ldrh	r3, [r3, r2]
 8004fee:	0019      	movs	r1, r3
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	23a6      	movs	r3, #166	; 0xa6
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	23aa      	movs	r3, #170	; 0xaa
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	5cd3      	ldrb	r3, [r2, r3]
 8005000:	001a      	movs	r2, r3
 8005002:	231f      	movs	r3, #31
 8005004:	4013      	ands	r3, r2
 8005006:	2b01      	cmp	r3, #1
 8005008:	d00d      	beq.n	8005026 <USBD_LL_SetupStage+0x66>
 800500a:	d302      	bcc.n	8005012 <USBD_LL_SetupStage+0x52>
 800500c:	2b02      	cmp	r3, #2
 800500e:	d014      	beq.n	800503a <USBD_LL_SetupStage+0x7a>
 8005010:	e01d      	b.n	800504e <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	22aa      	movs	r2, #170	; 0xaa
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	189a      	adds	r2, r3, r2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0011      	movs	r1, r2
 800501e:	0018      	movs	r0, r3
 8005020:	f000 fa10 	bl	8005444 <USBD_StdDevReq>
      break;
 8005024:	e020      	b.n	8005068 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	22aa      	movs	r2, #170	; 0xaa
 800502a:	0092      	lsls	r2, r2, #2
 800502c:	189a      	adds	r2, r3, r2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	0011      	movs	r1, r2
 8005032:	0018      	movs	r0, r3
 8005034:	f000 fa78 	bl	8005528 <USBD_StdItfReq>
      break;
 8005038:	e016      	b.n	8005068 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	22aa      	movs	r2, #170	; 0xaa
 800503e:	0092      	lsls	r2, r2, #2
 8005040:	189a      	adds	r2, r3, r2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0011      	movs	r1, r2
 8005046:	0018      	movs	r0, r3
 8005048:	f000 fac5 	bl	80055d6 <USBD_StdEPReq>
      break;
 800504c:	e00c      	b.n	8005068 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	23aa      	movs	r3, #170	; 0xaa
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	5cd3      	ldrb	r3, [r2, r3]
 8005056:	227f      	movs	r2, #127	; 0x7f
 8005058:	4393      	bics	r3, r2
 800505a:	b2da      	uxtb	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	0011      	movs	r1, r2
 8005060:	0018      	movs	r0, r3
 8005062:	f001 fc78 	bl	8006956 <USBD_LL_StallEP>
      break;
 8005066:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b002      	add	sp, #8
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	000002ae 	.word	0x000002ae

08005078 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	200b      	movs	r0, #11
 8005084:	183b      	adds	r3, r7, r0
 8005086:	1c0a      	adds	r2, r1, #0
 8005088:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800508a:	183b      	adds	r3, r7, r0
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d154      	bne.n	800513c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3355      	adds	r3, #85	; 0x55
 8005096:	33ff      	adds	r3, #255	; 0xff
 8005098:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	23a5      	movs	r3, #165	; 0xa5
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	58d3      	ldr	r3, [r2, r3]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d139      	bne.n	800511a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d919      	bls.n	80050e6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d203      	bcs.n	80050d4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	e002      	b.n	80050da <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80050d8:	b29b      	uxth	r3, r3
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	001a      	movs	r2, r3
 80050e0:	f001 f8a5 	bl	800622e <USBD_CtlContinueRx>
 80050e4:	e045      	b.n	8005172 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	23ad      	movs	r3, #173	; 0xad
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	58d3      	ldr	r3, [r2, r3]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	23a7      	movs	r3, #167	; 0xa7
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d107      	bne.n	8005110 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	23ad      	movs	r3, #173	; 0xad
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	58d3      	ldr	r3, [r2, r3]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	0010      	movs	r0, r2
 800510e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	0018      	movs	r0, r3
 8005114:	f001 f89e 	bl	8006254 <USBD_CtlSendStatus>
 8005118:	e02b      	b.n	8005172 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	23a5      	movs	r3, #165	; 0xa5
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	58d3      	ldr	r3, [r2, r3]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d125      	bne.n	8005172 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	23a5      	movs	r3, #165	; 0xa5
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	2100      	movs	r1, #0
 800512e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2100      	movs	r1, #0
 8005134:	0018      	movs	r0, r3
 8005136:	f001 fc0e 	bl	8006956 <USBD_LL_StallEP>
 800513a:	e01a      	b.n	8005172 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	23ad      	movs	r3, #173	; 0xad
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	58d3      	ldr	r3, [r2, r3]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	23a7      	movs	r3, #167	; 0xa7
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005152:	2b03      	cmp	r3, #3
 8005154:	d10b      	bne.n	800516e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	23ad      	movs	r3, #173	; 0xad
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	58d3      	ldr	r3, [r2, r3]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	220b      	movs	r2, #11
 8005162:	18ba      	adds	r2, r7, r2
 8005164:	7811      	ldrb	r1, [r2, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	0010      	movs	r0, r2
 800516a:	4798      	blx	r3
 800516c:	e001      	b.n	8005172 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800516e:	2302      	movs	r3, #2
 8005170:	e000      	b.n	8005174 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b006      	add	sp, #24
 800517a:	bd80      	pop	{r7, pc}

0800517c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	200b      	movs	r0, #11
 8005188:	183b      	adds	r3, r7, r0
 800518a:	1c0a      	adds	r2, r1, #0
 800518c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800518e:	183b      	adds	r3, r7, r0
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d000      	beq.n	8005198 <USBD_LL_DataInStage+0x1c>
 8005196:	e08e      	b.n	80052b6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3314      	adds	r3, #20
 800519c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	23a5      	movs	r3, #165	; 0xa5
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	58d3      	ldr	r3, [r2, r3]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d164      	bne.n	8005274 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d915      	bls.n	80051e2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f000 fff6 	bl	80061c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	2300      	movs	r3, #0
 80051d8:	2200      	movs	r2, #0
 80051da:	2100      	movs	r1, #0
 80051dc:	f001 fca2 	bl	8006b24 <USBD_LL_PrepareReceive>
 80051e0:	e059      	b.n	8005296 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	0019      	movs	r1, r3
 80051ec:	0010      	movs	r0, r2
 80051ee:	f7fb f811 	bl	8000214 <__aeabi_uidivmod>
 80051f2:	1e0b      	subs	r3, r1, #0
 80051f4:	d11f      	bne.n	8005236 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80051fe:	429a      	cmp	r2, r3
 8005200:	d319      	bcc.n	8005236 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	23a6      	movs	r3, #166	; 0xa6
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800520e:	429a      	cmp	r2, r3
 8005210:	d211      	bcs.n	8005236 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	2100      	movs	r1, #0
 8005218:	0018      	movs	r0, r3
 800521a:	f000 ffd1 	bl	80061c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	23a6      	movs	r3, #166	; 0xa6
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	2100      	movs	r1, #0
 8005226:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	2300      	movs	r3, #0
 800522c:	2200      	movs	r2, #0
 800522e:	2100      	movs	r1, #0
 8005230:	f001 fc78 	bl	8006b24 <USBD_LL_PrepareReceive>
 8005234:	e02f      	b.n	8005296 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	23ad      	movs	r3, #173	; 0xad
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	58d3      	ldr	r3, [r2, r3]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	23a7      	movs	r3, #167	; 0xa7
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800524c:	2b03      	cmp	r3, #3
 800524e:	d107      	bne.n	8005260 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	23ad      	movs	r3, #173	; 0xad
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	58d3      	ldr	r3, [r2, r3]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	0010      	movs	r0, r2
 800525e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	0018      	movs	r0, r3
 8005266:	f001 fb76 	bl	8006956 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	0018      	movs	r0, r3
 800526e:	f001 f805 	bl	800627c <USBD_CtlReceiveStatus>
 8005272:	e010      	b.n	8005296 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	23a5      	movs	r3, #165	; 0xa5
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	58d3      	ldr	r3, [r2, r3]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d005      	beq.n	800528c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	23a5      	movs	r3, #165	; 0xa5
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	0018      	movs	r0, r3
 8005292:	f001 fb60 	bl	8006956 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	23a8      	movs	r3, #168	; 0xa8
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	5cd3      	ldrb	r3, [r2, r3]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d124      	bne.n	80052ec <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7ff fe44 	bl	8004f32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	23a8      	movs	r3, #168	; 0xa8
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	2100      	movs	r1, #0
 80052b2:	54d1      	strb	r1, [r2, r3]
 80052b4:	e01a      	b.n	80052ec <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	23ad      	movs	r3, #173	; 0xad
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	58d3      	ldr	r3, [r2, r3]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	23a7      	movs	r3, #167	; 0xa7
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d10b      	bne.n	80052e8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	23ad      	movs	r3, #173	; 0xad
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	58d3      	ldr	r3, [r2, r3]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	220b      	movs	r2, #11
 80052dc:	18ba      	adds	r2, r7, r2
 80052de:	7811      	ldrb	r1, [r2, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	0010      	movs	r0, r2
 80052e4:	4798      	blx	r3
 80052e6:	e001      	b.n	80052ec <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80052e8:	2302      	movs	r3, #2
 80052ea:	e000      	b.n	80052ee <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b006      	add	sp, #24
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	f001 fac3 	bl	8006890 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	23ac      	movs	r3, #172	; 0xac
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	2101      	movs	r1, #1
 8005312:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	23b2      	movs	r3, #178	; 0xb2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	2200      	movs	r2, #0
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	f001 fab3 	bl	8006890 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	23a7      	movs	r3, #167	; 0xa7
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	2101      	movs	r1, #1
 800533e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	23a5      	movs	r3, #165	; 0xa5
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	2100      	movs	r1, #0
 8005348:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	23a9      	movs	r3, #169	; 0xa9
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	2100      	movs	r1, #0
 8005358:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	23ae      	movs	r3, #174	; 0xae
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	58d3      	ldr	r3, [r2, r3]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	23ad      	movs	r3, #173	; 0xad
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	58d3      	ldr	r3, [r2, r3]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	b2d9      	uxtb	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0018      	movs	r0, r3
 800537a:	4790      	blx	r2
  }

  return USBD_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b002      	add	sp, #8
 8005384:	bd80      	pop	{r7, pc}

08005386 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	000a      	movs	r2, r1
 8005390:	1cfb      	adds	r3, r7, #3
 8005392:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1cfa      	adds	r2, r7, #3
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b002      	add	sp, #8
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	23a7      	movs	r3, #167	; 0xa7
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	5cd1      	ldrb	r1, [r2, r3]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a06      	ldr	r2, [pc, #24]	; (80053d4 <USBD_LL_Suspend+0x2c>)
 80053bc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	23a7      	movs	r3, #167	; 0xa7
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	2104      	movs	r1, #4
 80053c6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b002      	add	sp, #8
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	0000029d 	.word	0x0000029d

080053d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	23a7      	movs	r3, #167	; 0xa7
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	5cd3      	ldrb	r3, [r2, r3]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d106      	bne.n	80053fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <USBD_LL_Resume+0x2c>)
 80053f0:	5c99      	ldrb	r1, [r3, r2]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	23a7      	movs	r3, #167	; 0xa7
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	0018      	movs	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	b002      	add	sp, #8
 8005402:	bd80      	pop	{r7, pc}
 8005404:	0000029d 	.word	0x0000029d

08005408 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	23a7      	movs	r3, #167	; 0xa7
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d10e      	bne.n	800543a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	23ad      	movs	r3, #173	; 0xad
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	58d3      	ldr	r3, [r2, r3]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	23ad      	movs	r3, #173	; 0xad
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	58d3      	ldr	r3, [r2, r3]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	0010      	movs	r0, r2
 8005438:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800544e:	230f      	movs	r3, #15
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	001a      	movs	r2, r3
 800545c:	2360      	movs	r3, #96	; 0x60
 800545e:	4013      	ands	r3, r2
 8005460:	2b20      	cmp	r3, #32
 8005462:	d004      	beq.n	800546e <USBD_StdDevReq+0x2a>
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d002      	beq.n	800546e <USBD_StdDevReq+0x2a>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <USBD_StdDevReq+0x3e>
 800546c:	e04b      	b.n	8005506 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	23ad      	movs	r3, #173	; 0xad
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	58d3      	ldr	r3, [r2, r3]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	0010      	movs	r0, r2
 800547e:	4798      	blx	r3
      break;
 8005480:	e048      	b.n	8005514 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b09      	cmp	r3, #9
 8005488:	d835      	bhi.n	80054f6 <USBD_StdDevReq+0xb2>
 800548a:	009a      	lsls	r2, r3, #2
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <USBD_StdDevReq+0xe0>)
 800548e:	18d3      	adds	r3, r2, r3
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0011      	movs	r1, r2
 800549a:	0018      	movs	r0, r3
 800549c:	f000 fa5a 	bl	8005954 <USBD_GetDescriptor>
          break;
 80054a0:	e030      	b.n	8005504 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 fc07 	bl	8005cbc <USBD_SetAddress>
          break;
 80054ae:	e029      	b.n	8005504 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0011      	movs	r1, r2
 80054b6:	0018      	movs	r0, r3
 80054b8:	f000 fc54 	bl	8005d64 <USBD_SetConfig>
          break;
 80054bc:	e022      	b.n	8005504 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fcf1 	bl	8005eac <USBD_GetConfig>
          break;
 80054ca:	e01b      	b.n	8005504 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0011      	movs	r1, r2
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 fd24 	bl	8005f20 <USBD_GetStatus>
          break;
 80054d8:	e014      	b.n	8005504 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	0011      	movs	r1, r2
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 fd57 	bl	8005f94 <USBD_SetFeature>
          break;
 80054e6:	e00d      	b.n	8005504 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0011      	movs	r1, r2
 80054ee:	0018      	movs	r0, r3
 80054f0:	f000 fd66 	bl	8005fc0 <USBD_ClrFeature>
          break;
 80054f4:	e006      	b.n	8005504 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 fdc0 	bl	8006082 <USBD_CtlError>
          break;
 8005502:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005504:	e006      	b.n	8005514 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0011      	movs	r1, r2
 800550c:	0018      	movs	r0, r3
 800550e:	f000 fdb8 	bl	8006082 <USBD_CtlError>
      break;
 8005512:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005514:	230f      	movs	r3, #15
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	781b      	ldrb	r3, [r3, #0]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b004      	add	sp, #16
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	08006e2c 	.word	0x08006e2c

08005528 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005532:	230f      	movs	r3, #15
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	001a      	movs	r2, r3
 8005540:	2360      	movs	r3, #96	; 0x60
 8005542:	4013      	ands	r3, r2
 8005544:	2b20      	cmp	r3, #32
 8005546:	d003      	beq.n	8005550 <USBD_StdItfReq+0x28>
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d001      	beq.n	8005550 <USBD_StdItfReq+0x28>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d136      	bne.n	80055be <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	23a7      	movs	r3, #167	; 0xa7
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	3b01      	subs	r3, #1
 800555a:	2b02      	cmp	r3, #2
 800555c:	d826      	bhi.n	80055ac <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	889b      	ldrh	r3, [r3, #4]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d81a      	bhi.n	800559e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	23ad      	movs	r3, #173	; 0xad
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	58d3      	ldr	r3, [r2, r3]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	220f      	movs	r2, #15
 8005574:	18bc      	adds	r4, r7, r2
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	0010      	movs	r0, r2
 800557c:	4798      	blx	r3
 800557e:	0003      	movs	r3, r0
 8005580:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d117      	bne.n	80055ba <USBD_StdItfReq+0x92>
 800558a:	230f      	movs	r3, #15
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d112      	bne.n	80055ba <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	0018      	movs	r0, r3
 8005598:	f000 fe5c 	bl	8006254 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800559c:	e00d      	b.n	80055ba <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	0011      	movs	r1, r2
 80055a4:	0018      	movs	r0, r3
 80055a6:	f000 fd6c 	bl	8006082 <USBD_CtlError>
          break;
 80055aa:	e006      	b.n	80055ba <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0011      	movs	r1, r2
 80055b2:	0018      	movs	r0, r3
 80055b4:	f000 fd65 	bl	8006082 <USBD_CtlError>
          break;
 80055b8:	e000      	b.n	80055bc <USBD_StdItfReq+0x94>
          break;
 80055ba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80055bc:	e006      	b.n	80055cc <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	0011      	movs	r1, r2
 80055c4:	0018      	movs	r0, r3
 80055c6:	f000 fd5c 	bl	8006082 <USBD_CtlError>
      break;
 80055ca:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b005      	add	sp, #20
 80055d4:	bd90      	pop	{r4, r7, pc}

080055d6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80055d6:	b5b0      	push	{r4, r5, r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80055e0:	230f      	movs	r3, #15
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	889a      	ldrh	r2, [r3, #4]
 80055ec:	230e      	movs	r3, #14
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	001a      	movs	r2, r3
 80055f8:	2360      	movs	r3, #96	; 0x60
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d004      	beq.n	800560a <USBD_StdEPReq+0x34>
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d002      	beq.n	800560a <USBD_StdEPReq+0x34>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <USBD_StdEPReq+0x48>
 8005608:	e195      	b.n	8005936 <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	23ad      	movs	r3, #173	; 0xad
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	58d3      	ldr	r3, [r2, r3]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	0010      	movs	r0, r2
 800561a:	4798      	blx	r3
      break;
 800561c:	e192      	b.n	8005944 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	001a      	movs	r2, r3
 8005624:	2360      	movs	r3, #96	; 0x60
 8005626:	4013      	ands	r3, r2
 8005628:	2b20      	cmp	r3, #32
 800562a:	d10f      	bne.n	800564c <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	23ad      	movs	r3, #173	; 0xad
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	58d3      	ldr	r3, [r2, r3]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	250f      	movs	r5, #15
 8005638:	197c      	adds	r4, r7, r5
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	0010      	movs	r0, r2
 8005640:	4798      	blx	r3
 8005642:	0003      	movs	r3, r0
 8005644:	7023      	strb	r3, [r4, #0]

        return ret;
 8005646:	197b      	adds	r3, r7, r5
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	e17e      	b.n	800594a <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d054      	beq.n	80056fe <USBD_StdEPReq+0x128>
 8005654:	2b03      	cmp	r3, #3
 8005656:	d003      	beq.n	8005660 <USBD_StdEPReq+0x8a>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d100      	bne.n	800565e <USBD_StdEPReq+0x88>
 800565c:	e097      	b.n	800578e <USBD_StdEPReq+0x1b8>
 800565e:	e162      	b.n	8005926 <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	23a7      	movs	r3, #167	; 0xa7
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	5cd3      	ldrb	r3, [r2, r3]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d002      	beq.n	8005672 <USBD_StdEPReq+0x9c>
 800566c:	2b03      	cmp	r3, #3
 800566e:	d01f      	beq.n	80056b0 <USBD_StdEPReq+0xda>
 8005670:	e03d      	b.n	80056ee <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005672:	230e      	movs	r3, #14
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <USBD_StdEPReq+0xcc>
 800567c:	230e      	movs	r3, #14
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d00d      	beq.n	80056a2 <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005686:	230e      	movs	r3, #14
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	0011      	movs	r1, r2
 8005690:	0018      	movs	r0, r3
 8005692:	f001 f960 	bl	8006956 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	0018      	movs	r0, r3
 800569c:	f001 f95b 	bl	8006956 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056a0:	e02c      	b.n	80056fc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 fcea 	bl	8006082 <USBD_CtlError>
              break;
 80056ae:	e025      	b.n	80056fc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	885b      	ldrh	r3, [r3, #2]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d115      	bne.n	80056e4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80056b8:	230e      	movs	r3, #14
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d010      	beq.n	80056e4 <USBD_StdEPReq+0x10e>
 80056c2:	230e      	movs	r3, #14
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b80      	cmp	r3, #128	; 0x80
 80056ca:	d00b      	beq.n	80056e4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	88db      	ldrh	r3, [r3, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80056d4:	230e      	movs	r3, #14
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0011      	movs	r1, r2
 80056de:	0018      	movs	r0, r3
 80056e0:	f001 f939 	bl	8006956 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	0018      	movs	r0, r3
 80056e8:	f000 fdb4 	bl	8006254 <USBD_CtlSendStatus>

              break;
 80056ec:	e006      	b.n	80056fc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0011      	movs	r1, r2
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 fcc4 	bl	8006082 <USBD_CtlError>
              break;
 80056fa:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80056fc:	e11a      	b.n	8005934 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	23a7      	movs	r3, #167	; 0xa7
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	5cd3      	ldrb	r3, [r2, r3]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d002      	beq.n	8005710 <USBD_StdEPReq+0x13a>
 800570a:	2b03      	cmp	r3, #3
 800570c:	d01f      	beq.n	800574e <USBD_StdEPReq+0x178>
 800570e:	e035      	b.n	800577c <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005710:	230e      	movs	r3, #14
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d012      	beq.n	8005740 <USBD_StdEPReq+0x16a>
 800571a:	230e      	movs	r3, #14
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d00d      	beq.n	8005740 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005724:	230e      	movs	r3, #14
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0011      	movs	r1, r2
 800572e:	0018      	movs	r0, r3
 8005730:	f001 f911 	bl	8006956 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	0018      	movs	r0, r3
 800573a:	f001 f90c 	bl	8006956 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800573e:	e025      	b.n	800578c <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0011      	movs	r1, r2
 8005746:	0018      	movs	r0, r3
 8005748:	f000 fc9b 	bl	8006082 <USBD_CtlError>
              break;
 800574c:	e01e      	b.n	800578c <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	885b      	ldrh	r3, [r3, #2]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d119      	bne.n	800578a <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005756:	230e      	movs	r3, #14
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	227f      	movs	r2, #127	; 0x7f
 800575e:	4013      	ands	r3, r2
 8005760:	d007      	beq.n	8005772 <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005762:	230e      	movs	r3, #14
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0011      	movs	r1, r2
 800576c:	0018      	movs	r0, r3
 800576e:	f001 f91e 	bl	80069ae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 fd6d 	bl	8006254 <USBD_CtlSendStatus>
              }
              break;
 800577a:	e006      	b.n	800578a <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0011      	movs	r1, r2
 8005782:	0018      	movs	r0, r3
 8005784:	f000 fc7d 	bl	8006082 <USBD_CtlError>
              break;
 8005788:	e000      	b.n	800578c <USBD_StdEPReq+0x1b6>
              break;
 800578a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800578c:	e0d2      	b.n	8005934 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	23a7      	movs	r3, #167	; 0xa7
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	5cd3      	ldrb	r3, [r2, r3]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d002      	beq.n	80057a0 <USBD_StdEPReq+0x1ca>
 800579a:	2b03      	cmp	r3, #3
 800579c:	d03e      	beq.n	800581c <USBD_StdEPReq+0x246>
 800579e:	e0ba      	b.n	8005916 <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057a0:	230e      	movs	r3, #14
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <USBD_StdEPReq+0x1ec>
 80057aa:	230e      	movs	r3, #14
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d006      	beq.n	80057c2 <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f000 fc61 	bl	8006082 <USBD_CtlError>
                break;
 80057c0:	e0b0      	b.n	8005924 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057c2:	230e      	movs	r3, #14
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da0d      	bge.n	80057ea <USBD_StdEPReq+0x214>
 80057ce:	230e      	movs	r3, #14
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	227f      	movs	r2, #127	; 0x7f
 80057d6:	401a      	ands	r2, r3
 80057d8:	0013      	movs	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	3310      	adds	r3, #16
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	18d3      	adds	r3, r2, r3
 80057e6:	3304      	adds	r3, #4
 80057e8:	e00d      	b.n	8005806 <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057ea:	230e      	movs	r3, #14
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	227f      	movs	r2, #127	; 0x7f
 80057f2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057f4:	0013      	movs	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	3351      	adds	r3, #81	; 0x51
 80057fe:	33ff      	adds	r3, #255	; 0xff
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	18d3      	adds	r3, r2, r3
 8005804:	3304      	adds	r3, #4
 8005806:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	0018      	movs	r0, r3
 8005816:	f000 fcb3 	bl	8006180 <USBD_CtlSendData>
              break;
 800581a:	e083      	b.n	8005924 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800581c:	230e      	movs	r3, #14
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b25b      	sxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	da15      	bge.n	8005854 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005828:	230e      	movs	r3, #14
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	220f      	movs	r2, #15
 8005830:	401a      	ands	r2, r3
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	0013      	movs	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	189b      	adds	r3, r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	18cb      	adds	r3, r1, r3
 800583e:	3318      	adds	r3, #24
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11e      	bne.n	8005884 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0011      	movs	r1, r2
 800584c:	0018      	movs	r0, r3
 800584e:	f000 fc18 	bl	8006082 <USBD_CtlError>
                  break;
 8005852:	e067      	b.n	8005924 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005854:	230e      	movs	r3, #14
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	220f      	movs	r2, #15
 800585c:	401a      	ands	r2, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	23ac      	movs	r3, #172	; 0xac
 8005862:	0059      	lsls	r1, r3, #1
 8005864:	0013      	movs	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	189b      	adds	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	18c3      	adds	r3, r0, r3
 800586e:	185b      	adds	r3, r3, r1
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0011      	movs	r1, r2
 800587c:	0018      	movs	r0, r3
 800587e:	f000 fc00 	bl	8006082 <USBD_CtlError>
                  break;
 8005882:	e04f      	b.n	8005924 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005884:	230e      	movs	r3, #14
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b25b      	sxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	da0d      	bge.n	80058ac <USBD_StdEPReq+0x2d6>
 8005890:	230e      	movs	r3, #14
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	227f      	movs	r2, #127	; 0x7f
 8005898:	401a      	ands	r2, r3
 800589a:	0013      	movs	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	3310      	adds	r3, #16
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	3304      	adds	r3, #4
 80058aa:	e00d      	b.n	80058c8 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058ac:	230e      	movs	r3, #14
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	227f      	movs	r2, #127	; 0x7f
 80058b4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058b6:	0013      	movs	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	3351      	adds	r3, #81	; 0x51
 80058c0:	33ff      	adds	r3, #255	; 0xff
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	3304      	adds	r3, #4
 80058c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80058ca:	230e      	movs	r3, #14
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <USBD_StdEPReq+0x308>
 80058d4:	230e      	movs	r3, #14
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	d103      	bne.n	80058e6 <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e010      	b.n	8005908 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80058e6:	230e      	movs	r3, #14
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	0011      	movs	r1, r2
 80058f0:	0018      	movs	r0, r3
 80058f2:	f001 f888 	bl	8006a06 <USBD_LL_IsStallEP>
 80058f6:	1e03      	subs	r3, r0, #0
 80058f8:	d003      	beq.n	8005902 <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e002      	b.n	8005908 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	0018      	movs	r0, r3
 8005910:	f000 fc36 	bl	8006180 <USBD_CtlSendData>
              break;
 8005914:	e006      	b.n	8005924 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	0011      	movs	r1, r2
 800591c:	0018      	movs	r0, r3
 800591e:	f000 fbb0 	bl	8006082 <USBD_CtlError>
              break;
 8005922:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8005924:	e006      	b.n	8005934 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f000 fba8 	bl	8006082 <USBD_CtlError>
          break;
 8005932:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005934:	e006      	b.n	8005944 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0011      	movs	r1, r2
 800593c:	0018      	movs	r0, r3
 800593e:	f000 fba0 	bl	8006082 <USBD_CtlError>
      break;
 8005942:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005944:	230f      	movs	r3, #15
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	781b      	ldrb	r3, [r3, #0]
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	b004      	add	sp, #16
 8005950:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005954 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800595e:	2308      	movs	r3, #8
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	2200      	movs	r2, #0
 8005964:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800596a:	230b      	movs	r3, #11
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	885b      	ldrh	r3, [r3, #2]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b07      	cmp	r3, #7
 800597c:	d900      	bls.n	8005980 <USBD_GetDescriptor+0x2c>
 800597e:	e159      	b.n	8005c34 <USBD_GetDescriptor+0x2e0>
 8005980:	009a      	lsls	r2, r3, #2
 8005982:	4bcc      	ldr	r3, [pc, #816]	; (8005cb4 <USBD_GetDescriptor+0x360>)
 8005984:	18d3      	adds	r3, r2, r3
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	23ac      	movs	r3, #172	; 0xac
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	58d3      	ldr	r3, [r2, r3]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	7c12      	ldrb	r2, [r2, #16]
 8005998:	2108      	movs	r1, #8
 800599a:	1879      	adds	r1, r7, r1
 800599c:	0010      	movs	r0, r2
 800599e:	4798      	blx	r3
 80059a0:	0003      	movs	r3, r0
 80059a2:	60fb      	str	r3, [r7, #12]
      break;
 80059a4:	e153      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7c1b      	ldrb	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	23ad      	movs	r3, #173	; 0xad
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	58d3      	ldr	r3, [r2, r3]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	2208      	movs	r2, #8
 80059ba:	18ba      	adds	r2, r7, r2
 80059bc:	0010      	movs	r0, r2
 80059be:	4798      	blx	r3
 80059c0:	0003      	movs	r3, r0
 80059c2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	2202      	movs	r2, #2
 80059ca:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059cc:	e13f      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	23ad      	movs	r3, #173	; 0xad
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	58d3      	ldr	r3, [r2, r3]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	2208      	movs	r2, #8
 80059da:	18ba      	adds	r2, r7, r2
 80059dc:	0010      	movs	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	0003      	movs	r3, r0
 80059e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	2202      	movs	r2, #2
 80059ea:	701a      	strb	r2, [r3, #0]
      break;
 80059ec:	e12f      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	885b      	ldrh	r3, [r3, #2]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d900      	bls.n	80059fa <USBD_GetDescriptor+0xa6>
 80059f8:	e0d0      	b.n	8005b9c <USBD_GetDescriptor+0x248>
 80059fa:	009a      	lsls	r2, r3, #2
 80059fc:	4bae      	ldr	r3, [pc, #696]	; (8005cb8 <USBD_GetDescriptor+0x364>)
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	23ac      	movs	r3, #172	; 0xac
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	58d3      	ldr	r3, [r2, r3]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	23ac      	movs	r3, #172	; 0xac
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	58d3      	ldr	r3, [r2, r3]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	7c12      	ldrb	r2, [r2, #16]
 8005a20:	2108      	movs	r1, #8
 8005a22:	1879      	adds	r1, r7, r1
 8005a24:	0010      	movs	r0, r2
 8005a26:	4798      	blx	r3
 8005a28:	0003      	movs	r3, r0
 8005a2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a2c:	e0c3      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0011      	movs	r1, r2
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 fb24 	bl	8006082 <USBD_CtlError>
            err++;
 8005a3a:	210b      	movs	r1, #11
 8005a3c:	187b      	adds	r3, r7, r1
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	187b      	adds	r3, r7, r1
 8005a42:	3201      	adds	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
          break;
 8005a46:	e0b6      	b.n	8005bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	23ac      	movs	r3, #172	; 0xac
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	58d3      	ldr	r3, [r2, r3]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	23ac      	movs	r3, #172	; 0xac
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	58d3      	ldr	r3, [r2, r3]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	7c12      	ldrb	r2, [r2, #16]
 8005a64:	2108      	movs	r1, #8
 8005a66:	1879      	adds	r1, r7, r1
 8005a68:	0010      	movs	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a70:	e0a1      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0011      	movs	r1, r2
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f000 fb02 	bl	8006082 <USBD_CtlError>
            err++;
 8005a7e:	210b      	movs	r1, #11
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	781a      	ldrb	r2, [r3, #0]
 8005a84:	187b      	adds	r3, r7, r1
 8005a86:	3201      	adds	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
          break;
 8005a8a:	e094      	b.n	8005bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	23ac      	movs	r3, #172	; 0xac
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	58d3      	ldr	r3, [r2, r3]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	23ac      	movs	r3, #172	; 0xac
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	58d3      	ldr	r3, [r2, r3]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	7c12      	ldrb	r2, [r2, #16]
 8005aa8:	2108      	movs	r1, #8
 8005aaa:	1879      	adds	r1, r7, r1
 8005aac:	0010      	movs	r0, r2
 8005aae:	4798      	blx	r3
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ab4:	e07f      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0011      	movs	r1, r2
 8005abc:	0018      	movs	r0, r3
 8005abe:	f000 fae0 	bl	8006082 <USBD_CtlError>
            err++;
 8005ac2:	210b      	movs	r1, #11
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	3201      	adds	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
          break;
 8005ace:	e072      	b.n	8005bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	23ac      	movs	r3, #172	; 0xac
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	58d3      	ldr	r3, [r2, r3]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00d      	beq.n	8005afa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	23ac      	movs	r3, #172	; 0xac
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	58d3      	ldr	r3, [r2, r3]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	7c12      	ldrb	r2, [r2, #16]
 8005aec:	2108      	movs	r1, #8
 8005aee:	1879      	adds	r1, r7, r1
 8005af0:	0010      	movs	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	0003      	movs	r3, r0
 8005af6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af8:	e05d      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0011      	movs	r1, r2
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 fabe 	bl	8006082 <USBD_CtlError>
            err++;
 8005b06:	210b      	movs	r1, #11
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	3201      	adds	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
          break;
 8005b12:	e050      	b.n	8005bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	23ac      	movs	r3, #172	; 0xac
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	58d3      	ldr	r3, [r2, r3]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	23ac      	movs	r3, #172	; 0xac
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	58d3      	ldr	r3, [r2, r3]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	7c12      	ldrb	r2, [r2, #16]
 8005b30:	2108      	movs	r1, #8
 8005b32:	1879      	adds	r1, r7, r1
 8005b34:	0010      	movs	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	0003      	movs	r3, r0
 8005b3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b3c:	e03b      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 fa9c 	bl	8006082 <USBD_CtlError>
            err++;
 8005b4a:	210b      	movs	r1, #11
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	781a      	ldrb	r2, [r3, #0]
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	3201      	adds	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
          break;
 8005b56:	e02e      	b.n	8005bb6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	23ac      	movs	r3, #172	; 0xac
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	58d3      	ldr	r3, [r2, r3]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	23ac      	movs	r3, #172	; 0xac
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	58d3      	ldr	r3, [r2, r3]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	7c12      	ldrb	r2, [r2, #16]
 8005b74:	2108      	movs	r1, #8
 8005b76:	1879      	adds	r1, r7, r1
 8005b78:	0010      	movs	r0, r2
 8005b7a:	4798      	blx	r3
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b80:	e019      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0011      	movs	r1, r2
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 fa7a 	bl	8006082 <USBD_CtlError>
            err++;
 8005b8e:	210b      	movs	r1, #11
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	187b      	adds	r3, r7, r1
 8005b96:	3201      	adds	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
          break;
 8005b9a:	e00c      	b.n	8005bb6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0011      	movs	r1, r2
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 fa6d 	bl	8006082 <USBD_CtlError>
          err++;
 8005ba8:	210b      	movs	r1, #11
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	187b      	adds	r3, r7, r1
 8005bb0:	3201      	adds	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8005bb4:	e04b      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>
 8005bb6:	e04a      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7c1b      	ldrb	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	23ad      	movs	r3, #173	; 0xad
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	58d3      	ldr	r3, [r2, r3]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	2208      	movs	r2, #8
 8005bcc:	18ba      	adds	r2, r7, r2
 8005bce:	0010      	movs	r0, r2
 8005bd0:	4798      	blx	r3
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bd6:	e03a      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0011      	movs	r1, r2
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 fa4f 	bl	8006082 <USBD_CtlError>
        err++;
 8005be4:	210b      	movs	r1, #11
 8005be6:	187b      	adds	r3, r7, r1
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	187b      	adds	r3, r7, r1
 8005bec:	3201      	adds	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
      break;
 8005bf0:	e02d      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	7c1b      	ldrb	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	23ad      	movs	r3, #173	; 0xad
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	58d3      	ldr	r3, [r2, r3]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	2208      	movs	r2, #8
 8005c06:	18ba      	adds	r2, r7, r2
 8005c08:	0010      	movs	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	2207      	movs	r2, #7
 8005c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c18:	e019      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	0011      	movs	r1, r2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 fa2e 	bl	8006082 <USBD_CtlError>
        err++;
 8005c26:	210b      	movs	r1, #11
 8005c28:	187b      	adds	r3, r7, r1
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	187b      	adds	r3, r7, r1
 8005c2e:	3201      	adds	r2, #1
 8005c30:	701a      	strb	r2, [r3, #0]
      break;
 8005c32:	e00c      	b.n	8005c4e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	0011      	movs	r1, r2
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 fa21 	bl	8006082 <USBD_CtlError>
      err++;
 8005c40:	210b      	movs	r1, #11
 8005c42:	187b      	adds	r3, r7, r1
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	187b      	adds	r3, r7, r1
 8005c48:	3201      	adds	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
      break;
 8005c4c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8005c4e:	230b      	movs	r3, #11
 8005c50:	18fb      	adds	r3, r7, r3
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d128      	bne.n	8005caa <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c58:	2308      	movs	r3, #8
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01a      	beq.n	8005c98 <USBD_GetDescriptor+0x344>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	88db      	ldrh	r3, [r3, #6]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d016      	beq.n	8005c98 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	88da      	ldrh	r2, [r3, #6]
 8005c6e:	2308      	movs	r3, #8
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	1c18      	adds	r0, r3, #0
 8005c76:	1c11      	adds	r1, r2, #0
 8005c78:	b28a      	uxth	r2, r1
 8005c7a:	b283      	uxth	r3, r0
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d900      	bls.n	8005c82 <USBD_GetDescriptor+0x32e>
 8005c80:	1c01      	adds	r1, r0, #0
 8005c82:	b28a      	uxth	r2, r1
 8005c84:	2108      	movs	r1, #8
 8005c86:	187b      	adds	r3, r7, r1
 8005c88:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 fa74 	bl	8006180 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	88db      	ldrh	r3, [r3, #6]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d105      	bne.n	8005cac <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 fad6 	bl	8006254 <USBD_CtlSendStatus>
 8005ca8:	e000      	b.n	8005cac <USBD_GetDescriptor+0x358>
    return;
 8005caa:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b004      	add	sp, #16
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	08006e54 	.word	0x08006e54
 8005cb8:	08006e74 	.word	0x08006e74

08005cbc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	889b      	ldrh	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d13d      	bne.n	8005d4a <USBD_SetAddress+0x8e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	88db      	ldrh	r3, [r3, #6]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d139      	bne.n	8005d4a <USBD_SetAddress+0x8e>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	885b      	ldrh	r3, [r3, #2]
 8005cda:	2b7f      	cmp	r3, #127	; 0x7f
 8005cdc:	d835      	bhi.n	8005d4a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	217f      	movs	r1, #127	; 0x7f
 8005cea:	400a      	ands	r2, r1
 8005cec:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	23a7      	movs	r3, #167	; 0xa7
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	5cd3      	ldrb	r3, [r2, r3]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d106      	bne.n	8005d08 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0011      	movs	r1, r2
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 f9be 	bl	8006082 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d06:	e026      	b.n	8005d56 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	240f      	movs	r4, #15
 8005d0c:	193a      	adds	r2, r7, r4
 8005d0e:	4914      	ldr	r1, [pc, #80]	; (8005d60 <USBD_SetAddress+0xa4>)
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d14:	193b      	adds	r3, r7, r4
 8005d16:	781a      	ldrb	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	0011      	movs	r1, r2
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f000 fe9d 	bl	8006a5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 fa95 	bl	8006254 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d2a:	193b      	adds	r3, r7, r4
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	23a7      	movs	r3, #167	; 0xa7
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	2102      	movs	r1, #2
 8005d3a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3c:	e00b      	b.n	8005d56 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	23a7      	movs	r3, #167	; 0xa7
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	2101      	movs	r1, #1
 8005d46:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d48:	e005      	b.n	8005d56 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	0011      	movs	r1, r2
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 f996 	bl	8006082 <USBD_CtlError>
  }
}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b005      	add	sp, #20
 8005d5c:	bd90      	pop	{r4, r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	0000029e 	.word	0x0000029e

08005d64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	4b4c      	ldr	r3, [pc, #304]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005d76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d78:	4b4b      	ldr	r3, [pc, #300]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d906      	bls.n	8005d8e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0011      	movs	r1, r2
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 f97b 	bl	8006082 <USBD_CtlError>
 8005d8c:	e088      	b.n	8005ea0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	23a7      	movs	r3, #167	; 0xa7
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	5cd3      	ldrb	r3, [r2, r3]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d002      	beq.n	8005da0 <USBD_SetConfig+0x3c>
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d029      	beq.n	8005df2 <USBD_SetConfig+0x8e>
 8005d9e:	e071      	b.n	8005e84 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005da0:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01f      	beq.n	8005de8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8005da8:	4b3f      	ldr	r3, [pc, #252]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	001a      	movs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	23a7      	movs	r3, #167	; 0xa7
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	2103      	movs	r1, #3
 8005dba:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005dbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005dbe:	781a      	ldrb	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	0011      	movs	r1, r2
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7ff f8bd 	bl	8004f44 <USBD_SetClassConfig>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d106      	bne.n	8005dde <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 f953 	bl	8006082 <USBD_CtlError>
            return;
 8005ddc:	e060      	b.n	8005ea0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f000 fa37 	bl	8006254 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005de6:	e05b      	b.n	8005ea0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 fa32 	bl	8006254 <USBD_CtlSendStatus>
        break;
 8005df0:	e056      	b.n	8005ea0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005df2:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d115      	bne.n	8005e26 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	23a7      	movs	r3, #167	; 0xa7
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	2102      	movs	r1, #2
 8005e02:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8005e04:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	001a      	movs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005e0e:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0011      	movs	r1, r2
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7ff f8bc 	bl	8004f94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fa18 	bl	8006254 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005e24:	e03c      	b.n	8005ea0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d022      	beq.n	8005e7a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0011      	movs	r1, r2
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f7ff f8a8 	bl	8004f94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e44:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	001a      	movs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e4e:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0011      	movs	r1, r2
 8005e56:	0018      	movs	r0, r3
 8005e58:	f7ff f874 	bl	8004f44 <USBD_SetClassConfig>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d106      	bne.n	8005e70 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	0011      	movs	r1, r2
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 f90a 	bl	8006082 <USBD_CtlError>
            return;
 8005e6e:	e017      	b.n	8005ea0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 f9ee 	bl	8006254 <USBD_CtlSendStatus>
        break;
 8005e78:	e012      	b.n	8005ea0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f9e9 	bl	8006254 <USBD_CtlSendStatus>
        break;
 8005e82:	e00d      	b.n	8005ea0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f8f9 	bl	8006082 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <USBD_SetConfig+0x144>)
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0011      	movs	r1, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7ff f87b 	bl	8004f94 <USBD_ClrClassConfig>
        break;
 8005e9e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	200001b0 	.word	0x200001b0

08005eac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	88db      	ldrh	r3, [r3, #6]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d006      	beq.n	8005ecc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0011      	movs	r1, r2
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f8dc 	bl	8006082 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005eca:	e025      	b.n	8005f18 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	23a7      	movs	r3, #167	; 0xa7
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	5cd3      	ldrb	r3, [r2, r3]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	db18      	blt.n	8005f0a <USBD_GetConfig+0x5e>
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	dd02      	ble.n	8005ee2 <USBD_GetConfig+0x36>
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d00c      	beq.n	8005efa <USBD_GetConfig+0x4e>
 8005ee0:	e013      	b.n	8005f0a <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3308      	adds	r3, #8
 8005eec:	0019      	movs	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 f944 	bl	8006180 <USBD_CtlSendData>
        break;
 8005ef8:	e00e      	b.n	8005f18 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	1d19      	adds	r1, r3, #4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 f93c 	bl	8006180 <USBD_CtlSendData>
        break;
 8005f08:	e006      	b.n	8005f18 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 f8b6 	bl	8006082 <USBD_CtlError>
        break;
 8005f16:	46c0      	nop			; (mov r8, r8)
}
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	23a7      	movs	r3, #167	; 0xa7
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	5cd3      	ldrb	r3, [r2, r3]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d822      	bhi.n	8005f7e <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	88db      	ldrh	r3, [r3, #6]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d006      	beq.n	8005f4e <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 f89b 	bl	8006082 <USBD_CtlError>
        break;
 8005f4c:	e01e      	b.n	8005f8c <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	23a9      	movs	r3, #169	; 0xa9
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	58d3      	ldr	r3, [r2, r3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2202      	movs	r2, #2
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	0019      	movs	r1, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 f902 	bl	8006180 <USBD_CtlSendData>
      break;
 8005f7c:	e006      	b.n	8005f8c <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0011      	movs	r1, r2
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 f87c 	bl	8006082 <USBD_CtlError>
      break;
 8005f8a:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	885b      	ldrh	r3, [r3, #2]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d108      	bne.n	8005fb8 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	23a9      	movs	r3, #169	; 0xa9
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	2101      	movs	r1, #1
 8005fae:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 f94e 	bl	8006254 <USBD_CtlSendStatus>
  }
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	23a7      	movs	r3, #167	; 0xa7
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	5cd3      	ldrb	r3, [r2, r3]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d80d      	bhi.n	8005ff4 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	885b      	ldrh	r3, [r3, #2]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d110      	bne.n	8006002 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	23a9      	movs	r3, #169	; 0xa9
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 f931 	bl	8006254 <USBD_CtlSendStatus>
      }
      break;
 8005ff2:	e006      	b.n	8006002 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f841 	bl	8006082 <USBD_CtlError>
      break;
 8006000:	e000      	b.n	8006004 <USBD_ClrFeature+0x44>
      break;
 8006002:	46c0      	nop			; (mov r8, r8)
  }
}
 8006004:	46c0      	nop			; (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	b002      	add	sp, #8
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	785a      	ldrb	r2, [r3, #1]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3302      	adds	r3, #2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b29a      	uxth	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	3303      	adds	r3, #3
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	b29b      	uxth	r3, r3
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	3304      	adds	r3, #4
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b29a      	uxth	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	3305      	adds	r3, #5
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	b29b      	uxth	r3, r3
 8006056:	18d3      	adds	r3, r2, r3
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	3306      	adds	r3, #6
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	b29a      	uxth	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	3307      	adds	r3, #7
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	b29b      	uxth	r3, r3
 8006072:	18d3      	adds	r3, r2, r3
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	80da      	strh	r2, [r3, #6]

}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	46bd      	mov	sp, r7
 800607e:	b002      	add	sp, #8
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	0018      	movs	r0, r3
 8006092:	f000 fc60 	bl	8006956 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2100      	movs	r1, #0
 800609a:	0018      	movs	r0, r3
 800609c:	f000 fc5b 	bl	8006956 <USBD_LL_StallEP>
}
 80060a0:	46c0      	nop			; (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b002      	add	sp, #8
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060b4:	2317      	movs	r3, #23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03d      	beq.n	800613e <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 f83e 	bl	8006146 <USBD_GetLen>
 80060ca:	0003      	movs	r3, r0
 80060cc:	3301      	adds	r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	18db      	adds	r3, r3, r3
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80060d8:	2017      	movs	r0, #23
 80060da:	183b      	adds	r3, r7, r0
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	183a      	adds	r2, r7, r0
 80060e0:	1c59      	adds	r1, r3, #1
 80060e2:	7011      	strb	r1, [r2, #0]
 80060e4:	001a      	movs	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	189b      	adds	r3, r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	7812      	ldrb	r2, [r2, #0]
 80060ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80060f0:	183b      	adds	r3, r7, r0
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	183a      	adds	r2, r7, r0
 80060f6:	1c59      	adds	r1, r3, #1
 80060f8:	7011      	strb	r1, [r2, #0]
 80060fa:	001a      	movs	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	2203      	movs	r2, #3
 8006102:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006104:	e017      	b.n	8006136 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	60fa      	str	r2, [r7, #12]
 800610c:	2417      	movs	r4, #23
 800610e:	193a      	adds	r2, r7, r4
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	1939      	adds	r1, r7, r4
 8006114:	1c50      	adds	r0, r2, #1
 8006116:	7008      	strb	r0, [r1, #0]
 8006118:	0011      	movs	r1, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	1852      	adds	r2, r2, r1
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006122:	193b      	adds	r3, r7, r4
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	193a      	adds	r2, r7, r4
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	7011      	strb	r1, [r2, #0]
 800612c:	001a      	movs	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	189b      	adds	r3, r3, r2
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e3      	bne.n	8006106 <USBD_GetString+0x5e>
    }
  }
}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	46bd      	mov	sp, r7
 8006142:	b007      	add	sp, #28
 8006144:	bd90      	pop	{r4, r7, pc}

08006146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800614e:	230f      	movs	r3, #15
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006156:	e008      	b.n	800616a <USBD_GetLen+0x24>
  {
    len++;
 8006158:	210f      	movs	r1, #15
 800615a:	187b      	adds	r3, r7, r1
 800615c:	781a      	ldrb	r2, [r3, #0]
 800615e:	187b      	adds	r3, r7, r1
 8006160:	3201      	adds	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
    buf++;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f2      	bne.n	8006158 <USBD_GetLen+0x12>
  }

  return len;
 8006172:	230f      	movs	r3, #15
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	781b      	ldrb	r3, [r3, #0]
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b004      	add	sp, #16
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	1dbb      	adds	r3, r7, #6
 800618c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	23a5      	movs	r3, #165	; 0xa5
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	2102      	movs	r1, #2
 8006196:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006198:	1dbb      	adds	r3, r7, #6
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80061a0:	1dbb      	adds	r3, r7, #6
 80061a2:	881a      	ldrh	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061a8:	1dbb      	adds	r3, r7, #6
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	2100      	movs	r1, #0
 80061b2:	f000 fc7f 	bl	8006ab4 <USBD_LL_Transmit>

  return USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	1dbb      	adds	r3, r7, #6
 80061cc:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061ce:	1dbb      	adds	r3, r7, #6
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	2100      	movs	r1, #0
 80061d8:	f000 fc6c 	bl	8006ab4 <USBD_LL_Transmit>

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	0018      	movs	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b004      	add	sp, #16
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	1dbb      	adds	r3, r7, #6
 80061f2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	23a5      	movs	r3, #165	; 0xa5
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	2103      	movs	r1, #3
 80061fc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80061fe:	1dbb      	adds	r3, r7, #6
 8006200:	8819      	ldrh	r1, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	23ae      	movs	r3, #174	; 0xae
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800620a:	1dbb      	adds	r3, r7, #6
 800620c:	8819      	ldrh	r1, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	23b0      	movs	r3, #176	; 0xb0
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006216:	1dbb      	adds	r3, r7, #6
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	2100      	movs	r1, #0
 8006220:	f000 fc80 	bl	8006b24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	1dbb      	adds	r3, r7, #6
 800623a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800623c:	1dbb      	adds	r3, r7, #6
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	2100      	movs	r1, #0
 8006246:	f000 fc6d 	bl	8006b24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	0018      	movs	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	b004      	add	sp, #16
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	23a5      	movs	r3, #165	; 0xa5
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	2104      	movs	r1, #4
 8006264:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	2300      	movs	r3, #0
 800626a:	2200      	movs	r2, #0
 800626c:	2100      	movs	r1, #0
 800626e:	f000 fc21 	bl	8006ab4 <USBD_LL_Transmit>

  return USBD_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	0018      	movs	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	b002      	add	sp, #8
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	23a5      	movs	r3, #165	; 0xa5
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	2105      	movs	r1, #5
 800628c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	2300      	movs	r3, #0
 8006292:	2200      	movs	r2, #0
 8006294:	2100      	movs	r1, #0
 8006296:	f000 fc45 	bl	8006b24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	0018      	movs	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062a8:	4914      	ldr	r1, [pc, #80]	; (80062fc <MX_USB_DEVICE_Init+0x58>)
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <MX_USB_DEVICE_Init+0x5c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7fe fde0 	bl	8004e74 <USBD_Init>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d001      	beq.n	80062bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062b8:	f7fa f94c 	bl	8000554 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80062bc:	4a11      	ldr	r2, [pc, #68]	; (8006304 <MX_USB_DEVICE_Init+0x60>)
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <MX_USB_DEVICE_Init+0x5c>)
 80062c0:	0011      	movs	r1, r2
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fe fe07 	bl	8004ed6 <USBD_RegisterClass>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80062cc:	f7fa f942 	bl	8000554 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <MX_USB_DEVICE_Init+0x64>)
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <MX_USB_DEVICE_Init+0x5c>)
 80062d4:	0011      	movs	r1, r2
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7fe fdba 	bl	8004e50 <USBD_AUDIO_RegisterInterface>
 80062dc:	1e03      	subs	r3, r0, #0
 80062de:	d001      	beq.n	80062e4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80062e0:	f7fa f938 	bl	8000554 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <MX_USB_DEVICE_Init+0x5c>)
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7fe fe16 	bl	8004f18 <USBD_Start>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d001      	beq.n	80062f4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80062f0:	f7fa f930 	bl	8000554 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	200000dc 	.word	0x200000dc
 8006300:	2000039c 	.word	0x2000039c
 8006304:	2000000c 	.word	0x2000000c
 8006308:	200000c0 	.word	0x200000c0

0800630c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8006318:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800631a:	0018      	movs	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	b004      	add	sp, #16
 8006320:	bd80      	pop	{r7, pc}

08006322 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800632a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800632c:	0018      	movs	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	b002      	add	sp, #8
 8006332:	bd80      	pop	{r7, pc}

08006334 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	1dfb      	adds	r3, r7, #7
 8006340:	701a      	strb	r2, [r3, #0]
//    break;
//    case AUDIO_CMD_PLAY:
//    	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, pbuf, size, DAC_ALIGN_8B_R);
//    break;
//  }
  return (USBD_OK);
 8006342:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}

0800634c <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	0002      	movs	r2, r0
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8006358:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b002      	add	sp, #8
 8006360:	bd80      	pop	{r7, pc}

08006362 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	0002      	movs	r2, r0
 800636a:	1dfb      	adds	r3, r7, #7
 800636c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800636e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006370:	0018      	movs	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}

08006378 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	0002      	movs	r2, r0
 8006380:	1dfb      	adds	r3, r7, #7
 8006382:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006384:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006386:	0018      	movs	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}

0800638e <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8006392:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	0002      	movs	r2, r0
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	1dfb      	adds	r3, r7, #7
 80063a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2212      	movs	r2, #18
 80063ae:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b002      	add	sp, #8
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	200000f8 	.word	0x200000f8

080063c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	0002      	movs	r2, r0
 80063c8:	6039      	str	r1, [r7, #0]
 80063ca:	1dfb      	adds	r3, r7, #7
 80063cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2204      	movs	r2, #4
 80063d2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063d4:	4b02      	ldr	r3, [pc, #8]	; (80063e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063d6:	0018      	movs	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	b002      	add	sp, #8
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	2000010c 	.word	0x2000010c

080063e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	0002      	movs	r2, r0
 80063ec:	6039      	str	r1, [r7, #0]
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80063f2:	1dfb      	adds	r3, r7, #7
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	4908      	ldr	r1, [pc, #32]	; (8006420 <USBD_FS_ProductStrDescriptor+0x3c>)
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <USBD_FS_ProductStrDescriptor+0x40>)
 8006400:	0018      	movs	r0, r3
 8006402:	f7ff fe51 	bl	80060a8 <USBD_GetString>
 8006406:	e005      	b.n	8006414 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	4905      	ldr	r1, [pc, #20]	; (8006420 <USBD_FS_ProductStrDescriptor+0x3c>)
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <USBD_FS_ProductStrDescriptor+0x40>)
 800640e:	0018      	movs	r0, r3
 8006410:	f7ff fe4a 	bl	80060a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006416:	0018      	movs	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000660 	.word	0x20000660
 8006424:	08006dd4 	.word	0x08006dd4

08006428 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	0002      	movs	r2, r0
 8006430:	6039      	str	r1, [r7, #0]
 8006432:	1dfb      	adds	r3, r7, #7
 8006434:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4904      	ldr	r1, [pc, #16]	; (800644c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff fe33 	bl	80060a8 <USBD_GetString>
  return USBD_StrDesc;
 8006442:	4b02      	ldr	r3, [pc, #8]	; (800644c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b002      	add	sp, #8
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000660 	.word	0x20000660
 8006450:	08006de8 	.word	0x08006de8

08006454 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	0002      	movs	r2, r0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	1dfb      	adds	r3, r7, #7
 8006460:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	221a      	movs	r2, #26
 8006466:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006468:	f000 f84c 	bl	8006504 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b002      	add	sp, #8
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	20000110 	.word	0x20000110

0800647c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	0002      	movs	r2, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800648a:	1dfb      	adds	r3, r7, #7
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	4908      	ldr	r1, [pc, #32]	; (80064b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <USBD_FS_ConfigStrDescriptor+0x40>)
 8006498:	0018      	movs	r0, r3
 800649a:	f7ff fe05 	bl	80060a8 <USBD_GetString>
 800649e:	e005      	b.n	80064ac <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	4905      	ldr	r1, [pc, #20]	; (80064b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <USBD_FS_ConfigStrDescriptor+0x40>)
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7ff fdfe 	bl	80060a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b002      	add	sp, #8
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	20000660 	.word	0x20000660
 80064bc:	08006dfc 	.word	0x08006dfc

080064c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	0002      	movs	r2, r0
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	1dfb      	adds	r3, r7, #7
 80064cc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80064ce:	1dfb      	adds	r3, r7, #7
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4908      	ldr	r1, [pc, #32]	; (80064fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80064dc:	0018      	movs	r0, r3
 80064de:	f7ff fde3 	bl	80060a8 <USBD_GetString>
 80064e2:	e005      	b.n	80064f0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	4905      	ldr	r1, [pc, #20]	; (80064fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7ff fddc 	bl	80060a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064f0:	4b02      	ldr	r3, [pc, #8]	; (80064fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80064f2:	0018      	movs	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b002      	add	sp, #8
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	20000660 	.word	0x20000660
 8006500:	08006e0c 	.word	0x08006e0c

08006504 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <Get_SerialNum+0x48>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <Get_SerialNum+0x4c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <Get_SerialNum+0x50>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	18d3      	adds	r3, r2, r3
 8006522:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800652a:	490b      	ldr	r1, [pc, #44]	; (8006558 <Get_SerialNum+0x54>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2208      	movs	r2, #8
 8006530:	0018      	movs	r0, r3
 8006532:	f000 f815 	bl	8006560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006536:	4909      	ldr	r1, [pc, #36]	; (800655c <Get_SerialNum+0x58>)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2204      	movs	r2, #4
 800653c:	0018      	movs	r0, r3
 800653e:	f000 f80f 	bl	8006560 <IntToUnicode>
  }
}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	46bd      	mov	sp, r7
 8006546:	b004      	add	sp, #16
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	1ffff7ac 	.word	0x1ffff7ac
 8006550:	1ffff7b0 	.word	0x1ffff7b0
 8006554:	1ffff7b4 	.word	0x1ffff7b4
 8006558:	20000112 	.word	0x20000112
 800655c:	20000122 	.word	0x20000122

08006560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	1dfb      	adds	r3, r7, #7
 800656c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800656e:	2117      	movs	r1, #23
 8006570:	187b      	adds	r3, r7, r1
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8006576:	187b      	adds	r3, r7, r1
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e02f      	b.n	80065de <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0f1b      	lsrs	r3, r3, #28
 8006582:	2b09      	cmp	r3, #9
 8006584:	d80d      	bhi.n	80065a2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	0f1b      	lsrs	r3, r3, #28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	2317      	movs	r3, #23
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	0019      	movs	r1, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	185b      	adds	r3, r3, r1
 800659a:	3230      	adds	r2, #48	; 0x30
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e00c      	b.n	80065bc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0f1b      	lsrs	r3, r3, #28
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	2317      	movs	r3, #23
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	0019      	movs	r1, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	185b      	adds	r3, r3, r1
 80065b6:	3237      	adds	r2, #55	; 0x37
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065c2:	2117      	movs	r1, #23
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	3301      	adds	r3, #1
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	187b      	adds	r3, r7, r1
 80065da:	3201      	adds	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	2317      	movs	r3, #23
 80065e0:	18fa      	adds	r2, r7, r3
 80065e2:	1dfb      	adds	r3, r7, #7
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3c8      	bcc.n	800657e <IntToUnicode+0x1e>
  }
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b006      	add	sp, #24
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0e      	ldr	r2, [pc, #56]	; (800663c <HAL_PCD_MspInit+0x48>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d115      	bne.n	8006632 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006606:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <HAL_PCD_MspInit+0x4c>)
 8006608:	69da      	ldr	r2, [r3, #28]
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <HAL_PCD_MspInit+0x4c>)
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	0409      	lsls	r1, r1, #16
 8006610:	430a      	orrs	r2, r1
 8006612:	61da      	str	r2, [r3, #28]
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_PCD_MspInit+0x4c>)
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	4013      	ands	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	201f      	movs	r0, #31
 8006628:	f7fa fa0c 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800662c:	201f      	movs	r0, #31
 800662e:	f7fa fa1e 	bl	8000a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b004      	add	sp, #16
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	40005c00 	.word	0x40005c00
 8006640:	40021000 	.word	0x40021000

08006644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	239c      	movs	r3, #156	; 0x9c
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	58d2      	ldr	r2, [r2, r3]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	218c      	movs	r1, #140	; 0x8c
 8006658:	0089      	lsls	r1, r1, #2
 800665a:	468c      	mov	ip, r1
 800665c:	4463      	add	r3, ip
 800665e:	0019      	movs	r1, r3
 8006660:	0010      	movs	r0, r2
 8006662:	f7fe fcad 	bl	8004fc0 <USBD_LL_SetupStage>
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	46bd      	mov	sp, r7
 800666a:	b002      	add	sp, #8
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	000a      	movs	r2, r1
 8006678:	1cfb      	adds	r3, r7, #3
 800667a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	239c      	movs	r3, #156	; 0x9c
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	58d0      	ldr	r0, [r2, r3]
 8006684:	1cfb      	adds	r3, r7, #3
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	239e      	movs	r3, #158	; 0x9e
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	0152      	lsls	r2, r2, #5
 8006690:	188a      	adds	r2, r1, r2
 8006692:	18d3      	adds	r3, r2, r3
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	1cfb      	adds	r3, r7, #3
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	0019      	movs	r1, r3
 800669c:	f7fe fcec 	bl	8005078 <USBD_LL_DataOutStage>
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	000a      	movs	r2, r1
 80066b2:	1cfb      	adds	r3, r7, #3
 80066b4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	239c      	movs	r3, #156	; 0x9c
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	58d0      	ldr	r0, [r2, r3]
 80066be:	1cfb      	adds	r3, r7, #3
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	015b      	lsls	r3, r3, #5
 80066c6:	18d3      	adds	r3, r2, r3
 80066c8:	333c      	adds	r3, #60	; 0x3c
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	1cfb      	adds	r3, r7, #3
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	0019      	movs	r1, r3
 80066d2:	f7fe fd53 	bl	800517c <USBD_LL_DataInStage>
}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	46bd      	mov	sp, r7
 80066da:	b002      	add	sp, #8
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	239c      	movs	r3, #156	; 0x9c
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	58d3      	ldr	r3, [r2, r3]
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7fe fe8a 	bl	8005408 <USBD_LL_SOF>
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006704:	230f      	movs	r3, #15
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d001      	beq.n	8006718 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8006714:	f7f9 ff1e 	bl	8000554 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	239c      	movs	r3, #156	; 0x9c
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	58d2      	ldr	r2, [r2, r3]
 8006720:	230f      	movs	r3, #15
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	0019      	movs	r1, r3
 8006728:	0010      	movs	r0, r2
 800672a:	f7fe fe2c 	bl	8005386 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	239c      	movs	r3, #156	; 0x9c
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	58d3      	ldr	r3, [r2, r3]
 8006736:	0018      	movs	r0, r3
 8006738:	f7fe fddd 	bl	80052f6 <USBD_LL_Reset>
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	239c      	movs	r3, #156	; 0x9c
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	58d3      	ldr	r3, [r2, r3]
 8006754:	0018      	movs	r0, r3
 8006756:	f7fe fe27 	bl	80053a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_PCD_SuspendCallback+0x34>)
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	4b04      	ldr	r3, [pc, #16]	; (8006778 <HAL_PCD_SuspendCallback+0x34>)
 8006768:	2106      	movs	r1, #6
 800676a:	430a      	orrs	r2, r1
 800676c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	46bd      	mov	sp, r7
 8006772:	b002      	add	sp, #8
 8006774:	bd80      	pop	{r7, pc}
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800678c:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <HAL_PCD_ResumeCallback+0x38>)
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <HAL_PCD_ResumeCallback+0x38>)
 8006792:	2106      	movs	r1, #6
 8006794:	438a      	bics	r2, r1
 8006796:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8006798:	f000 fa13 	bl	8006bc2 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	239c      	movs	r3, #156	; 0x9c
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	58d3      	ldr	r3, [r2, r3]
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7fe fe17 	bl	80053d8 <USBD_LL_Resume>
}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b002      	add	sp, #8
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	e000ed00 	.word	0xe000ed00

080067b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80067c0:	4a1e      	ldr	r2, [pc, #120]	; (800683c <USBD_LL_Init+0x84>)
 80067c2:	239c      	movs	r3, #156	; 0x9c
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	23b0      	movs	r3, #176	; 0xb0
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	491a      	ldr	r1, [pc, #104]	; (800683c <USBD_LL_Init+0x84>)
 80067d2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80067d4:	4b19      	ldr	r3, [pc, #100]	; (800683c <USBD_LL_Init+0x84>)
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <USBD_LL_Init+0x88>)
 80067d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <USBD_LL_Init+0x84>)
 80067dc:	2208      	movs	r2, #8
 80067de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <USBD_LL_Init+0x84>)
 80067e2:	2202      	movs	r2, #2
 80067e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <USBD_LL_Init+0x84>)
 80067e8:	2202      	movs	r2, #2
 80067ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80067ec:	4b13      	ldr	r3, [pc, #76]	; (800683c <USBD_LL_Init+0x84>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <USBD_LL_Init+0x84>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80067f8:	4b10      	ldr	r3, [pc, #64]	; (800683c <USBD_LL_Init+0x84>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <USBD_LL_Init+0x84>)
 8006800:	0018      	movs	r0, r3
 8006802:	f7fa fc51 	bl	80010a8 <HAL_PCD_Init>
 8006806:	1e03      	subs	r3, r0, #0
 8006808:	d001      	beq.n	800680e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800680a:	f7f9 fea3 	bl	8000554 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	23b0      	movs	r3, #176	; 0xb0
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	58d0      	ldr	r0, [r2, r3]
 8006816:	2318      	movs	r3, #24
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	f7fb fbd2 	bl	8001fc4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	23b0      	movs	r3, #176	; 0xb0
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	58d0      	ldr	r0, [r2, r3]
 8006828:	2358      	movs	r3, #88	; 0x58
 800682a:	2200      	movs	r2, #0
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	f7fb fbc9 	bl	8001fc4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	0018      	movs	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	b002      	add	sp, #8
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000860 	.word	0x20000860
 8006840:	40005c00 	.word	0x40005c00

08006844 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800684c:	210f      	movs	r1, #15
 800684e:	187b      	adds	r3, r7, r1
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006854:	260e      	movs	r6, #14
 8006856:	19bb      	adds	r3, r7, r6
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	23b0      	movs	r3, #176	; 0xb0
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	58d3      	ldr	r3, [r2, r3]
 8006864:	000d      	movs	r5, r1
 8006866:	187c      	adds	r4, r7, r1
 8006868:	0018      	movs	r0, r3
 800686a:	f7fa fd01 	bl	8001270 <HAL_PCD_Start>
 800686e:	0003      	movs	r3, r0
 8006870:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006872:	19bc      	adds	r4, r7, r6
 8006874:	0029      	movs	r1, r5
 8006876:	187b      	adds	r3, r7, r1
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	0018      	movs	r0, r3
 800687c:	f000 f9a8 	bl	8006bd0 <USBD_Get_USB_Status>
 8006880:	0003      	movs	r3, r0
 8006882:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8006884:	19bb      	adds	r3, r7, r6
 8006886:	781b      	ldrb	r3, [r3, #0]
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b005      	add	sp, #20
 800688e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006890 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	000c      	movs	r4, r1
 800689a:	0010      	movs	r0, r2
 800689c:	0019      	movs	r1, r3
 800689e:	1cfb      	adds	r3, r7, #3
 80068a0:	1c22      	adds	r2, r4, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	1cbb      	adds	r3, r7, #2
 80068a6:	1c02      	adds	r2, r0, #0
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	003b      	movs	r3, r7
 80068ac:	1c0a      	adds	r2, r1, #0
 80068ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068b0:	260f      	movs	r6, #15
 80068b2:	19bb      	adds	r3, r7, r6
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068b8:	250e      	movs	r5, #14
 80068ba:	197b      	adds	r3, r7, r5
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	23b0      	movs	r3, #176	; 0xb0
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	58d0      	ldr	r0, [r2, r3]
 80068c8:	19bc      	adds	r4, r7, r6
 80068ca:	1cbb      	adds	r3, r7, #2
 80068cc:	781d      	ldrb	r5, [r3, #0]
 80068ce:	003b      	movs	r3, r7
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	1cfb      	adds	r3, r7, #3
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	002b      	movs	r3, r5
 80068d8:	f7fa fea3 	bl	8001622 <HAL_PCD_EP_Open>
 80068dc:	0003      	movs	r3, r0
 80068de:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068e0:	250e      	movs	r5, #14
 80068e2:	197c      	adds	r4, r7, r5
 80068e4:	19bb      	adds	r3, r7, r6
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	0018      	movs	r0, r3
 80068ea:	f000 f971 	bl	8006bd0 <USBD_Get_USB_Status>
 80068ee:	0003      	movs	r3, r0
 80068f0:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 80068f2:	197b      	adds	r3, r7, r5
 80068f4:	781b      	ldrb	r3, [r3, #0]
}
 80068f6:	0018      	movs	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b005      	add	sp, #20
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	000a      	movs	r2, r1
 8006908:	1cfb      	adds	r3, r7, #3
 800690a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800690c:	210f      	movs	r1, #15
 800690e:	187b      	adds	r3, r7, r1
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006914:	260e      	movs	r6, #14
 8006916:	19bb      	adds	r3, r7, r6
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	23b0      	movs	r3, #176	; 0xb0
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	58d2      	ldr	r2, [r2, r3]
 8006924:	000d      	movs	r5, r1
 8006926:	187c      	adds	r4, r7, r1
 8006928:	1cfb      	adds	r3, r7, #3
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	0019      	movs	r1, r3
 800692e:	0010      	movs	r0, r2
 8006930:	f7fa fee9 	bl	8001706 <HAL_PCD_EP_Close>
 8006934:	0003      	movs	r3, r0
 8006936:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006938:	19bc      	adds	r4, r7, r6
 800693a:	0029      	movs	r1, r5
 800693c:	187b      	adds	r3, r7, r1
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	0018      	movs	r0, r3
 8006942:	f000 f945 	bl	8006bd0 <USBD_Get_USB_Status>
 8006946:	0003      	movs	r3, r0
 8006948:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 800694a:	19bb      	adds	r3, r7, r6
 800694c:	781b      	ldrb	r3, [r3, #0]
}
 800694e:	0018      	movs	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	b005      	add	sp, #20
 8006954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006956 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	000a      	movs	r2, r1
 8006960:	1cfb      	adds	r3, r7, #3
 8006962:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006964:	210f      	movs	r1, #15
 8006966:	187b      	adds	r3, r7, r1
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800696c:	260e      	movs	r6, #14
 800696e:	19bb      	adds	r3, r7, r6
 8006970:	2200      	movs	r2, #0
 8006972:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	23b0      	movs	r3, #176	; 0xb0
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	58d2      	ldr	r2, [r2, r3]
 800697c:	000d      	movs	r5, r1
 800697e:	187c      	adds	r4, r7, r1
 8006980:	1cfb      	adds	r3, r7, #3
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	0019      	movs	r1, r3
 8006986:	0010      	movs	r0, r2
 8006988:	f7fa ff89 	bl	800189e <HAL_PCD_EP_SetStall>
 800698c:	0003      	movs	r3, r0
 800698e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006990:	19bc      	adds	r4, r7, r6
 8006992:	0029      	movs	r1, r5
 8006994:	187b      	adds	r3, r7, r1
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	0018      	movs	r0, r3
 800699a:	f000 f919 	bl	8006bd0 <USBD_Get_USB_Status>
 800699e:	0003      	movs	r3, r0
 80069a0:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 80069a2:	19bb      	adds	r3, r7, r6
 80069a4:	781b      	ldrb	r3, [r3, #0]
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b005      	add	sp, #20
 80069ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	000a      	movs	r2, r1
 80069b8:	1cfb      	adds	r3, r7, #3
 80069ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069bc:	210f      	movs	r1, #15
 80069be:	187b      	adds	r3, r7, r1
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069c4:	260e      	movs	r6, #14
 80069c6:	19bb      	adds	r3, r7, r6
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	23b0      	movs	r3, #176	; 0xb0
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	58d2      	ldr	r2, [r2, r3]
 80069d4:	000d      	movs	r5, r1
 80069d6:	187c      	adds	r4, r7, r1
 80069d8:	1cfb      	adds	r3, r7, #3
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	0019      	movs	r1, r3
 80069de:	0010      	movs	r0, r2
 80069e0:	f7fa ffc3 	bl	800196a <HAL_PCD_EP_ClrStall>
 80069e4:	0003      	movs	r3, r0
 80069e6:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069e8:	19bc      	adds	r4, r7, r6
 80069ea:	0029      	movs	r1, r5
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	0018      	movs	r0, r3
 80069f2:	f000 f8ed 	bl	8006bd0 <USBD_Get_USB_Status>
 80069f6:	0003      	movs	r3, r0
 80069f8:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 80069fa:	19bb      	adds	r3, r7, r6
 80069fc:	781b      	ldrb	r3, [r3, #0]
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b005      	add	sp, #20
 8006a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a06 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	000a      	movs	r2, r1
 8006a10:	1cfb      	adds	r3, r7, #3
 8006a12:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	23b0      	movs	r3, #176	; 0xb0
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	58d3      	ldr	r3, [r2, r3]
 8006a1c:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006a1e:	1cfb      	adds	r3, r7, #3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da0a      	bge.n	8006a3e <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006a28:	1cfb      	adds	r3, r7, #3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	227f      	movs	r2, #127	; 0x7f
 8006a2e:	4013      	ands	r3, r2
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	212a      	movs	r1, #42	; 0x2a
 8006a34:	015b      	lsls	r3, r3, #5
 8006a36:	18d3      	adds	r3, r2, r3
 8006a38:	185b      	adds	r3, r3, r1
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	e00a      	b.n	8006a54 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006a3e:	1cfb      	adds	r3, r7, #3
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	227f      	movs	r2, #127	; 0x7f
 8006a44:	401a      	ands	r2, r3
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	2395      	movs	r3, #149	; 0x95
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	0152      	lsls	r2, r2, #5
 8006a4e:	188a      	adds	r2, r1, r2
 8006a50:	18d3      	adds	r3, r2, r3
 8006a52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b004      	add	sp, #16
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	000a      	movs	r2, r1
 8006a66:	1cfb      	adds	r3, r7, #3
 8006a68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a6a:	210f      	movs	r1, #15
 8006a6c:	187b      	adds	r3, r7, r1
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a72:	260e      	movs	r6, #14
 8006a74:	19bb      	adds	r3, r7, r6
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	23b0      	movs	r3, #176	; 0xb0
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	58d2      	ldr	r2, [r2, r3]
 8006a82:	000d      	movs	r5, r1
 8006a84:	187c      	adds	r4, r7, r1
 8006a86:	1cfb      	adds	r3, r7, #3
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	0019      	movs	r1, r3
 8006a8c:	0010      	movs	r0, r2
 8006a8e:	f7fa fd9d 	bl	80015cc <HAL_PCD_SetAddress>
 8006a92:	0003      	movs	r3, r0
 8006a94:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a96:	19bc      	adds	r4, r7, r6
 8006a98:	0029      	movs	r1, r5
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 f896 	bl	8006bd0 <USBD_Get_USB_Status>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8006aa8:	19bb      	adds	r3, r7, r6
 8006aaa:	781b      	ldrb	r3, [r3, #0]
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b005      	add	sp, #20
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ab4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	0008      	movs	r0, r1
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	230b      	movs	r3, #11
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	1c02      	adds	r2, r0, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	2408      	movs	r4, #8
 8006acc:	193b      	adds	r3, r7, r4
 8006ace:	1c0a      	adds	r2, r1, #0
 8006ad0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad2:	2117      	movs	r1, #23
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ada:	2516      	movs	r5, #22
 8006adc:	197b      	adds	r3, r7, r5
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	23b0      	movs	r3, #176	; 0xb0
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	58d0      	ldr	r0, [r2, r3]
 8006aea:	193b      	adds	r3, r7, r4
 8006aec:	881d      	ldrh	r5, [r3, #0]
 8006aee:	000e      	movs	r6, r1
 8006af0:	187c      	adds	r4, r7, r1
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	230b      	movs	r3, #11
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	7819      	ldrb	r1, [r3, #0]
 8006afa:	002b      	movs	r3, r5
 8006afc:	f7fa fe8f 	bl	800181e <HAL_PCD_EP_Transmit>
 8006b00:	0003      	movs	r3, r0
 8006b02:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b04:	2516      	movs	r5, #22
 8006b06:	197c      	adds	r4, r7, r5
 8006b08:	0031      	movs	r1, r6
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 f85e 	bl	8006bd0 <USBD_Get_USB_Status>
 8006b14:	0003      	movs	r3, r0
 8006b16:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8006b18:	197b      	adds	r3, r7, r5
 8006b1a:	781b      	ldrb	r3, [r3, #0]
}
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b007      	add	sp, #28
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	0008      	movs	r0, r1
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	0019      	movs	r1, r3
 8006b32:	230b      	movs	r3, #11
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	1c02      	adds	r2, r0, #0
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	2408      	movs	r4, #8
 8006b3c:	193b      	adds	r3, r7, r4
 8006b3e:	1c0a      	adds	r2, r1, #0
 8006b40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b42:	2117      	movs	r1, #23
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	2200      	movs	r2, #0
 8006b48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b4a:	2516      	movs	r5, #22
 8006b4c:	197b      	adds	r3, r7, r5
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	23b0      	movs	r3, #176	; 0xb0
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	58d0      	ldr	r0, [r2, r3]
 8006b5a:	193b      	adds	r3, r7, r4
 8006b5c:	881d      	ldrh	r5, [r3, #0]
 8006b5e:	000e      	movs	r6, r1
 8006b60:	187c      	adds	r4, r7, r1
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	230b      	movs	r3, #11
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	7819      	ldrb	r1, [r3, #0]
 8006b6a:	002b      	movs	r3, r5
 8006b6c:	f7fa fe16 	bl	800179c <HAL_PCD_EP_Receive>
 8006b70:	0003      	movs	r3, r0
 8006b72:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b74:	2516      	movs	r5, #22
 8006b76:	197c      	adds	r4, r7, r5
 8006b78:	0031      	movs	r1, r6
 8006b7a:	187b      	adds	r3, r7, r1
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f000 f826 	bl	8006bd0 <USBD_Get_USB_Status>
 8006b84:	0003      	movs	r3, r0
 8006b86:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8006b88:	197b      	adds	r3, r7, r5
 8006b8a:	781b      	ldrb	r3, [r3, #0]
}
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b007      	add	sp, #28
 8006b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3 
	AUDIO_OUT_PACKET_NUM = 80
  */
//  static uint8_t mem[AUDIO_TOTAL_BUF_SIZE];
	uint8_t* mem = malloc(size);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 f878 	bl	8006c94 <malloc>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 4 */
  return mem;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
}
 8006baa:	0018      	movs	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b004      	add	sp, #16
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]

}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b002      	add	sp, #8
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006bc6:	f7f9 fb5f 	bl	8000288 <SystemClock_Config>
}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	0002      	movs	r2, r0
 8006bd8:	1dfb      	adds	r3, r7, #7
 8006bda:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bdc:	230f      	movs	r3, #15
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8006be4:	1dfb      	adds	r3, r7, #7
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d00d      	beq.n	8006c08 <USBD_Get_USB_Status+0x38>
 8006bec:	dc02      	bgt.n	8006bf4 <USBD_Get_USB_Status+0x24>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <USBD_Get_USB_Status+0x2e>
 8006bf2:	e018      	b.n	8006c26 <USBD_Get_USB_Status+0x56>
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d00c      	beq.n	8006c12 <USBD_Get_USB_Status+0x42>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d00f      	beq.n	8006c1c <USBD_Get_USB_Status+0x4c>
 8006bfc:	e013      	b.n	8006c26 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006bfe:	230f      	movs	r3, #15
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
    break;
 8006c06:	e013      	b.n	8006c30 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c08:	230f      	movs	r3, #15
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	701a      	strb	r2, [r3, #0]
    break;
 8006c10:	e00e      	b.n	8006c30 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c12:	230f      	movs	r3, #15
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
    break;
 8006c1a:	e009      	b.n	8006c30 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c1c:	230f      	movs	r3, #15
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2202      	movs	r2, #2
 8006c22:	701a      	strb	r2, [r3, #0]
    break;
 8006c24:	e004      	b.n	8006c30 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8006c26:	230f      	movs	r3, #15
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	701a      	strb	r2, [r3, #0]
    break;
 8006c2e:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8006c30:	230f      	movs	r3, #15
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	781b      	ldrb	r3, [r3, #0]
}
 8006c36:	0018      	movs	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b004      	add	sp, #16
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	2000012c 	.word	0x2000012c

08006c4c <__libc_init_array>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	2600      	movs	r6, #0
 8006c50:	4d0c      	ldr	r5, [pc, #48]	; (8006c84 <__libc_init_array+0x38>)
 8006c52:	4c0d      	ldr	r4, [pc, #52]	; (8006c88 <__libc_init_array+0x3c>)
 8006c54:	1b64      	subs	r4, r4, r5
 8006c56:	10a4      	asrs	r4, r4, #2
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d109      	bne.n	8006c70 <__libc_init_array+0x24>
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	f000 f89d 	bl	8006d9c <_init>
 8006c62:	4d0a      	ldr	r5, [pc, #40]	; (8006c8c <__libc_init_array+0x40>)
 8006c64:	4c0a      	ldr	r4, [pc, #40]	; (8006c90 <__libc_init_array+0x44>)
 8006c66:	1b64      	subs	r4, r4, r5
 8006c68:	10a4      	asrs	r4, r4, #2
 8006c6a:	42a6      	cmp	r6, r4
 8006c6c:	d105      	bne.n	8006c7a <__libc_init_array+0x2e>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	00b3      	lsls	r3, r6, #2
 8006c72:	58eb      	ldr	r3, [r5, r3]
 8006c74:	4798      	blx	r3
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7ee      	b.n	8006c58 <__libc_init_array+0xc>
 8006c7a:	00b3      	lsls	r3, r6, #2
 8006c7c:	58eb      	ldr	r3, [r5, r3]
 8006c7e:	4798      	blx	r3
 8006c80:	3601      	adds	r6, #1
 8006c82:	e7f2      	b.n	8006c6a <__libc_init_array+0x1e>
 8006c84:	08006e8c 	.word	0x08006e8c
 8006c88:	08006e8c 	.word	0x08006e8c
 8006c8c:	08006e8c 	.word	0x08006e8c
 8006c90:	08006e90 	.word	0x08006e90

08006c94 <malloc>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <malloc+0x10>)
 8006c98:	0001      	movs	r1, r0
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	f000 f80c 	bl	8006cb8 <_malloc_r>
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	2000012c 	.word	0x2000012c

08006ca8 <memset>:
 8006ca8:	0003      	movs	r3, r0
 8006caa:	1812      	adds	r2, r2, r0
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <memset+0xa>
 8006cb0:	4770      	bx	lr
 8006cb2:	7019      	strb	r1, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	e7f9      	b.n	8006cac <memset+0x4>

08006cb8 <_malloc_r>:
 8006cb8:	2303      	movs	r3, #3
 8006cba:	b570      	push	{r4, r5, r6, lr}
 8006cbc:	1ccd      	adds	r5, r1, #3
 8006cbe:	439d      	bics	r5, r3
 8006cc0:	3508      	adds	r5, #8
 8006cc2:	0006      	movs	r6, r0
 8006cc4:	2d0c      	cmp	r5, #12
 8006cc6:	d21e      	bcs.n	8006d06 <_malloc_r+0x4e>
 8006cc8:	250c      	movs	r5, #12
 8006cca:	42a9      	cmp	r1, r5
 8006ccc:	d81d      	bhi.n	8006d0a <_malloc_r+0x52>
 8006cce:	0030      	movs	r0, r6
 8006cd0:	f000 f862 	bl	8006d98 <__malloc_lock>
 8006cd4:	4a25      	ldr	r2, [pc, #148]	; (8006d6c <_malloc_r+0xb4>)
 8006cd6:	6814      	ldr	r4, [r2, #0]
 8006cd8:	0021      	movs	r1, r4
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	d119      	bne.n	8006d12 <_malloc_r+0x5a>
 8006cde:	4c24      	ldr	r4, [pc, #144]	; (8006d70 <_malloc_r+0xb8>)
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <_malloc_r+0x36>
 8006ce6:	0030      	movs	r0, r6
 8006ce8:	f000 f844 	bl	8006d74 <_sbrk_r>
 8006cec:	6020      	str	r0, [r4, #0]
 8006cee:	0029      	movs	r1, r5
 8006cf0:	0030      	movs	r0, r6
 8006cf2:	f000 f83f 	bl	8006d74 <_sbrk_r>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	d12b      	bne.n	8006d52 <_malloc_r+0x9a>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	0030      	movs	r0, r6
 8006cfe:	6033      	str	r3, [r6, #0]
 8006d00:	f000 f84b 	bl	8006d9a <__malloc_unlock>
 8006d04:	e003      	b.n	8006d0e <_malloc_r+0x56>
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	dadf      	bge.n	8006cca <_malloc_r+0x12>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	6033      	str	r3, [r6, #0]
 8006d0e:	2000      	movs	r0, #0
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	680b      	ldr	r3, [r1, #0]
 8006d14:	1b5b      	subs	r3, r3, r5
 8006d16:	d419      	bmi.n	8006d4c <_malloc_r+0x94>
 8006d18:	2b0b      	cmp	r3, #11
 8006d1a:	d903      	bls.n	8006d24 <_malloc_r+0x6c>
 8006d1c:	600b      	str	r3, [r1, #0]
 8006d1e:	18cc      	adds	r4, r1, r3
 8006d20:	6025      	str	r5, [r4, #0]
 8006d22:	e003      	b.n	8006d2c <_malloc_r+0x74>
 8006d24:	684b      	ldr	r3, [r1, #4]
 8006d26:	428c      	cmp	r4, r1
 8006d28:	d10d      	bne.n	8006d46 <_malloc_r+0x8e>
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	0030      	movs	r0, r6
 8006d2e:	f000 f834 	bl	8006d9a <__malloc_unlock>
 8006d32:	0020      	movs	r0, r4
 8006d34:	2207      	movs	r2, #7
 8006d36:	300b      	adds	r0, #11
 8006d38:	1d23      	adds	r3, r4, #4
 8006d3a:	4390      	bics	r0, r2
 8006d3c:	1ac3      	subs	r3, r0, r3
 8006d3e:	d0e7      	beq.n	8006d10 <_malloc_r+0x58>
 8006d40:	425a      	negs	r2, r3
 8006d42:	50e2      	str	r2, [r4, r3]
 8006d44:	e7e4      	b.n	8006d10 <_malloc_r+0x58>
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	000c      	movs	r4, r1
 8006d4a:	e7ef      	b.n	8006d2c <_malloc_r+0x74>
 8006d4c:	000c      	movs	r4, r1
 8006d4e:	6849      	ldr	r1, [r1, #4]
 8006d50:	e7c3      	b.n	8006cda <_malloc_r+0x22>
 8006d52:	2303      	movs	r3, #3
 8006d54:	1cc4      	adds	r4, r0, #3
 8006d56:	439c      	bics	r4, r3
 8006d58:	42a0      	cmp	r0, r4
 8006d5a:	d0e1      	beq.n	8006d20 <_malloc_r+0x68>
 8006d5c:	1a21      	subs	r1, r4, r0
 8006d5e:	0030      	movs	r0, r6
 8006d60:	f000 f808 	bl	8006d74 <_sbrk_r>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d1db      	bne.n	8006d20 <_malloc_r+0x68>
 8006d68:	e7c7      	b.n	8006cfa <_malloc_r+0x42>
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	200001b4 	.word	0x200001b4
 8006d70:	200001b8 	.word	0x200001b8

08006d74 <_sbrk_r>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b570      	push	{r4, r5, r6, lr}
 8006d78:	4c06      	ldr	r4, [pc, #24]	; (8006d94 <_sbrk_r+0x20>)
 8006d7a:	0005      	movs	r5, r0
 8006d7c:	0008      	movs	r0, r1
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	f7f9 fcd2 	bl	8000728 <_sbrk>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d103      	bne.n	8006d90 <_sbrk_r+0x1c>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d000      	beq.n	8006d90 <_sbrk_r+0x1c>
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	20000ad4 	.word	0x20000ad4

08006d98 <__malloc_lock>:
 8006d98:	4770      	bx	lr

08006d9a <__malloc_unlock>:
 8006d9a:	4770      	bx	lr

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
